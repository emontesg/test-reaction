[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Accounts = Package['accounts-base'].Accounts;\nvar OAuth = Package.oauth.OAuth;\nvar Oauth = Package.oauth.Oauth;\nvar HTTP = Package.http.HTTP;\nvar HTTPInternals = Package.http.HTTPInternals;\nvar _ = Package.underscore._;\nvar ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\n\n/* Package-scope variables */\nvar Knowledge, getConfigProvider;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/knowledgeio_accounts-knowledge/knowledge_server.js                                                     //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nKnowledge = {};\n\nOauth.registerService('knowledge', 2, null, function (query) {\n  const config = ServiceConfiguration.configurations.findOne({ service: 'knowledge' });\n  const response = getToken(query);\n  const token = response.data;\n  const accessToken = token.access_token;\n  const identity = getUserInfo(accessToken);\n  if (token.refreshToken) {\n    serviceData.refreshToken = response.refreshToken;\n  }\n  var serviceData = {};\n   serviceData.id = identity.sub;\n   serviceData.username = identity.preferred_username;\n   serviceData.accessToken = accessToken;\n   serviceData.expiresAt = token.expires_in;\n   serviceData.email = identity.email\n   var profile = {};\n    profile.name = identity.preferred_username;\n    profile.email = identity.email;\n  return {\n    serviceData: serviceData,\n    options: { profile: profile}\n  };\n});\n\nvar userAgent = \"Meteor\";\nif (Meteor.release) {\n  userAgent += \"/\" + Meteor.release;\n}\n\nconst getToken = function (query) {\n  var debug = false;\n  var serverTokenEndpoint = \"https://accounts.play.knowledge.io/token\";\n  var response;\n  try {\n    response = HTTP.post(\n      serverTokenEndpoint,\n      {\n        params: {\n          code: query.code,\n          client_id: 'knowledge-code',\n          client_secret: 'knowledge-code',\n          redirect_uri: 'https://store.local.knowledge.io/_oauth/knowledge',\n          grant_type: 'authorization_code'\n        }\n      }\n    );\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to get token from OIDC \" + serverTokenEndpoint + \": \" + err.message),\n      { response: err.response });\n  }\n  if (response.data.error) {\n    // if the http response was a json object with an error attribute\n    throw new Error(\"Failed to complete handshake with OIDC \" + serverTokenEndpoint + \": \" + response.data.error);\n  } else {\n    if (debug) console.log('XXX: getToken response: ', response.content);\n    return response;\n  }\n};\nconst getUserInfo = function (accessToken) {\n  var debug = false;\n  var serverUserinfoEndpoint = \"https://accounts.play.knowledge.io/me\";\n  var response;\n  try {\n    response = HTTP.get(\n      serverUserinfoEndpoint,\n      {\n        headers: {\n          \"User-Agent\": userAgent,\n          \"Authorization\": \"Bearer \" + accessToken\n        }\n      }\n    );\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to fetch userinfo from OIDC \" + serverUserinfoEndpoint + \": \" + err.message),\n                   {response: err.response});\n  }\n  if (debug) console.log('XXX: getUserInfo response: ', response.content);\n  return response.data;\n};\n\nconst ifNull = function (val, def) {\n  return val || def;\n};\n\n\nKnowledge.retrieveCredential = function (credentialToken, credentialSecret) {\n  return Oauth.retrieveCredential(credentialToken, credentialSecret);\n};\n\n// override this method to set the root redirect URL\n// useful for multi-tenant environments\nKnowledge.rootUrl = function () { /* noop */ };\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/knowledgeio_accounts-knowledge/knowledge.js                                                            //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nAccounts.oauth.registerService('knowledge');\n\nif (Meteor.isClient) {\n  Meteor.loginWithKnowledge = function (options, callback) {\n    // support a callback without options\n    if (!callback && typeof options === \"function\") {\n      callback = options;\n      options = null;\n    }\n    var credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n\n    Knowledge.requestCredential(options, credentialRequestCompleteCallback);\n  };\n} else {\n  Accounts.addAutopublishFields({\n    forLoggedInUser: ['services.knowledge'],\n    forOtherUsers: [\n      'services.knowledge.username',\n      'services.knowledge.full_name',\n      'services.knowledge.profile_picture'\n    ]\n  });\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"knowledgeio:accounts-knowledge\", {\n  getConfigProvider: getConfigProvider,\n  Knowledge: Knowledge\n});\n\n})();\n","servePath":"/packages/knowledgeio_accounts-knowledge.js"}]