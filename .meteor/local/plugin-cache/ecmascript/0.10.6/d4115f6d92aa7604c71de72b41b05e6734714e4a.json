{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"server/api/core/rightJoin.js","filename":"server/api/core/rightJoin.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"server/api/core/rightJoin.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"server/api/core/rightJoin.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/api/core/rightJoin.js"}},"code":"/**\n * @summary Returns an disjoint object as right join. For a visualization, see:\n *          http://www.codeproject.com/KB/database/Visual_SQL_Joins/Visual_SQL_JOINS_orig.jpg\n *          Additionally, the join is done recursively on properties of\n *          nested objects as well. Nested arrays are handled like\n *          primitive values.\n * @author Tom De CaluwÃ©\n * @memberof Core\n * @param {Object} leftSet An object that can contain nested sub-objects\n * @param {Object} rightSet An object that can contain nested sub-objects\n * @returns {Object} The disjoint object that does only contain properties\n *                   from the rightSet. But only those, that were not present\n *                   in the leftSet.\n */\nconst doRightJoinNoIntersection = (leftSet, rightSet) => {\n  if (rightSet === null) return null;\n  let rightJoin;\n\n  if (Array.isArray(rightSet)) {\n    rightJoin = [];\n  } else {\n    rightJoin = {};\n  }\n\n  const findRightOnlyProperties = () => Object.keys(rightSet).filter(key => {\n    if (typeof rightSet[key] === \"object\" && !Array.isArray(rightSet[key])) {\n      // Nested objects are always considered\n      return true;\n    } // Array or primitive value\n\n\n    return !{}.hasOwnProperty.call(leftSet, key);\n  });\n\n  for (const key of findRightOnlyProperties()) {\n    if (typeof rightSet[key] === \"object\") {\n      // subobject or array\n      if ({}.hasOwnProperty.call(leftSet, key) && (typeof leftSet[key] !== \"object\" || Array.isArray(leftSet[key]) !== Array.isArray(rightSet[key]))) {\n        // This is not expected!\n        throw new Error(`${\"Left object and right object's internal structure must be congruent! Offending key: \"}${key}`);\n      }\n\n      const rightSubJoin = doRightJoinNoIntersection({}.hasOwnProperty.call(leftSet, key) ? leftSet[key] : {}, rightSet[key]);\n      const obj = {};\n\n      if (rightSubJoin === null) {\n        obj[key] = null;\n      } else if (Object.keys(rightSubJoin).length !== 0 || Array.isArray(rightSubJoin)) {\n        // object or (empty) array\n        obj[key] = rightSubJoin;\n      }\n\n      rightJoin = Object.assign(rightJoin, obj);\n    } else if (Array.isArray(rightSet)) {\n      // primitive value (or array)\n      rightJoin.push(rightSet[key]);\n    } else {\n      const obj = {};\n      obj[key] = rightSet[key];\n      rightJoin = Object.assign(rightJoin, obj);\n    }\n  }\n\n  return rightJoin;\n};\n\nmodule.exportDefault(doRightJoinNoIntersection);","map":{"version":3,"sources":["server/api/core/rightJoin.js"],"names":["doRightJoinNoIntersection","leftSet","rightSet","rightJoin","Array","isArray","findRightOnlyProperties","Object","keys","filter","key","hasOwnProperty","call","Error","rightSubJoin","obj","length","assign","push","module","exportDefault"],"mappings":"AAAA;;;;;;;;;;;;;;AAcA,MAAMA,4BAA4B,CAACC,OAAD,EAAUC,QAAV,KAAuB;AACvD,MAAIA,aAAa,IAAjB,EAAuB,OAAO,IAAP;AAEvB,MAAIC,SAAJ;;AACA,MAAIC,MAAMC,OAAN,CAAcH,QAAd,CAAJ,EAA6B;AAC3BC,gBAAY,EAAZ;AACD,GAFD,MAEO;AACLA,gBAAY,EAAZ;AACD;;AACD,QAAMG,0BAA0B,MAAMC,OAAOC,IAAP,CAAYN,QAAZ,EAAsBO,MAAtB,CAA8BC,GAAD,IAAS;AAC1E,QAAI,OAAQR,SAASQ,GAAT,CAAR,KAA2B,QAA3B,IACA,CAACN,MAAMC,OAAN,CAAcH,SAASQ,GAAT,CAAd,CADL,EACmC;AACjC;AACA,aAAO,IAAP;AACD,KALyE,CAM1E;;;AACA,WAAO,CAAC,GAAGC,cAAH,CAAkBC,IAAlB,CAAuBX,OAAvB,EAAgCS,GAAhC,CAAR;AACD,GARqC,CAAtC;;AAUA,OAAK,MAAMA,GAAX,IAAkBJ,yBAAlB,EAA6C;AAC3C,QAAI,OAAQJ,SAASQ,GAAT,CAAR,KAA2B,QAA/B,EAAyC;AACvC;AACA,UAAI,GAAGC,cAAH,CAAkBC,IAAlB,CAAuBX,OAAvB,EAAgCS,GAAhC,MAAyC,OAAQT,QAAQS,GAAR,CAAR,KAA0B,QAA1B,IACxCN,MAAMC,OAAN,CAAcJ,QAAQS,GAAR,CAAd,MAAgCN,MAAMC,OAAN,CAAcH,SAASQ,GAAT,CAAd,CADjC,CAAJ,EACoE;AAClE;AACA,cAAM,IAAIG,KAAJ,CAAW,GAAE,sFAAuF,GAAEH,GAAI,EAA1G,CAAN;AACD;;AACD,YAAMI,eAAed,0BACnB,GAAGW,cAAH,CAAkBC,IAAlB,CAAuBX,OAAvB,EAAgCS,GAAhC,IAAuCT,QAAQS,GAAR,CAAvC,GAAsD,EADnC,EAEnBR,SAASQ,GAAT,CAFmB,CAArB;AAKA,YAAMK,MAAM,EAAZ;;AACA,UAAID,iBAAiB,IAArB,EAA2B;AACzBC,YAAIL,GAAJ,IAAW,IAAX;AACD,OAFD,MAEO,IAAIH,OAAOC,IAAP,CAAYM,YAAZ,EAA0BE,MAA1B,KAAqC,CAArC,IACAZ,MAAMC,OAAN,CAAcS,YAAd,CADJ,EACiC;AACtC;AACAC,YAAIL,GAAJ,IAAWI,YAAX;AACD;;AACDX,kBAAYI,OAAOU,MAAP,CAAcd,SAAd,EAAyBY,GAAzB,CAAZ;AACD,KArBD,MAqBO,IAAIX,MAAMC,OAAN,CAAcH,QAAd,CAAJ,EAA6B;AAAE;AACpCC,gBAAUe,IAAV,CAAehB,SAASQ,GAAT,CAAf;AACD,KAFM,MAEA;AACL,YAAMK,MAAM,EAAZ;AACAA,UAAIL,GAAJ,IAAWR,SAASQ,GAAT,CAAX;AACAP,kBAAYI,OAAOU,MAAP,CAAcd,SAAd,EAAyBY,GAAzB,CAAZ;AACD;AACF;;AACD,SAAOZ,SAAP;AACD,CAlDD;;AAdAgB,OAAOC,aAAP,CAkEepB,yBAlEf","sourcesContent":["/**\n * @summary Returns an disjoint object as right join. For a visualization, see:\n *          http://www.codeproject.com/KB/database/Visual_SQL_Joins/Visual_SQL_JOINS_orig.jpg\n *          Additionally, the join is done recursively on properties of\n *          nested objects as well. Nested arrays are handled like\n *          primitive values.\n * @author Tom De CaluwÃ©\n * @memberof Core\n * @param {Object} leftSet An object that can contain nested sub-objects\n * @param {Object} rightSet An object that can contain nested sub-objects\n * @returns {Object} The disjoint object that does only contain properties\n *                   from the rightSet. But only those, that were not present\n *                   in the leftSet.\n */\nconst doRightJoinNoIntersection = (leftSet, rightSet) => {\n  if (rightSet === null) return null;\n\n  let rightJoin;\n  if (Array.isArray(rightSet)) {\n    rightJoin = [];\n  } else {\n    rightJoin = {};\n  }\n  const findRightOnlyProperties = () => Object.keys(rightSet).filter((key) => {\n    if (typeof (rightSet[key]) === \"object\" &&\n        !Array.isArray(rightSet[key])) {\n      // Nested objects are always considered\n      return true;\n    }\n    // Array or primitive value\n    return !{}.hasOwnProperty.call(leftSet, key);\n  });\n\n  for (const key of findRightOnlyProperties()) {\n    if (typeof (rightSet[key]) === \"object\") {\n      // subobject or array\n      if ({}.hasOwnProperty.call(leftSet, key) && (typeof (leftSet[key]) !== \"object\" ||\n           Array.isArray(leftSet[key]) !== Array.isArray(rightSet[key]))) {\n        // This is not expected!\n        throw new Error(`${\"Left object and right object's internal structure must be congruent! Offending key: \"}${key}`);\n      }\n      const rightSubJoin = doRightJoinNoIntersection(\n        {}.hasOwnProperty.call(leftSet, key) ? leftSet[key] : {},\n        rightSet[key]\n      );\n\n      const obj = {};\n      if (rightSubJoin === null) {\n        obj[key] = null;\n      } else if (Object.keys(rightSubJoin).length !== 0 ||\n                 Array.isArray(rightSubJoin)) {\n        // object or (empty) array\n        obj[key] = rightSubJoin;\n      }\n      rightJoin = Object.assign(rightJoin, obj);\n    } else if (Array.isArray(rightSet)) { // primitive value (or array)\n      rightJoin.push(rightSet[key]);\n    } else {\n      const obj = {};\n      obj[key] = rightSet[key];\n      rightJoin = Object.assign(rightJoin, obj);\n    }\n  }\n  return rightJoin;\n};\n\nexport default doRightJoinNoIntersection;\n"]},"sourceType":"script","hash":"d4115f6d92aa7604c71de72b41b05e6734714e4a"}
