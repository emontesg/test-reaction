{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"server/api/core/loadSettings.js","filename":"server/api/core/loadSettings.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"server/api/core/loadSettings.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"server/api/core/loadSettings.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/api/core/loadSettings.js"}},"code":"module.export({\n  loadSettings: () => loadSettings\n});\n\nlet _isArray;\n\nmodule.watch(require(\"lodash/isArray\"), {\n  default(v) {\n    _isArray = v;\n  }\n\n}, 0);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet ServiceConfiguration;\nmodule.watch(require(\"meteor/service-configuration\"), {\n  ServiceConfiguration(v) {\n    ServiceConfiguration = v;\n  }\n\n}, 2);\nlet Packages;\nmodule.watch(require(\"../../../lib/collections\"), {\n  Packages(v) {\n    Packages = v;\n  }\n\n}, 3);\nlet Logger;\nmodule.watch(require(\"./..\"), {\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 4);\nlet EJSON;\nmodule.watch(require(\"meteor/ejson\"), {\n  EJSON(v) {\n    EJSON = v;\n  }\n\n}, 5);\n\nfunction loadSettings(json) {\n  check(json, String);\n  let exists;\n  let service;\n  let services;\n  let settings;\n  const validatedJson = EJSON.parse(json); // validate json and error out if not an array\n\n  if (!_isArray(validatedJson[0])) {\n    Logger.warn(\"Load Settings is not an array. Failed to load settings.\");\n    return false;\n  }\n\n  let result; // loop settings and upsert packages.\n\n  for (const pkg of validatedJson) {\n    for (const item of pkg) {\n      exists = Packages.findOne({\n        name: item.name\n      }); //\n      // TODO migrate functionality to Reaction.Importer\n      // Reaction.Importer.package(item, shopId);\n      //\n      // insert into the Packages collection\n\n      if (exists) {\n        result = Packages.upsert({\n          name: item.name\n        }, {\n          $set: {\n            settings: item.settings,\n            enabled: item.enabled\n          }\n        }, {\n          multi: true,\n          upsert: true,\n          validate: false\n        });\n      } // sets the private settings of various\n      // accounts authentication services\n\n\n      if (item.settings.services) {\n        for (services of item.settings.services) {\n          for (service in services) {\n            // actual settings for the service\n            if ({}.hasOwnProperty.call(services, service)) {\n              settings = services[service];\n              ServiceConfiguration.configurations.upsert({\n                service\n              }, {\n                $set: settings\n              });\n              Logger.debug(`service configuration loaded: ${item.name} | ${service}`);\n            }\n          }\n        }\n      }\n\n      Logger.debug(`loaded local package data: ${item.name}`);\n    }\n  }\n\n  return result;\n}","map":{"version":3,"sources":["server/api/core/loadSettings.js"],"names":["module","export","loadSettings","_isArray","watch","require","default","v","check","ServiceConfiguration","Packages","Logger","EJSON","json","String","exists","service","services","settings","validatedJson","parse","warn","result","pkg","item","findOne","name","upsert","$set","enabled","multi","validate","hasOwnProperty","call","configurations","debug"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport { check } from \"meteor/check\";\nimport { ServiceConfiguration } from \"meteor/service-configuration\";\nimport { Packages } from \"/lib/collections\";\nimport { Logger } from \"/server/api\";\nimport { EJSON } from \"meteor/ejson\";\n\n/**\n * @method loadSettings\n * @summary\n * This basically allows you to \"hardcode\" all the settings. You can change them\n * via admin etc for the session, but when the server restarts they'll\n * be restored back to the supplied json\n *\n * All settings are private unless added to `settings.public`\n *\n * Meteor account services can be added in `settings.services`\n * @memberof Core\n * @param {Object} json - json object to insert\n * @return {Boolean} boolean -  returns true on insert\n * @example\n *  ReactionRegistry.loadSettings Assets.getText(\"settings/reaction.json\")\n */\nexport function loadSettings(json) {\n  check(json, String);\n  let exists;\n  let service;\n  let services;\n  let settings;\n  const validatedJson = EJSON.parse(json);\n\n  // validate json and error out if not an array\n  if (!_.isArray(validatedJson[0])) {\n    Logger.warn(\"Load Settings is not an array. Failed to load settings.\");\n    return false;\n  }\n\n  let result;\n  // loop settings and upsert packages.\n  for (const pkg of validatedJson) {\n    for (const item of pkg) {\n      exists = Packages.findOne({\n        name: item.name\n      });\n      //\n      // TODO migrate functionality to Reaction.Importer\n      // Reaction.Importer.package(item, shopId);\n      //\n      // insert into the Packages collection\n      if (exists) {\n        result = Packages.upsert({\n          name: item.name\n        }, {\n          $set: {\n            settings: item.settings,\n            enabled: item.enabled\n          }\n        }, {\n          multi: true,\n          upsert: true,\n          validate: false\n        });\n      }\n      // sets the private settings of various\n      // accounts authentication services\n      if (item.settings.services) {\n        for (services of item.settings.services) {\n          for (service in services) {\n            // actual settings for the service\n            if ({}.hasOwnProperty.call(services, service)) {\n              settings = services[service];\n              ServiceConfiguration.configurations.upsert({\n                service\n              }, {\n                $set: settings\n              });\n              Logger.debug(`service configuration loaded: ${item.name} | ${service}`);\n            }\n          }\n        }\n      }\n      Logger.debug(`loaded local package data: ${item.name}`);\n    }\n  }\n  return result;\n}\n"]},"sourceType":"script","hash":"4e36051a4cd8c61a152f665d94a13c418ffbff3f"}
