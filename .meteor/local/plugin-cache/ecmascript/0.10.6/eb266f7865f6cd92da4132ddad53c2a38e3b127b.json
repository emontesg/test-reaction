{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"server/publications/collections/accounts.js","filename":"server/publications/collections/accounts.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"server/publications/collections/accounts.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"server/publications/collections/accounts.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/publications/collections/accounts.js"}},"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet check, Match;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  },\n\n  Match(v) {\n    Match = v;\n  }\n\n}, 1);\nlet Roles;\nmodule.watch(require(\"meteor/alanning:roles\"), {\n  Roles(v) {\n    Roles = v;\n  }\n\n}, 2);\nlet Collections;\nmodule.watch(require(\"../../../lib/collections\"), {\n  \"*\"(v) {\n    Collections = v;\n  }\n\n}, 3);\nlet Reaction;\nmodule.watch(require(\"../../api\"), {\n  Reaction(v) {\n    Reaction = v;\n  }\n\n}, 4);\n\n/**\n * accounts\n */\nMeteor.publish(\"Accounts\", function (userId) {\n  check(userId, Match.OneOf(String, null)); // we could additionally make checks of useId defined, but this could lead to\n  // situation when user will may not have time to get an account\n\n  if (this.userId === null) {\n    return this.ready();\n  }\n\n  const shopId = Reaction.getShopId();\n\n  if (!shopId) {\n    return this.ready();\n  }\n\n  const nonAdminGroups = Collections.Groups.find({\n    name: {\n      $in: [\"guest\"]\n    },\n    shopId\n  }, {\n    fields: {\n      _id: 1\n    }\n  }).fetch().map(group => group._id); // global admin can get all accounts\n\n  if (Roles.userIsInRole(this.userId, [\"owner\"], Roles.GLOBAL_GROUP)) {\n    return Collections.Accounts.find({\n      groups: {\n        $nin: nonAdminGroups\n      }\n    }); // shop admin gets accounts for just this shop\n  } else if (Roles.userIsInRole(this.userId, [\"admin\", \"owner\", \"reaction-accounts\"], shopId)) {\n    return Collections.Accounts.find({\n      groups: {\n        $nin: nonAdminGroups\n      },\n      shopId\n    });\n  } // regular users should get just their account\n\n\n  return Collections.Accounts.find({\n    userId: this.userId\n  });\n});\n/**\n * Single account\n * @params {String} userId -  id of user to find\n */\n\nMeteor.publish(\"UserAccount\", function (userId) {\n  check(userId, Match.OneOf(String, null));\n  const shopId = Reaction.getShopId();\n\n  if (Roles.userIsInRole(this.userId, [\"admin\", \"owner\"], shopId)) {\n    return Collections.Accounts.find({\n      userId\n    });\n  }\n\n  return this.ready();\n});\n/**\n * userProfile\n * @deprecated since version 0.10.2\n * get any user name,social profile image\n * should be limited, secure information\n * users with permissions  [\"dashboard/orders\", \"owner\", \"admin\", \"dashboard/\n * customers\"] may view the profileUserId\"s profile data.\n *\n * @params {String} profileUserId -  view this users profile when permitted\n */\n\nMeteor.publish(\"UserProfile\", function (profileUserId) {\n  check(profileUserId, Match.OneOf(String, null));\n\n  if (this.userId === null) {\n    return this.ready();\n  }\n\n  const shopId = Reaction.getShopId();\n\n  if (!shopId) {\n    return this.ready();\n  }\n\n  const permissions = [\"dashboard/orders\", \"owner\", \"admin\", \"dashboard/customers\"]; // no need to normal user so see his password hash\n\n  const fields = {\n    \"emails\": 1,\n    \"name\": 1,\n    \"profile.lang\": 1,\n    \"profile.firstName\": 1,\n    \"profile.lastName\": 1,\n    \"profile.familyName\": 1,\n    \"profile.secondName\": 1,\n    \"profile.name\": 1,\n    \"services.twitter.profile_image_url_https\": 1,\n    \"services.facebook.id\": 1,\n    \"services.google.picture\": 1,\n    \"services.github.username\": 1,\n    \"services.instagram.profile_picture\": 1\n  }; // TODO: this part currently not working as expected.\n  // we could have three situation here:\n  // 1 - registered user log in.\n  // 2 - admin log in\n  // 3 - admin want to get user data\n  // I'm not sure about the 3rd case, but we do not cover 2nd case here, because\n  // we can see a situation when anonymous user still represented by\n  // `profileUserId`, but admin user already could be found by `this.userId`\n  // In that case what we should do here?\n\n  if (profileUserId !== this.userId && Roles.userIsInRole(this.userId, permissions, shopId || Roles.userIsInRole(this.userId, permissions, Roles.GLOBAL_GROUP))) {\n    return Meteor.users.find({\n      _id: profileUserId\n    }, {\n      fields\n    });\n  }\n\n  return Meteor.users.find({\n    _id: this.userId\n  }, {\n    fields\n  });\n});","map":{"version":3,"sources":["server/publications/collections/accounts.js"],"names":["Meteor","module","watch","require","v","check","Match","Roles","Collections","Reaction","publish","userId","OneOf","String","ready","shopId","getShopId","nonAdminGroups","Groups","find","name","$in","fields","_id","fetch","map","group","userIsInRole","GLOBAL_GROUP","Accounts","groups","$nin","profileUserId","permissions","users"],"mappings":"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","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { check, Match } from \"meteor/check\";\nimport { Roles } from \"meteor/alanning:roles\";\nimport * as Collections from \"/lib/collections\";\nimport { Reaction } from \"/server/api\";\n\n/**\n * accounts\n */\n\nMeteor.publish(\"Accounts\", function (userId) {\n  check(userId, Match.OneOf(String, null));\n  // we could additionally make checks of useId defined, but this could lead to\n  // situation when user will may not have time to get an account\n  if (this.userId === null) {\n    return this.ready();\n  }\n\n  const shopId = Reaction.getShopId();\n  if (!shopId) {\n    return this.ready();\n  }\n\n  const nonAdminGroups = Collections.Groups.find({\n    name: { $in: [\"guest\"] },\n    shopId\n  }, {\n    fields: { _id: 1 }\n  }).fetch().map((group) => group._id);\n\n  // global admin can get all accounts\n  if (Roles.userIsInRole(this.userId, [\"owner\"], Roles.GLOBAL_GROUP)) {\n    return Collections.Accounts.find({\n      groups: { $nin: nonAdminGroups }\n    });\n\n  // shop admin gets accounts for just this shop\n  } else if (Roles.userIsInRole(this.userId, [\"admin\", \"owner\", \"reaction-accounts\"], shopId)) {\n    return Collections.Accounts.find({\n      groups: { $nin: nonAdminGroups },\n      shopId\n    });\n  }\n\n  // regular users should get just their account\n  return Collections.Accounts.find({\n    userId: this.userId\n  });\n});\n\n/**\n * Single account\n * @params {String} userId -  id of user to find\n */\nMeteor.publish(\"UserAccount\", function (userId) {\n  check(userId, Match.OneOf(String, null));\n\n  const shopId = Reaction.getShopId();\n  if (Roles.userIsInRole(this.userId, [\"admin\", \"owner\"], shopId)) {\n    return Collections.Accounts.find({\n      userId\n    });\n  }\n  return this.ready();\n});\n\n/**\n * userProfile\n * @deprecated since version 0.10.2\n * get any user name,social profile image\n * should be limited, secure information\n * users with permissions  [\"dashboard/orders\", \"owner\", \"admin\", \"dashboard/\n * customers\"] may view the profileUserId\"s profile data.\n *\n * @params {String} profileUserId -  view this users profile when permitted\n */\nMeteor.publish(\"UserProfile\", function (profileUserId) {\n  check(profileUserId, Match.OneOf(String, null));\n  if (this.userId === null) {\n    return this.ready();\n  }\n  const shopId = Reaction.getShopId();\n  if (!shopId) {\n    return this.ready();\n  }\n  const permissions = [\"dashboard/orders\", \"owner\", \"admin\",\n    \"dashboard/customers\"];\n  // no need to normal user so see his password hash\n  const fields = {\n    \"emails\": 1,\n    \"name\": 1,\n    \"profile.lang\": 1,\n    \"profile.firstName\": 1,\n    \"profile.lastName\": 1,\n    \"profile.familyName\": 1,\n    \"profile.secondName\": 1,\n    \"profile.name\": 1,\n    \"services.twitter.profile_image_url_https\": 1,\n    \"services.facebook.id\": 1,\n    \"services.google.picture\": 1,\n    \"services.github.username\": 1,\n    \"services.instagram.profile_picture\": 1\n  };\n  // TODO: this part currently not working as expected.\n  // we could have three situation here:\n  // 1 - registered user log in.\n  // 2 - admin log in\n  // 3 - admin want to get user data\n  // I'm not sure about the 3rd case, but we do not cover 2nd case here, because\n  // we can see a situation when anonymous user still represented by\n  // `profileUserId`, but admin user already could be found by `this.userId`\n  // In that case what we should do here?\n  if (profileUserId !== this.userId && Roles.userIsInRole(\n    this.userId,\n    permissions, shopId ||\n    Roles.userIsInRole(this.userId, permissions, Roles.GLOBAL_GROUP)\n  )) {\n    return Meteor.users.find({\n      _id: profileUserId\n    }, {\n      fields\n    });\n  }\n\n  return Meteor.users.find({\n    _id: this.userId\n  }, {\n    fields\n  });\n});\n"]},"sourceType":"script","hash":"eb266f7865f6cd92da4132ddad53c2a38e3b127b"}
