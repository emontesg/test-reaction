{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/core/accounts/client/components/groupsTableCell.js","filename":"imports/plugins/core/accounts/client/components/groupsTableCell.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/core/accounts/client/components/groupsTableCell.js","plugins":["dynamicImport","classProperties","jsx","jsx","flow","asyncGenerators","objectRestSpread","objectRestSpread","flow","asyncGenerators"]},"generatorOpts":{"filename":"imports/plugins/core/accounts/client/components/groupsTableCell.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/core/accounts/client/components/groupsTableCell.js"}},"code":"var _startCase;\n\nmodule.watch(require(\"lodash/startCase\"), {\n  \"default\": function (v) {\n    _startCase = v;\n  }\n}, 0);\n\nvar _get;\n\nmodule.watch(require(\"lodash/get\"), {\n  \"default\": function (v) {\n    _get = v;\n  }\n}, 1);\nvar Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 2);\nvar React;\nmodule.watch(require(\"react\"), {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 3);\nvar PropTypes;\nmodule.watch(require(\"prop-types\"), {\n  \"default\": function (v) {\n    PropTypes = v;\n  }\n}, 4);\nvar Components, registerComponent, withMoment;\nmodule.watch(require(\"../../../components/lib\"), {\n  Components: function (v) {\n    Components = v;\n  },\n  registerComponent: function (v) {\n    registerComponent = v;\n  },\n  withMoment: function (v) {\n    withMoment = v;\n  }\n}, 5);\nvar Reaction;\nmodule.watch(require(\"../../../../../../client/api\"), {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 6);\nvar getUserAvatar;\nmodule.watch(require(\"../helpers/helpers\"), {\n  getUserAvatar: function (v) {\n    getUserAvatar = v;\n  }\n}, 7);\n\nvar GroupsTableCell = function (props) {\n  var account = props.account,\n      columnName = props.columnName,\n      group = props.group,\n      adminGroups = props.adminGroups,\n      handleRemoveUserFromGroup = props.handleRemoveUserFromGroup,\n      handleUserGroupChange = props.handleUserGroupChange,\n      moment = props.moment;\n\n  var email = _get(account, \"emails[0].address\");\n\n  var groups = adminGroups;\n  var userAvatar = getUserAvatar(account);\n  var createdAt = moment && moment(account.createdAt).format(\"MMM Do\") || account.createdAt.toLocaleString();\n\n  if (columnName === \"name\") {\n    // use first part of email, if account has no name\n    var name = account.name || email.split(\"@\")[0];\n    return React.createElement(\"div\", {\n      className: \"table-cell body-first\"\n    }, userAvatar, React.createElement(\"span\", null, React.createElement(\"b\", null, name)));\n  }\n\n  if (columnName === \"email\") {\n    return React.createElement(\"div\", {\n      className: \"table-cell body\"\n    }, React.createElement(\"span\", null, email));\n  }\n\n  if (columnName === \"createdAt\") {\n    return React.createElement(\"div\", {\n      className: \"table-cell body created-at\"\n    }, React.createElement(\"span\", null, createdAt));\n  }\n\n  if (columnName === \"dropdown\") {\n    var groupName = React.createElement(\"span\", {\n      className: \"group-dropdown\"\n    }, _startCase(groups[0].name));\n    var ownerGroup = groups.find(function (grp) {\n      return grp.slug === \"owner\";\n    }) || {};\n    var hasOwnerAccess = Reaction.hasPermission(\"owner\", Meteor.userId(), Reaction.getShopId());\n\n    if (groups.length === 1) {\n      return groupName;\n    }\n\n    if (group.slug === \"owner\") {\n      return groupName;\n    }\n\n    var onMethodDone = props.onMethodDone,\n        onMethodLoad = props.onMethodLoad;\n\n    var dropDownButton = function (opt) {\n      return (// eslint-disable-line\n        React.createElement(\"div\", {\n          className: \"group-dropdown\"\n        }, React.createElement(Components.Button, {\n          bezelStyle: \"solid\",\n          label: group.name && _startCase(group.name)\n        }, \"\\xA0\", opt && opt.length > 1 && // add icon only if there's more than the current group\n        React.createElement(\"i\", {\n          className: \"fa fa-chevron-down\"\n        })))\n      );\n    }; // Permission check. Remove owner option, if user is not current owner.\n    // Also remove groups user does not have roles to manage. This is also checked on the server\n\n\n    var dropOptions = groups.filter(function (grp) {\n      return !(grp.slug === \"owner\" && !hasOwnerAccess);\n    }).filter(function (grp) {\n      return Reaction.canInviteToGroup({\n        group: grp\n      });\n    }) || [];\n\n    if (dropOptions.length < 2) {\n      return dropDownButton();\n    } // do not use dropdown if only one option\n\n\n    return React.createElement(\"div\", {\n      className: \"group-dropdown\"\n    }, React.createElement(Components.DropDownMenu, {\n      buttonElement: dropDownButton(groups),\n      attachment: \"bottom right\",\n      targetAttachment: \"top right\",\n      onChange: handleUserGroupChange({\n        account: account,\n        ownerGrpId: ownerGroup._id,\n        onMethodDone: onMethodDone,\n        onMethodLoad: onMethodLoad\n      })\n    }, dropOptions.filter(function (grp) {\n      return grp._id !== group._id;\n    }).map(function (grp, index) {\n      return React.createElement(Components.MenuItem, {\n        key: index,\n        label: _startCase(grp.name),\n        selectLabel: _startCase(grp.name),\n        value: grp._id\n      });\n    })));\n  }\n\n  if (columnName === \"button\") {\n    return React.createElement(Components.GroupsTableButton, {\n      account: account,\n      group: group,\n      handleRemoveUserFromGroup: handleRemoveUserFromGroup\n    });\n  }\n\n  return null;\n};\n\nGroupsTableCell.propTypes = {\n  account: PropTypes.object,\n  adminGroups: PropTypes.array,\n  // all admin groups\n  columnName: PropTypes.string,\n  group: PropTypes.object,\n  // current group in interation\n  handleRemoveUserFromGroup: PropTypes.func,\n  handleUserGroupChange: PropTypes.func,\n  moment: PropTypes.func,\n  onMethodDone: PropTypes.func,\n  onMethodLoad: PropTypes.func\n};\nregisterComponent(\"GroupsTableCell\", GroupsTableCell, withMoment);\nmodule.exportDefault(withMoment(GroupsTableCell));","map":{"version":3,"sources":["imports/plugins/core/accounts/client/components/groupsTableCell.js"],"names":["_startCase","module","watch","require","v","_get","Meteor","React","PropTypes","Components","registerComponent","withMoment","Reaction","getUserAvatar","GroupsTableCell","props","account","columnName","group","adminGroups","handleRemoveUserFromGroup","handleUserGroupChange","moment","email","groups","userAvatar","createdAt","format","toLocaleString","name","split","groupName","ownerGroup","find","grp","slug","hasOwnerAccess","hasPermission","userId","getShopId","length","onMethodDone","onMethodLoad","dropDownButton","opt","dropOptions","filter","canInviteToGroup","ownerGrpId","_id","map","index","propTypes","object","array","string","func","exportDefault"],"mappings":"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","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport React from \"react\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport { Components, registerComponent, withMoment } from \"@reactioncommerce/reaction-components\";\nimport { Reaction } from \"/client/api\";\nimport { getUserAvatar } from \"/imports/plugins/core/accounts/client/helpers/helpers\";\n\nconst GroupsTableCell = (props) => {\n  const {\n    account,\n    columnName,\n    group,\n    adminGroups,\n    handleRemoveUserFromGroup,\n    handleUserGroupChange,\n    moment\n  } = props;\n\n  const email = _.get(account, \"emails[0].address\");\n  const groups = adminGroups;\n  const userAvatar = getUserAvatar(account);\n  const createdAt = (moment && moment(account.createdAt).format(\"MMM Do\")) || account.createdAt.toLocaleString();\n\n  if (columnName === \"name\") {\n    // use first part of email, if account has no name\n    const name = account.name || email.split(\"@\")[0];\n    return (\n      <div className=\"table-cell body-first\">\n        {userAvatar}\n        <span><b>{name}</b></span>\n      </div>\n    );\n  }\n\n  if (columnName === \"email\") {\n    return (\n      <div className=\"table-cell body\">\n        <span>{email}</span>\n      </div>\n    );\n  }\n\n  if (columnName === \"createdAt\") {\n    return (\n      <div className=\"table-cell body created-at\">\n        <span>\n          {createdAt}\n        </span>\n      </div>\n    );\n  }\n\n  if (columnName === \"dropdown\") {\n    const groupName = <span className=\"group-dropdown\">{_.startCase(groups[0].name)}</span>;\n    const ownerGroup = groups.find((grp) => grp.slug === \"owner\") || {};\n    const hasOwnerAccess = Reaction.hasPermission(\"owner\", Meteor.userId(), Reaction.getShopId());\n\n    if (groups.length === 1) {\n      return groupName;\n    }\n\n    if (group.slug === \"owner\") {\n      return groupName;\n    }\n\n    const { onMethodDone, onMethodLoad } = props;\n    const dropDownButton = (opt) => ( // eslint-disable-line\n      <div className=\"group-dropdown\">\n        <Components.Button bezelStyle=\"solid\" label={group.name && _.startCase(group.name)}>\n          &nbsp;\n          {opt && opt.length > 1 && // add icon only if there's more than the current group\n            <i className=\"fa fa-chevron-down\" />\n          }\n        </Components.Button>\n      </div>\n    );\n\n    // Permission check. Remove owner option, if user is not current owner.\n    // Also remove groups user does not have roles to manage. This is also checked on the server\n    const dropOptions = groups\n      .filter((grp) => !((grp.slug === \"owner\" && !hasOwnerAccess)))\n      .filter((grp) => Reaction.canInviteToGroup({ group: grp })) || [];\n\n    if (dropOptions.length < 2) { return dropDownButton(); } // do not use dropdown if only one option\n\n    return (\n      <div className=\"group-dropdown\">\n        <Components.DropDownMenu\n          buttonElement={dropDownButton(groups)}\n          attachment=\"bottom right\"\n          targetAttachment=\"top right\"\n          onChange={handleUserGroupChange({ account, ownerGrpId: ownerGroup._id, onMethodDone, onMethodLoad })}\n        >\n          {dropOptions\n            .filter((grp) => grp._id !== group._id)\n            .map((grp, index) => (\n              <Components.MenuItem\n                key={index}\n                label={_.startCase(grp.name)}\n                selectLabel={_.startCase(grp.name)}\n                value={grp._id}\n              />\n            ))}\n        </Components.DropDownMenu>\n      </div>\n    );\n  }\n\n  if (columnName === \"button\") {\n    return <Components.GroupsTableButton {...{ account, group, handleRemoveUserFromGroup }} />;\n  }\n\n  return null;\n};\n\nGroupsTableCell.propTypes = {\n  account: PropTypes.object,\n  adminGroups: PropTypes.array, // all admin groups\n  columnName: PropTypes.string,\n  group: PropTypes.object, // current group in interation\n  handleRemoveUserFromGroup: PropTypes.func,\n  handleUserGroupChange: PropTypes.func,\n  moment: PropTypes.func,\n  onMethodDone: PropTypes.func,\n  onMethodLoad: PropTypes.func\n};\n\nregisterComponent(\"GroupsTableCell\", GroupsTableCell, withMoment);\n\nexport default withMoment(GroupsTableCell);\n"]},"sourceType":"script","hash":"45b69ade03fe0ca315463f47c768d625032e593a"}
