{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/included/notifications/server/hooks/notification.js","filename":"imports/plugins/included/notifications/server/hooks/notification.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/included/notifications/server/hooks/notification.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/included/notifications/server/hooks/notification.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/included/notifications/server/hooks/notification.js"}},"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Logger, MethodHooks, Reaction;\nmodule.watch(require(\"../../../../../../server/api\"), {\n  Logger(v) {\n    Logger = v;\n  },\n\n  MethodHooks(v) {\n    MethodHooks = v;\n  },\n\n  Reaction(v) {\n    Reaction = v;\n  }\n\n}, 1);\n\nconst getAdminUserId = () => {\n  // TODO validate with multiple show owners\n  // switch to using getShopId for role lookup\n  const admin = Meteor.users.findOne({\n    \"roles.__global_roles__\": \"owner\"\n  });\n\n  if (admin && typeof admin === \"object\") {\n    return admin._id;\n  }\n\n  return false;\n};\n\nconst sendNotificationToAdmin = adminId => {\n  const type = \"forAdmin\";\n  const prefix = Reaction.getShopPrefix();\n  const url = `${prefix}/dashboard/orders`;\n  const sms = true; // Sending notification to admin\n\n  Logger.debug(\"sending notification to admin\");\n  return Meteor.call(\"notification/send\", adminId, type, url, sms);\n};\n\nMethodHooks.after(\"cart/copyCartToOrder\", options => {\n  const userId = Meteor.userId();\n  const type = \"newOrder\";\n  const prefix = Reaction.getShopPrefix();\n  const url = `${prefix}/notifications`;\n  const sms = true; // Send notification to user who made the order\n\n  Logger.debug(`sending notification to user: ${userId}`);\n  Meteor.call(\"notification/send\", userId, type, url, sms); // Sending notification to admin\n\n  const adminId = getAdminUserId();\n\n  if (adminId) {\n    return sendNotificationToAdmin(adminId);\n  }\n\n  return options.result;\n});","map":{"version":3,"sources":["imports/plugins/included/notifications/server/hooks/notification.js"],"names":["Meteor","module","watch","require","v","Logger","MethodHooks","Reaction","getAdminUserId","admin","users","findOne","_id","sendNotificationToAdmin","adminId","type","prefix","getShopPrefix","url","sms","debug","call","after","options","userId","result"],"mappings":"AAAA,IAAIA,MAAJ;AAAWC,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACH,SAAOI,CAAP,EAAS;AAACJ,aAAOI,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIC,MAAJ,EAAWC,WAAX,EAAuBC,QAAvB;AAAgCN,OAAOC,KAAP,CAAaC,QAAQ,8BAAR,CAAb,EAAqD;AAACE,SAAOD,CAAP,EAAS;AAACC,aAAOD,CAAP;AAAS,GAApB;;AAAqBE,cAAYF,CAAZ,EAAc;AAACE,kBAAYF,CAAZ;AAAc,GAAlD;;AAAmDG,WAASH,CAAT,EAAW;AAACG,eAASH,CAAT;AAAW;;AAA1E,CAArD,EAAiI,CAAjI;;AAG1G,MAAMI,iBAAiB,MAAM;AAC3B;AACA;AACA,QAAMC,QAAQT,OAAOU,KAAP,CAAaC,OAAb,CAAqB;AACjC,8BAA0B;AADO,GAArB,CAAd;;AAGA,MAAIF,SAAS,OAAOA,KAAP,KAAiB,QAA9B,EAAwC;AACtC,WAAOA,MAAMG,GAAb;AACD;;AACD,SAAO,KAAP;AACD,CAVD;;AAYA,MAAMC,0BAA2BC,OAAD,IAAa;AAC3C,QAAMC,OAAO,UAAb;AACA,QAAMC,SAAST,SAASU,aAAT,EAAf;AACA,QAAMC,MAAO,GAAEF,MAAO,mBAAtB;AACA,QAAMG,MAAM,IAAZ,CAJ2C,CAK3C;;AACAd,SAAOe,KAAP,CAAa,+BAAb;AACA,SAAOpB,OAAOqB,IAAP,CAAY,mBAAZ,EAAiCP,OAAjC,EAA0CC,IAA1C,EAAgDG,GAAhD,EAAqDC,GAArD,CAAP;AACD,CARD;;AAUAb,YAAYgB,KAAZ,CAAkB,sBAAlB,EAA2CC,OAAD,IAAa;AACrD,QAAMC,SAASxB,OAAOwB,MAAP,EAAf;AACA,QAAMT,OAAO,UAAb;AACA,QAAMC,SAAST,SAASU,aAAT,EAAf;AACA,QAAMC,MAAO,GAAEF,MAAO,gBAAtB;AACA,QAAMG,MAAM,IAAZ,CALqD,CAOrD;;AACAd,SAAOe,KAAP,CAAc,iCAAgCI,MAAO,EAArD;AACAxB,SAAOqB,IAAP,CAAY,mBAAZ,EAAiCG,MAAjC,EAAyCT,IAAzC,EAA+CG,GAA/C,EAAoDC,GAApD,EATqD,CAWrD;;AACA,QAAML,UAAUN,gBAAhB;;AACA,MAAIM,OAAJ,EAAa;AACX,WAAOD,wBAAwBC,OAAxB,CAAP;AACD;;AACD,SAAOS,QAAQE,MAAf;AACD,CAjBD","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Logger, MethodHooks, Reaction } from \"/server/api\";\n\nconst getAdminUserId = () => {\n  // TODO validate with multiple show owners\n  // switch to using getShopId for role lookup\n  const admin = Meteor.users.findOne({\n    \"roles.__global_roles__\": \"owner\"\n  });\n  if (admin && typeof admin === \"object\") {\n    return admin._id;\n  }\n  return false;\n};\n\nconst sendNotificationToAdmin = (adminId) => {\n  const type = \"forAdmin\";\n  const prefix = Reaction.getShopPrefix();\n  const url = `${prefix}/dashboard/orders`;\n  const sms = true;\n  // Sending notification to admin\n  Logger.debug(\"sending notification to admin\");\n  return Meteor.call(\"notification/send\", adminId, type, url, sms);\n};\n\nMethodHooks.after(\"cart/copyCartToOrder\", (options) => {\n  const userId = Meteor.userId();\n  const type = \"newOrder\";\n  const prefix = Reaction.getShopPrefix();\n  const url = `${prefix}/notifications`;\n  const sms = true;\n\n  // Send notification to user who made the order\n  Logger.debug(`sending notification to user: ${userId}`);\n  Meteor.call(\"notification/send\", userId, type, url, sms);\n\n  // Sending notification to admin\n  const adminId = getAdminUserId();\n  if (adminId) {\n    return sendNotificationToAdmin(adminId);\n  }\n  return options.result;\n});\n"]},"sourceType":"script","hash":"a7dfb26ec65145223cda75bee384b35617c6df36"}
