{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/included/payments-braintree/client/checkout/braintree.js","filename":"imports/plugins/included/payments-braintree/client/checkout/braintree.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/included/payments-braintree/client/checkout/braintree.js","plugins":["dynamicImport","classProperties","jsx","jsx","flow","asyncGenerators","objectRestSpread","objectRestSpread","flow","asyncGenerators"]},"generatorOpts":{"filename":"imports/plugins/included/payments-braintree/client/checkout/braintree.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/included/payments-braintree/client/checkout/braintree.js"}},"code":"var Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Template;\nmodule.watch(require(\"meteor/templating\"), {\n  Template: function (v) {\n    Template = v;\n  }\n}, 1);\nvar AutoForm;\nmodule.watch(require(\"meteor/aldeed:autoform\"), {\n  AutoForm: function (v) {\n    AutoForm = v;\n  }\n}, 2);\nvar $;\nmodule.watch(require(\"meteor/jquery\"), {\n  $: function (v) {\n    $ = v;\n  }\n}, 3);\nvar getCardType;\nmodule.watch(require(\"../../../../../../client/modules/core/helpers/globals\"), {\n  getCardType: function (v) {\n    getCardType = v;\n  }\n}, 4);\nvar Cart, Shops, Packages;\nmodule.watch(require(\"../../../../../../lib/collections\"), {\n  Cart: function (v) {\n    Cart = v;\n  },\n  Shops: function (v) {\n    Shops = v;\n  },\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 5);\nvar Braintree;\nmodule.watch(require(\"../api/braintree\"), {\n  Braintree: function (v) {\n    Braintree = v;\n  }\n}, 6);\nvar Reaction;\nmodule.watch(require(\"../../../../../../client/api\"), {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 7);\nvar BraintreePayment;\nmodule.watch(require(\"../../lib/collections/schemas\"), {\n  BraintreePayment: function (v) {\n    BraintreePayment = v;\n  }\n}, 8);\nmodule.watch(require(\"./braintree.html\"));\nTemplate.braintreePaymentForm.helpers({\n  BraintreePayment: function () {\n    return BraintreePayment;\n  }\n});\n\nfunction uiEnd(template, buttonText) {\n  template.$(\":input\").removeAttr(\"disabled\");\n  template.$(\"#btn-complete-order\").text(buttonText);\n  return template.$(\"#btn-processing\").addClass(\"hidden\");\n}\n\nfunction paymentAlert(errorMessage) {\n  return $(\".alert\").removeClass(\"hidden\").text(errorMessage);\n}\n\nfunction hidePaymentAlert() {\n  return $(\".alert\").addClass(\"hidden\").text(\"\");\n}\n\nfunction handleBraintreeSubmitError(error) {\n  var serverError = error !== null ? error.message : undefined;\n\n  if (serverError) {\n    return paymentAlert(\"Server Error \" + serverError);\n  } else if (error) {\n    return paymentAlert(\"Oops! Credit card is invalid. Please check your information and try again.\");\n  }\n}\n\nvar submitting = false;\n\nfunction submitToBrainTree(doc, template) {\n  submitting = true;\n  hidePaymentAlert();\n  var cardData = {\n    name: doc.payerName,\n    number: doc.cardNumber,\n    expirationMonth: doc.expireMonth,\n    expirationYear: doc.expireYear,\n    cvv2: doc.cvv,\n    type: getCardType(doc.cardNumber)\n  };\n  var cartTotal = Cart.findOne().getTotal();\n  var currencyCode = Shops.findOne().currency;\n  Braintree.authorize(cardData, {\n    total: cartTotal,\n    currency: currencyCode\n  }, function (error, results) {\n    var paymentMethod;\n    submitting = false;\n\n    if (error) {\n      handleBraintreeSubmitError(error);\n      uiEnd(template, \"Resubmit payment\");\n    } else if (results.saved === true) {\n      var tx = results && results.response && results.response.transaction;\n      var normalizedStatus = normalizeState(tx.status);\n      var normalizedMode = normalizeMode(tx.status);\n      Meteor.subscribe(\"Packages\", Reaction.getShopId());\n      var packageData = Packages.findOne({\n        name: \"reaction-braintree\",\n        shopId: Reaction.getShopId()\n      });\n      var storedCard = tx.creditCard.cardType.toUpperCase() + \" \" + tx.creditCard.last4;\n      paymentMethod = {\n        processor: \"Braintree\",\n        storedCard: storedCard,\n        paymentPackageId: packageData._id,\n        paymentSettingsKey: packageData.registry[0].settingsKey,\n        method: \"credit\",\n        transactionId: tx.id,\n        amount: parseFloat(tx.amount),\n        status: normalizedStatus,\n        mode: normalizedMode,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        transactions: []\n      };\n      paymentMethod.transactions.push(results.response);\n      Meteor.call(\"cart/submitPayment\", paymentMethod);\n    } else {\n      handleBraintreeSubmitError(results.response.message);\n      uiEnd(template, \"Resubmit payment\");\n    }\n  });\n}\n\nAutoForm.addHooks(\"braintree-payment-form\", {\n  onSubmit: function (doc) {\n    submitToBrainTree(doc, this.template);\n    return false;\n  },\n  beginSubmit: function () {\n    this.template.$(\":input\").attr(\"disabled\", true);\n    this.template.$(\"#btn-complete-order\").text(\"Submitting \");\n    return this.template.$(\"#btn-processing\").removeClass(\"hidden\");\n  },\n  endSubmit: function () {\n    if (!submitting) {\n      return uiEnd(this.template, \"Complete your order\");\n    }\n  }\n});\nvar normalizedStates = {\n  authorization_expired: \"expired\",\n  authorized: \"created\",\n  authorizing: \"pending\",\n  settlement_pending: \"pending\",\n  settlement_confirmed: \"settled\",\n  settlement_declined: \"failed\",\n  failed: \"failed\",\n  gateway_rejected: \"failed\",\n  processor_declined: \"failed\",\n  settled: \"settled\",\n  settling: \"pending\",\n  submitted_for_settlement: \"pending\",\n  voided: \"voided\",\n  \"default\": \"failed\"\n};\n\nfunction normalizeState(stateString) {\n  var normalizedState = normalizedStates[stateString];\n\n  if (typeof normalizedState === \"undefined\") {\n    normalizedState = normalizedStates.default;\n  }\n\n  return normalizedState;\n}\n\nvar normalizedModes = {\n  settled: \"capture\",\n  settling: \"capture\",\n  submitted_for_settlement: \"capture\",\n  settlement_confirmed: \"capture\",\n  authorized: \"authorize\",\n  authorizing: \"authorize\",\n  \"default\": \"capture\"\n};\n\nfunction normalizeMode(modeString) {\n  var normalizedMode = normalizedModes[modeString];\n\n  if (typeof normalizedMode === \"undefined\") {\n    normalizedMode = normalizedModes.default;\n  }\n\n  return normalizedMode;\n}","map":{"version":3,"sources":["imports/plugins/included/payments-braintree/client/checkout/braintree.js"],"names":["Meteor","module","watch","require","v","Template","AutoForm","$","getCardType","Cart","Shops","Packages","Braintree","Reaction","BraintreePayment","braintreePaymentForm","helpers","uiEnd","template","buttonText","removeAttr","text","addClass","paymentAlert","errorMessage","removeClass","hidePaymentAlert","handleBraintreeSubmitError","error","serverError","message","undefined","submitting","submitToBrainTree","doc","cardData","name","payerName","number","cardNumber","expirationMonth","expireMonth","expirationYear","expireYear","cvv2","cvv","type","cartTotal","findOne","getTotal","currencyCode","currency","authorize","total","results","paymentMethod","saved","tx","response","transaction","normalizedStatus","normalizeState","status","normalizedMode","normalizeMode","subscribe","getShopId","packageData","shopId","storedCard","creditCard","cardType","toUpperCase","last4","processor","paymentPackageId","_id","paymentSettingsKey","registry","settingsKey","method","transactionId","id","amount","parseFloat","mode","createdAt","Date","updatedAt","transactions","push","call","addHooks","onSubmit","beginSubmit","attr","endSubmit","normalizedStates","authorization_expired","authorized","authorizing","settlement_pending","settlement_confirmed","settlement_declined","failed","gateway_rejected","processor_declined","settled","settling","submitted_for_settlement","voided","stateString","normalizedState","default","normalizedModes","modeString"],"mappings":"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","sourcesContent":["/* eslint camelcase: 0 */\nimport { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\nimport { AutoForm } from \"meteor/aldeed:autoform\";\nimport { $ } from \"meteor/jquery\";\nimport { getCardType } from \"/client/modules/core/helpers/globals\";\nimport { Cart, Shops, Packages } from \"/lib/collections\";\nimport { Braintree } from \"../api/braintree\";\nimport { Reaction } from \"/client/api\";\nimport { BraintreePayment } from \"../../lib/collections/schemas\";\n\nimport \"./braintree.html\";\n\nTemplate.braintreePaymentForm.helpers({\n  BraintreePayment() {\n    return BraintreePayment;\n  }\n});\n\n\nfunction uiEnd(template, buttonText) {\n  template.$(\":input\").removeAttr(\"disabled\");\n  template.$(\"#btn-complete-order\").text(buttonText);\n  return template.$(\"#btn-processing\").addClass(\"hidden\");\n}\n\nfunction paymentAlert(errorMessage) {\n  return $(\".alert\").removeClass(\"hidden\").text(errorMessage);\n}\n\nfunction hidePaymentAlert() {\n  return $(\".alert\").addClass(\"hidden\").text(\"\");\n}\n\nfunction handleBraintreeSubmitError(error) {\n  const serverError = error !== null ? error.message : undefined;\n  if (serverError) {\n    return paymentAlert(`Server Error ${serverError}`);\n  } else if (error) {\n    return paymentAlert(\"Oops! Credit card is invalid. Please check your information and try again.\");\n  }\n}\n\nlet submitting = false;\n\nfunction submitToBrainTree(doc, template) {\n  submitting = true;\n  hidePaymentAlert();\n  const cardData = {\n    name: doc.payerName,\n    number: doc.cardNumber,\n    expirationMonth: doc.expireMonth,\n    expirationYear: doc.expireYear,\n    cvv2: doc.cvv,\n    type: getCardType(doc.cardNumber)\n  };\n  const cartTotal = Cart.findOne().getTotal();\n  const currencyCode = Shops.findOne().currency;\n\n  Braintree.authorize(cardData, {\n    total: cartTotal,\n    currency: currencyCode\n  }, (error, results) => {\n    let paymentMethod;\n    submitting = false;\n    if (error) {\n      handleBraintreeSubmitError(error);\n      uiEnd(template, \"Resubmit payment\");\n    } else if (results.saved === true) {\n      const tx = results && results.response && results.response.transaction;\n      const normalizedStatus = normalizeState(tx.status);\n      const normalizedMode = normalizeMode(tx.status);\n      Meteor.subscribe(\"Packages\", Reaction.getShopId());\n      const packageData = Packages.findOne({\n        name: \"reaction-braintree\",\n        shopId: Reaction.getShopId()\n      });\n\n      const storedCard = `${tx.creditCard.cardType.toUpperCase()} ${tx.creditCard.last4}`;\n      paymentMethod = {\n        processor: \"Braintree\",\n        storedCard,\n        paymentPackageId: packageData._id,\n        paymentSettingsKey: packageData.registry[0].settingsKey,\n        method: \"credit\",\n        transactionId: tx.id,\n        amount: parseFloat(tx.amount),\n        status: normalizedStatus,\n        mode: normalizedMode,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        transactions: []\n      };\n      paymentMethod.transactions.push(results.response);\n      Meteor.call(\"cart/submitPayment\", paymentMethod);\n    } else {\n      handleBraintreeSubmitError(results.response.message);\n      uiEnd(template, \"Resubmit payment\");\n    }\n  });\n}\n\nAutoForm.addHooks(\"braintree-payment-form\", {\n  onSubmit(doc) {\n    submitToBrainTree(doc, this.template);\n    return false;\n  },\n  beginSubmit() {\n    this.template.$(\":input\").attr(\"disabled\", true);\n    this.template.$(\"#btn-complete-order\").text(\"Submitting \");\n    return this.template.$(\"#btn-processing\").removeClass(\"hidden\");\n  },\n  endSubmit() {\n    if (!submitting) {\n      return uiEnd(this.template, \"Complete your order\");\n    }\n  }\n});\n\nconst normalizedStates = {\n  authorization_expired: \"expired\",\n  authorized: \"created\",\n  authorizing: \"pending\",\n  settlement_pending: \"pending\",\n  settlement_confirmed: \"settled\",\n  settlement_declined: \"failed\",\n  failed: \"failed\",\n  gateway_rejected: \"failed\",\n  processor_declined: \"failed\",\n  settled: \"settled\",\n  settling: \"pending\",\n  submitted_for_settlement: \"pending\",\n  voided: \"voided\",\n  default: \"failed\"\n};\n\nfunction normalizeState(stateString) {\n  let normalizedState = normalizedStates[stateString];\n  if (typeof normalizedState === \"undefined\") {\n    normalizedState = normalizedStates.default;\n  }\n  return normalizedState;\n}\n\nconst normalizedModes = {\n  settled: \"capture\",\n  settling: \"capture\",\n  submitted_for_settlement: \"capture\",\n  settlement_confirmed: \"capture\",\n  authorized: \"authorize\",\n  authorizing: \"authorize\",\n  default: \"capture\"\n};\n\nfunction normalizeMode(modeString) {\n  let normalizedMode = normalizedModes[modeString];\n  if (typeof normalizedMode === \"undefined\") {\n    normalizedMode = normalizedModes.default;\n  }\n  return normalizedMode;\n}\n"]},"sourceType":"script","hash":"398eb8b440359396d12b33a1c53d8b35d42e8a85"}
