{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"server/publications/collections/reactiveAggregate.js","filename":"server/publications/collections/reactiveAggregate.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"server/publications/collections/reactiveAggregate.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"server/publications/collections/reactiveAggregate.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/publications/collections/reactiveAggregate.js"}},"code":"module.export({\n  ReactiveAggregate: () => ReactiveAggregate\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Mongo, MongoInternals;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  },\n\n  MongoInternals(v) {\n    MongoInternals = v;\n  }\n\n}, 1);\n\n// This code taken from https://github.com/meteorhacks/meteor-aggregate\n// Add the aggregate function available in tbe raw collection to normal collections\nMongo.Collection.prototype.aggregate = function (pipelines, options) {\n  const coll = this._getCollection();\n\n  return Meteor.wrapAsync(coll.aggregate.bind(coll))(pipelines, options);\n}; // this group of methods were taken from https://github.com/meteorhacks/meteor-collection-utils\n\n/**\n * Provides a way to get at the underlying instance of the DB connection\n * @private\n * @returns {Object} The underlying Mongo connection\n */\n\n\nMongo.Collection.prototype._getDb = function () {\n  if (typeof this._collection._getDb === \"function\") {\n    return this._collection._getDb();\n  }\n\n  const mongoConn = MongoInternals.defaultRemoteCollectionDriver().mongo;\n  return wrapWithDb(mongoConn);\n};\n/**\n * Provides a way to get at the underlying instance of the Collection\n * @private\n * @returns {Object} The underlying Mongo collection\n */\n\n\nMongo.Collection.prototype._getCollection = function () {\n  const db = this._getDb();\n\n  return db.collection(this._name);\n};\n\nfunction wrapWithDb(mongoConn) {\n  if (mongoConn.db) {\n    return mongoConn.db;\n  }\n}\n/**\n * @summary Provides a wrapper around the results of a Mongo aggregate query to make it Reactive\n * @param {Object} pub - The instance of the publication we are creating\n * @param {Object} collection - The Mongo.Collection instance to query\n * @param {Array} pipeline - The aggregation pipeline to use\n * @param {Object} options - Optional options\n *  - `observeSelector` can be given to improve efficiency. This selector is used for observing the collection.\n // (e.g. `{ authorId: { $exists: 1 } }`)\n // - `observeOptions` can be given to limit fields, further improving efficiency. Ideally used to limit fields on your query.\n //   If none is given any change to the collection will cause the aggregation to be reevaluated.\n // (e.g. `{ limit: 10, sort: { createdAt: -1 } }`)\n // - `clientCollection` defaults to `collection._name` but can be overriden to sent the results\n // to a different client-side collection.\n @example\n // ## Quick Example\n //\n // A publication for one of the\n //   [examples](https://docs.mongodb.org/v3.0/reference/operator/aggregation/group/#group-documents-by-author)\n // in the MongoDB docs would look like this:\n //\n // Meteor.publish(\"booksByAuthor\", function () {\n//   ReactiveAggregate(this, Books, [{\n//     $group: {\n//       _id: \"$author\",\n//       books: { $push: \"$$ROOT\" }\n//     }\n//   }]);\n// });\n * @constructor\n */\n\n\nfunction ReactiveAggregate(pub, collection, pipeline, options) {\n  let allowDiskUse = false;\n\n  if (process.env.MONGO_ALLOW_DISK_USE) {\n    allowDiskUse = true;\n  }\n\n  const defaultOptions = {\n    observeSelector: {},\n    observeOptions: {},\n    clientCollection: collection._name,\n    allowDiskUse\n  };\n  const pubOptions = Object.assign({}, defaultOptions, options);\n  let initializing = true;\n  pub._ids = {};\n  pub._iteration = 1; // run this function every time a record changes\n\n  function update() {\n    if (initializing) {\n      return;\n    } // add and update documents on the client\n\n\n    collection.aggregate(pipeline, {\n      allowDiskUse: pubOptions.allowDiskUse\n    }).forEach(doc => {\n      if (!pub._ids[doc._id]) {\n        pub.added(pubOptions.clientCollection, doc._id, doc);\n      } else {\n        pub.changed(pubOptions.clientCollection, doc._id, doc);\n      }\n\n      pub._ids[doc._id] = pub._iteration;\n    }); // remove documents not in the result anymore\n\n    for (const [key, value] of Object.entries(pub._ids)) {\n      if (value !== pub._iteration) {\n        delete pub._ids[key];\n        pub.removed(pubOptions.clientCollection, key);\n      }\n    }\n\n    pub._iteration += 1;\n  } // track any changes on the collection used for the aggregation\n\n\n  const query = collection.find(pubOptions.observeSelector, pubOptions.observeOptions);\n  const handle = query.observeChanges({\n    added: update,\n    changed: update,\n    removed: update,\n\n    error(error) {\n      throw new Meteor.Error(\"server-error\", `Encountered an error while observing ${collection._name}`, error);\n    }\n\n  }); // observeChanges() will immediately fire an \"added\" event for each document in the query\n  // these are skipped using the initializing flag\n\n  initializing = false; // send an initial result set to the client\n\n  update(); // mark the subscription as ready\n\n  pub.ready(); // stop observing the cursor when the client unsubscribes\n\n  pub.onStop(() => {\n    handle.stop();\n  });\n}","map":{"version":3,"sources":["server/publications/collections/reactiveAggregate.js"],"names":["module","export","ReactiveAggregate","Meteor","watch","require","v","Mongo","MongoInternals","Collection","prototype","aggregate","pipelines","options","coll","_getCollection","wrapAsync","bind","_getDb","_collection","mongoConn","defaultRemoteCollectionDriver","mongo","wrapWithDb","db","collection","_name","pub","pipeline","allowDiskUse","process","env","MONGO_ALLOW_DISK_USE","defaultOptions","observeSelector","observeOptions","clientCollection","pubOptions","Object","assign","initializing","_ids","_iteration","update","forEach","doc","_id","added","changed","key","value","entries","removed","query","find","handle","observeChanges","error","Error","ready","onStop","stop"],"mappings":"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","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Mongo, MongoInternals } from \"meteor/mongo\";\n\n// This code taken from https://github.com/meteorhacks/meteor-aggregate\n// Add the aggregate function available in tbe raw collection to normal collections\nMongo.Collection.prototype.aggregate = function (pipelines, options) {\n  const coll = this._getCollection();\n  return Meteor.wrapAsync(coll.aggregate.bind(coll))(pipelines, options);\n};\n\n// this group of methods were taken from https://github.com/meteorhacks/meteor-collection-utils\n/**\n * Provides a way to get at the underlying instance of the DB connection\n * @private\n * @returns {Object} The underlying Mongo connection\n */\nMongo.Collection.prototype._getDb = function () {\n  if (typeof this._collection._getDb === \"function\") {\n    return this._collection._getDb();\n  }\n  const mongoConn = MongoInternals.defaultRemoteCollectionDriver().mongo;\n  return wrapWithDb(mongoConn);\n};\n\n/**\n * Provides a way to get at the underlying instance of the Collection\n * @private\n * @returns {Object} The underlying Mongo collection\n */\nMongo.Collection.prototype._getCollection = function () {\n  const db = this._getDb();\n  return db.collection(this._name);\n};\n\nfunction wrapWithDb(mongoConn) {\n  if (mongoConn.db) {\n    return mongoConn.db;\n  }\n}\n\n\n/**\n * @summary Provides a wrapper around the results of a Mongo aggregate query to make it Reactive\n * @param {Object} pub - The instance of the publication we are creating\n * @param {Object} collection - The Mongo.Collection instance to query\n * @param {Array} pipeline - The aggregation pipeline to use\n * @param {Object} options - Optional options\n *  - `observeSelector` can be given to improve efficiency. This selector is used for observing the collection.\n // (e.g. `{ authorId: { $exists: 1 } }`)\n // - `observeOptions` can be given to limit fields, further improving efficiency. Ideally used to limit fields on your query.\n //   If none is given any change to the collection will cause the aggregation to be reevaluated.\n // (e.g. `{ limit: 10, sort: { createdAt: -1 } }`)\n // - `clientCollection` defaults to `collection._name` but can be overriden to sent the results\n // to a different client-side collection.\n @example\n // ## Quick Example\n //\n // A publication for one of the\n //   [examples](https://docs.mongodb.org/v3.0/reference/operator/aggregation/group/#group-documents-by-author)\n // in the MongoDB docs would look like this:\n //\n // Meteor.publish(\"booksByAuthor\", function () {\n//   ReactiveAggregate(this, Books, [{\n//     $group: {\n//       _id: \"$author\",\n//       books: { $push: \"$$ROOT\" }\n//     }\n//   }]);\n// });\n * @constructor\n */\nexport function ReactiveAggregate(pub, collection, pipeline, options) {\n  let allowDiskUse = false;\n\n  if (process.env.MONGO_ALLOW_DISK_USE) {\n    allowDiskUse = true;\n  }\n\n  const defaultOptions = {\n    observeSelector: {},\n    observeOptions: {},\n    clientCollection: collection._name,\n    allowDiskUse\n  };\n  const pubOptions = Object.assign({}, defaultOptions, options);\n\n  let initializing = true;\n  pub._ids = {};\n  pub._iteration = 1;\n\n  // run this function every time a record changes\n  function update() {\n    if (initializing) {\n      return;\n    }\n\n    // add and update documents on the client\n    collection.aggregate(pipeline, { allowDiskUse: pubOptions.allowDiskUse }).forEach((doc) => {\n      if (!pub._ids[doc._id]) {\n        pub.added(pubOptions.clientCollection, doc._id, doc);\n      } else {\n        pub.changed(pubOptions.clientCollection, doc._id, doc);\n      }\n      pub._ids[doc._id] = pub._iteration;\n    });\n    // remove documents not in the result anymore\n    for (const [key, value] of Object.entries(pub._ids)) {\n      if (value !== pub._iteration) {\n        delete pub._ids[key];\n        pub.removed(pubOptions.clientCollection, key);\n      }\n    }\n    pub._iteration += 1;\n  }\n\n  // track any changes on the collection used for the aggregation\n  const query = collection.find(pubOptions.observeSelector, pubOptions.observeOptions);\n  const handle = query.observeChanges({\n    added: update,\n    changed: update,\n    removed: update,\n    error(error) {\n      throw new Meteor.Error(\"server-error\", `Encountered an error while observing ${collection._name}`, error);\n    }\n  });\n  // observeChanges() will immediately fire an \"added\" event for each document in the query\n  // these are skipped using the initializing flag\n  initializing = false;\n  // send an initial result set to the client\n  update();\n  // mark the subscription as ready\n  pub.ready();\n\n  // stop observing the cursor when the client unsubscribes\n  pub.onStop(() => {\n    handle.stop();\n  });\n}\n"]},"sourceType":"script","hash":"601a340a397d0325b1ba9684f90b259e0a6c11dd"}
