{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"lib/collections/schemas/payments.js","filename":"lib/collections/schemas/payments.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"lib/collections/schemas/payments.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"lib/collections/schemas/payments.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"lib/collections/schemas/payments.js"}},"code":"module.export({\n  PaymentItem: () => PaymentItem,\n  PaymentMethod: () => PaymentMethod,\n  PaymentMethodArgument: () => PaymentMethodArgument,\n  Invoice: () => Invoice,\n  CurrencyExchangeRate: () => CurrencyExchangeRate,\n  Payment: () => Payment,\n  Refund: () => Refund\n});\nlet SimpleSchema;\nmodule.watch(require(\"simpl-schema\"), {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet Tracker;\nmodule.watch(require(\"meteor/tracker\"), {\n  Tracker(v) {\n    Tracker = v;\n  }\n\n}, 2);\nlet registerSchema;\nmodule.watch(require(\"@reactioncommerce/schemas\"), {\n  registerSchema(v) {\n    registerSchema = v;\n  }\n\n}, 3);\nlet createdAtAutoValue, schemaIdAutoValue;\nmodule.watch(require(\"./helpers\"), {\n  createdAtAutoValue(v) {\n    createdAtAutoValue = v;\n  },\n\n  schemaIdAutoValue(v) {\n    schemaIdAutoValue = v;\n  }\n\n}, 4);\nlet Address;\nmodule.watch(require(\"./address\"), {\n  Address(v) {\n    Address = v;\n  }\n\n}, 5);\nlet Workflow;\nmodule.watch(require(\"./workflow\"), {\n  Workflow(v) {\n    Workflow = v;\n  }\n\n}, 6);\nconst PaymentItem = new SimpleSchema({\n  _id: {\n    type: String,\n    label: \"Shipment Line Item\",\n    optional: true,\n    autoValue: schemaIdAutoValue\n  },\n  productId: {\n    type: String,\n    index: 1\n  },\n  shopId: {\n    type: String,\n    index: 1,\n    label: \"Shipment Item ShopId\",\n    optional: true\n  },\n  quantity: {\n    label: \"Quantity\",\n    type: SimpleSchema.Integer,\n    min: 0\n  },\n  variantId: {\n    type: String\n  }\n}, {\n  check,\n  tracker: Tracker\n});\nregisterSchema(\"PaymentItem\", PaymentItem);\n/**\n * @name PaymentMethod\n * @type {SimpleSchema}\n * @memberof schemas\n * @property {String} processor required\n * @property {String} paymentPackageId required\n * @property {String} paymentSettingsKey required\n * @property {String} storedCard optional\n * @property {String} method, allowed values: `\"credit\"`, `\"debit\"`, `\"shipping-credit\"`\n * @property {String} transactionId required\n * @property {Object} metadata optional, blackbox\n * @property {Workflow} workflow optional\n * @property {String} status required\n * @property {String} mode, allowed values: `\"authorize\"`, `\"capture\"`, `\"refund\"`, `\"cancel\"`, `\"void\"`\n * @property {String} riskLevel, allowed values: `\"normal\"`, `\"elevated\"`, `\"high\"`\n * @property {Date} createdAt required\n * @property {Date} updatedAt optional\n * @property {String} authorization optional\n * @property {Number} amount optional\n * @property {String} currency required\n * @property {Object[]} transactions optional, blackbox\n * @property {PaymentItem[]} items optional\n * @property {String} shopId optional\n */\n\nconst PaymentMethod = new SimpleSchema({\n  \"processor\": {\n    type: String\n  },\n  \"paymentPackageId\": {\n    type: String\n  },\n  \"paymentSettingsKey\": {\n    type: String\n  },\n  \"storedCard\": {\n    type: String,\n    optional: true\n  },\n  \"method\": {\n    type: String,\n    allowedValues: [\"credit\", \"debit\", \"shipping-credit\"],\n    optional: true\n  },\n  \"transactionId\": {\n    type: String\n  },\n  \"metadata\": {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  \"workflow\": {\n    type: Workflow,\n    optional: true,\n    defaultValue: {}\n  },\n  \"status\": {\n    type: String\n  },\n  \"mode\": {\n    type: String,\n    allowedValues: [\"authorize\", \"capture\", \"refund\", \"cancel\", \"void\"]\n  },\n  \"riskLevel\": {\n    type: String,\n    allowedValues: [\"normal\", \"elevated\", \"high\"],\n    optional: true\n  },\n  \"createdAt\": {\n    type: Date,\n    autoValue: createdAtAutoValue\n  },\n  \"updatedAt\": {\n    type: Date,\n    optional: true\n  },\n  \"authorization\": {\n    type: String,\n    optional: true\n  },\n  \"amount\": {\n    type: Number,\n    optional: true\n  },\n  \"currency\": {\n    type: String,\n    optional: true\n  },\n  \"transactions\": {\n    type: Array,\n    optional: true\n  },\n  \"transactions.$\": {\n    type: Object,\n    blackbox: true\n  },\n  \"items\": {\n    type: Array,\n    optional: true\n  },\n  \"items.$\": {\n    type: PaymentItem\n  },\n  \"shopId\": {\n    type: String,\n    optional: true\n  }\n}, {\n  check,\n  tracker: Tracker\n});\nregisterSchema(\"PaymentMethod\", PaymentMethod); // When checking paymentMethod passed as a method arg, props like createdAt\n// should be optional\n\nconst PaymentMethodArgument = PaymentMethod.clone().extend({\n  createdAt: {\n    type: Date,\n    optional: true,\n    autoValue: null\n  }\n});\nconst Invoice = new SimpleSchema({\n  transaction: {\n    type: String,\n    optional: true\n  },\n  shipping: {\n    type: Number,\n    optional: true\n  },\n  taxes: {\n    type: Number,\n    optional: true\n  },\n  subtotal: {\n    type: Number\n  },\n  discounts: {\n    type: Number,\n    optional: true\n  },\n  total: {\n    type: Number\n  }\n}, {\n  check,\n  tracker: Tracker\n});\nregisterSchema(\"Invoice\", Invoice);\n/**\n * @name CurrencyExchangeRate\n * @type {SimpleSchema}\n * @memberof schemas\n * @property {String} userCurrency, default value: `\"USD\"`\n * @property {Number} exchangeRate optional\n */\n\nconst CurrencyExchangeRate = new SimpleSchema({\n  userCurrency: {\n    type: String,\n    optional: true,\n    defaultValue: \"USD\"\n  },\n  exchangeRate: {\n    type: Number,\n    optional: true\n  }\n}, {\n  check,\n  tracker: Tracker\n});\nregisterSchema(\"CurrencyExchangeRate\", CurrencyExchangeRate);\n/**\n * @name Payment\n * @type {SimpleSchema}\n * @memberof schemas\n * @property {String} _id required, Payment Id\n * @property {Address} address optional\n * @property {PaymentMethod} paymentMethod optional\n * @property {Invoice} invoice optional\n * @property {CurrencyExchangeRate} currency optional\n * @property {String} shopId optional\n */\n\nconst Payment = new SimpleSchema({\n  _id: {\n    type: String,\n    label: \"Payment Id\",\n    autoValue: schemaIdAutoValue\n  },\n  address: {\n    type: Address,\n    optional: true\n  },\n  paymentMethod: {\n    type: PaymentMethod,\n    optional: true,\n    blackbox: true\n  },\n  invoice: {\n    type: Invoice,\n    optional: true\n  },\n  currency: {\n    type: CurrencyExchangeRate,\n    optional: true,\n    defaultValue: {}\n  },\n  shopId: {\n    type: String,\n    optional: true\n  }\n}, {\n  check,\n  tracker: Tracker\n});\nregisterSchema(\"Payment\", Payment);\n/**\n * @name Payment\n * @type {SimpleSchema}\n * @memberof schemas\n * @property {String} type required\n * @property {Number} amount required\n * @property {Number} created required\n * @property {String} currency required\n * @property {Object} raw optional, blackbox\n */\n\nconst Refund = new SimpleSchema({\n  type: {\n    type: String\n  },\n  amount: {\n    type: Number\n  },\n  created: {\n    type: SimpleSchema.Integer\n  },\n  currency: {\n    type: String\n  },\n  raw: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  }\n}, {\n  check,\n  tracker: Tracker\n});\nregisterSchema(\"Refund\", Refund);","map":{"version":3,"sources":["lib/collections/schemas/payments.js"],"names":["module","export","PaymentItem","PaymentMethod","PaymentMethodArgument","Invoice","CurrencyExchangeRate","Payment","Refund","SimpleSchema","watch","require","default","v","check","Tracker","registerSchema","createdAtAutoValue","schemaIdAutoValue","Address","Workflow","_id","type","String","label","optional","autoValue","productId","index","shopId","quantity","Integer","min","variantId","tracker","allowedValues","Object","blackbox","defaultValue","Date","Number","Array","clone","extend","createdAt","transaction","shipping","taxes","subtotal","discounts","total","userCurrency","exchangeRate","address","paymentMethod","invoice","currency","amount","created","raw"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,eAAY,MAAIA,WAAjB;AAA6BC,iBAAc,MAAIA,aAA/C;AAA6DC,yBAAsB,MAAIA,qBAAvF;AAA6GC,WAAQ,MAAIA,OAAzH;AAAiIC,wBAAqB,MAAIA,oBAA1J;AAA+KC,WAAQ,MAAIA,OAA3L;AAAmMC,UAAO,MAAIA;AAA9M,CAAd;AAAqO,IAAIC,YAAJ;AAAiBT,OAAOU,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACC,UAAQC,CAAR,EAAU;AAACJ,mBAAaI,CAAb;AAAe;;AAA3B,CAArC,EAAkE,CAAlE;AAAqE,IAAIC,KAAJ;AAAUd,OAAOU,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACG,QAAMD,CAAN,EAAQ;AAACC,YAAMD,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAA4D,IAAIE,OAAJ;AAAYf,OAAOU,KAAP,CAAaC,QAAQ,gBAAR,CAAb,EAAuC;AAACI,UAAQF,CAAR,EAAU;AAACE,cAAQF,CAAR;AAAU;;AAAtB,CAAvC,EAA+D,CAA/D;AAAkE,IAAIG,cAAJ;AAAmBhB,OAAOU,KAAP,CAAaC,QAAQ,2BAAR,CAAb,EAAkD;AAACK,iBAAeH,CAAf,EAAiB;AAACG,qBAAeH,CAAf;AAAiB;;AAApC,CAAlD,EAAwF,CAAxF;AAA2F,IAAII,kBAAJ,EAAuBC,iBAAvB;AAAyClB,OAAOU,KAAP,CAAaC,QAAQ,WAAR,CAAb,EAAkC;AAACM,qBAAmBJ,CAAnB,EAAqB;AAACI,yBAAmBJ,CAAnB;AAAqB,GAA5C;;AAA6CK,oBAAkBL,CAAlB,EAAoB;AAACK,wBAAkBL,CAAlB;AAAoB;;AAAtF,CAAlC,EAA0H,CAA1H;AAA6H,IAAIM,OAAJ;AAAYnB,OAAOU,KAAP,CAAaC,QAAQ,WAAR,CAAb,EAAkC;AAACQ,UAAQN,CAAR,EAAU;AAACM,cAAQN,CAAR;AAAU;;AAAtB,CAAlC,EAA0D,CAA1D;AAA6D,IAAIO,QAAJ;AAAapB,OAAOU,KAAP,CAAaC,QAAQ,YAAR,CAAb,EAAmC;AAACS,WAASP,CAAT,EAAW;AAACO,eAASP,CAAT;AAAW;;AAAxB,CAAnC,EAA6D,CAA7D;AAoBlzB,MAAMX,cAAc,IAAIO,YAAJ,CAAiB;AAC1CY,OAAK;AACHC,UAAMC,MADH;AAEHC,WAAO,oBAFJ;AAGHC,cAAU,IAHP;AAIHC,eAAWR;AAJR,GADqC;AAO1CS,aAAW;AACTL,UAAMC,MADG;AAETK,WAAO;AAFE,GAP+B;AAW1CC,UAAQ;AACNP,UAAMC,MADA;AAENK,WAAO,CAFD;AAGNJ,WAAO,sBAHD;AAINC,cAAU;AAJJ,GAXkC;AAiB1CK,YAAU;AACRN,WAAO,UADC;AAERF,UAAMb,aAAasB,OAFX;AAGRC,SAAK;AAHG,GAjBgC;AAsB1CC,aAAW;AACTX,UAAMC;AADG;AAtB+B,CAAjB,EAyBxB;AAAET,OAAF;AAASoB,WAASnB;AAAlB,CAzBwB,CAApB;AA2BPC,eAAe,aAAf,EAA8Bd,WAA9B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAwBO,MAAMC,gBAAgB,IAAIM,YAAJ,CAAiB;AAC5C,eAAa;AACXa,UAAMC;AADK,GAD+B;AAI5C,sBAAoB;AAClBD,UAAMC;AADY,GAJwB;AAO5C,wBAAsB;AACpBD,UAAMC;AADc,GAPsB;AAU5C,gBAAc;AACZD,UAAMC,MADM;AAEZE,cAAU;AAFE,GAV8B;AAc5C,YAAU;AACRH,UAAMC,MADE;AAERY,mBAAe,CAAC,QAAD,EAAW,OAAX,EAAoB,iBAApB,CAFP;AAGRV,cAAU;AAHF,GAdkC;AAmB5C,mBAAiB;AACfH,UAAMC;AADS,GAnB2B;AAsB5C,cAAY;AACVD,UAAMc,MADI;AAEVX,cAAU,IAFA;AAGVY,cAAU;AAHA,GAtBgC;AA2B5C,cAAY;AACVf,UAAMF,QADI;AAEVK,cAAU,IAFA;AAGVa,kBAAc;AAHJ,GA3BgC;AAgC5C,YAAU;AACRhB,UAAMC;AADE,GAhCkC;AAmC5C,UAAQ;AACND,UAAMC,MADA;AAENY,mBAAe,CAAC,WAAD,EAAc,SAAd,EAAyB,QAAzB,EAAmC,QAAnC,EAA6C,MAA7C;AAFT,GAnCoC;AAuC5C,eAAa;AACXb,UAAMC,MADK;AAEXY,mBAAe,CAAC,QAAD,EAAW,UAAX,EAAuB,MAAvB,CAFJ;AAGXV,cAAU;AAHC,GAvC+B;AA4C5C,eAAa;AACXH,UAAMiB,IADK;AAEXb,eAAWT;AAFA,GA5C+B;AAgD5C,eAAa;AACXK,UAAMiB,IADK;AAEXd,cAAU;AAFC,GAhD+B;AAoD5C,mBAAiB;AACfH,UAAMC,MADS;AAEfE,cAAU;AAFK,GApD2B;AAwD5C,YAAU;AACRH,UAAMkB,MADE;AAERf,cAAU;AAFF,GAxDkC;AA4D5C,cAAY;AACVH,UAAMC,MADI;AAEVE,cAAU;AAFA,GA5DgC;AAgE5C,kBAAgB;AACdH,UAAMmB,KADQ;AAEdhB,cAAU;AAFI,GAhE4B;AAoE5C,oBAAkB;AAChBH,UAAMc,MADU;AAEhBC,cAAU;AAFM,GApE0B;AAwE5C,WAAS;AACPf,UAAMmB,KADC;AAEPhB,cAAU;AAFH,GAxEmC;AA4E5C,aAAW;AACTH,UAAMpB;AADG,GA5EiC;AA+E5C,YAAU;AACRoB,UAAMC,MADE;AAERE,cAAU;AAFF;AA/EkC,CAAjB,EAmF1B;AAAEX,OAAF;AAASoB,WAASnB;AAAlB,CAnF0B,CAAtB;AAqFPC,eAAe,eAAf,EAAgCb,aAAhC,E,CAEA;AACA;;AACO,MAAMC,wBAAwBD,cAAcuC,KAAd,GAAsBC,MAAtB,CAA6B;AAChEC,aAAW;AACTtB,UAAMiB,IADG;AAETd,cAAU,IAFD;AAGTC,eAAW;AAHF;AADqD,CAA7B,CAA9B;AAmBA,MAAMrB,UAAU,IAAII,YAAJ,CAAiB;AACtCoC,eAAa;AACXvB,UAAMC,MADK;AAEXE,cAAU;AAFC,GADyB;AAKtCqB,YAAU;AACRxB,UAAMkB,MADE;AAERf,cAAU;AAFF,GAL4B;AAStCsB,SAAO;AACLzB,UAAMkB,MADD;AAELf,cAAU;AAFL,GAT+B;AAatCuB,YAAU;AACR1B,UAAMkB;AADE,GAb4B;AAgBtCS,aAAW;AACT3B,UAAMkB,MADG;AAETf,cAAU;AAFD,GAhB2B;AAoBtCyB,SAAO;AACL5B,UAAMkB;AADD;AApB+B,CAAjB,EAuBpB;AAAE1B,OAAF;AAASoB,WAASnB;AAAlB,CAvBoB,CAAhB;AAyBPC,eAAe,SAAf,EAA0BX,OAA1B;AAEA;;;;;;;;AAOO,MAAMC,uBAAuB,IAAIG,YAAJ,CAAiB;AACnD0C,gBAAc;AACZ7B,UAAMC,MADM;AAEZE,cAAU,IAFE;AAGZa,kBAAc;AAHF,GADqC;AAMnDc,gBAAc;AACZ9B,UAAMkB,MADM;AAEZf,cAAU;AAFE;AANqC,CAAjB,EAUjC;AAAEX,OAAF;AAASoB,WAASnB;AAAlB,CAViC,CAA7B;AAYPC,eAAe,sBAAf,EAAuCV,oBAAvC;AAEA;;;;;;;;;;;;AAWO,MAAMC,UAAU,IAAIE,YAAJ,CAAiB;AACtCY,OAAK;AACHC,UAAMC,MADH;AAEHC,WAAO,YAFJ;AAGHE,eAAWR;AAHR,GADiC;AAMtCmC,WAAS;AACP/B,UAAMH,OADC;AAEPM,cAAU;AAFH,GAN6B;AAUtC6B,iBAAe;AACbhC,UAAMnB,aADO;AAEbsB,cAAU,IAFG;AAGbY,cAAU;AAHG,GAVuB;AAetCkB,WAAS;AACPjC,UAAMjB,OADC;AAEPoB,cAAU;AAFH,GAf6B;AAmBtC+B,YAAU;AACRlC,UAAMhB,oBADE;AAERmB,cAAU,IAFF;AAGRa,kBAAc;AAHN,GAnB4B;AAwBtCT,UAAQ;AACNP,UAAMC,MADA;AAENE,cAAU;AAFJ;AAxB8B,CAAjB,EA4BpB;AAAEX,OAAF;AAASoB,WAASnB;AAAlB,CA5BoB,CAAhB;AA8BPC,eAAe,SAAf,EAA0BT,OAA1B;AAEA;;;;;;;;;;;AAUO,MAAMC,SAAS,IAAIC,YAAJ,CAAiB;AACrCa,QAAM;AACJA,UAAMC;AADF,GAD+B;AAIrCkC,UAAQ;AACNnC,UAAMkB;AADA,GAJ6B;AAOrCkB,WAAS;AACPpC,UAAMb,aAAasB;AADZ,GAP4B;AAUrCyB,YAAU;AACRlC,UAAMC;AADE,GAV2B;AAarCoC,OAAK;AACHrC,UAAMc,MADH;AAEHX,cAAU,IAFP;AAGHY,cAAU;AAHP;AAbgC,CAAjB,EAkBnB;AAAEvB,OAAF;AAASoB,WAASnB;AAAlB,CAlBmB,CAAf;AAoBPC,eAAe,QAAf,EAAyBR,MAAzB","sourcesContent":["import SimpleSchema from \"simpl-schema\";\nimport { check } from \"meteor/check\";\nimport { Tracker } from \"meteor/tracker\";\nimport { registerSchema } from \"@reactioncommerce/schemas\";\nimport { createdAtAutoValue, schemaIdAutoValue } from \"./helpers\";\nimport { Address } from \"./address\";\nimport { Workflow } from \"./workflow\";\n\n/**\n * @name PaymentItem\n * @summary Schema for items we're inserting into our Payments\n * To keep track of what items were paid for with a given paymentMethod\n * @type {SimpleSchema}\n * @memberof schemas\n * @property {String} _id optional, Shipment Line Item\n * @property {String} productId required\n * @property {String} shopId optional, Shipment Item ShopId\n * @property {Number} quantity required\n * @property {String} variantId required\n */\nexport const PaymentItem = new SimpleSchema({\n  _id: {\n    type: String,\n    label: \"Shipment Line Item\",\n    optional: true,\n    autoValue: schemaIdAutoValue\n  },\n  productId: {\n    type: String,\n    index: 1\n  },\n  shopId: {\n    type: String,\n    index: 1,\n    label: \"Shipment Item ShopId\",\n    optional: true\n  },\n  quantity: {\n    label: \"Quantity\",\n    type: SimpleSchema.Integer,\n    min: 0\n  },\n  variantId: {\n    type: String\n  }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"PaymentItem\", PaymentItem);\n\n/**\n * @name PaymentMethod\n * @type {SimpleSchema}\n * @memberof schemas\n * @property {String} processor required\n * @property {String} paymentPackageId required\n * @property {String} paymentSettingsKey required\n * @property {String} storedCard optional\n * @property {String} method, allowed values: `\"credit\"`, `\"debit\"`, `\"shipping-credit\"`\n * @property {String} transactionId required\n * @property {Object} metadata optional, blackbox\n * @property {Workflow} workflow optional\n * @property {String} status required\n * @property {String} mode, allowed values: `\"authorize\"`, `\"capture\"`, `\"refund\"`, `\"cancel\"`, `\"void\"`\n * @property {String} riskLevel, allowed values: `\"normal\"`, `\"elevated\"`, `\"high\"`\n * @property {Date} createdAt required\n * @property {Date} updatedAt optional\n * @property {String} authorization optional\n * @property {Number} amount optional\n * @property {String} currency required\n * @property {Object[]} transactions optional, blackbox\n * @property {PaymentItem[]} items optional\n * @property {String} shopId optional\n */\nexport const PaymentMethod = new SimpleSchema({\n  \"processor\": {\n    type: String\n  },\n  \"paymentPackageId\": {\n    type: String\n  },\n  \"paymentSettingsKey\": {\n    type: String\n  },\n  \"storedCard\": {\n    type: String,\n    optional: true\n  },\n  \"method\": {\n    type: String,\n    allowedValues: [\"credit\", \"debit\", \"shipping-credit\"],\n    optional: true\n  },\n  \"transactionId\": {\n    type: String\n  },\n  \"metadata\": {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  \"workflow\": {\n    type: Workflow,\n    optional: true,\n    defaultValue: {}\n  },\n  \"status\": {\n    type: String\n  },\n  \"mode\": {\n    type: String,\n    allowedValues: [\"authorize\", \"capture\", \"refund\", \"cancel\", \"void\"]\n  },\n  \"riskLevel\": {\n    type: String,\n    allowedValues: [\"normal\", \"elevated\", \"high\"],\n    optional: true\n  },\n  \"createdAt\": {\n    type: Date,\n    autoValue: createdAtAutoValue\n  },\n  \"updatedAt\": {\n    type: Date,\n    optional: true\n  },\n  \"authorization\": {\n    type: String,\n    optional: true\n  },\n  \"amount\": {\n    type: Number,\n    optional: true\n  },\n  \"currency\": {\n    type: String,\n    optional: true\n  },\n  \"transactions\": {\n    type: Array,\n    optional: true\n  },\n  \"transactions.$\": {\n    type: Object,\n    blackbox: true\n  },\n  \"items\": {\n    type: Array,\n    optional: true\n  },\n  \"items.$\": {\n    type: PaymentItem\n  },\n  \"shopId\": {\n    type: String,\n    optional: true\n  }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"PaymentMethod\", PaymentMethod);\n\n// When checking paymentMethod passed as a method arg, props like createdAt\n// should be optional\nexport const PaymentMethodArgument = PaymentMethod.clone().extend({\n  createdAt: {\n    type: Date,\n    optional: true,\n    autoValue: null\n  }\n});\n\n/**\n * @name Invoice\n * @type {SimpleSchema}\n * @memberof schemas\n * @property {String} transaction optional\n * @property {Number} shipping optional\n * @property {Number} taxes optional\n * @property {Number} subtotal required\n * @property {Number} discounts optional\n * @property {Number} total required\n */\nexport const Invoice = new SimpleSchema({\n  transaction: {\n    type: String,\n    optional: true\n  },\n  shipping: {\n    type: Number,\n    optional: true\n  },\n  taxes: {\n    type: Number,\n    optional: true\n  },\n  subtotal: {\n    type: Number\n  },\n  discounts: {\n    type: Number,\n    optional: true\n  },\n  total: {\n    type: Number\n  }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"Invoice\", Invoice);\n\n/**\n * @name CurrencyExchangeRate\n * @type {SimpleSchema}\n * @memberof schemas\n * @property {String} userCurrency, default value: `\"USD\"`\n * @property {Number} exchangeRate optional\n */\nexport const CurrencyExchangeRate = new SimpleSchema({\n  userCurrency: {\n    type: String,\n    optional: true,\n    defaultValue: \"USD\"\n  },\n  exchangeRate: {\n    type: Number,\n    optional: true\n  }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"CurrencyExchangeRate\", CurrencyExchangeRate);\n\n/**\n * @name Payment\n * @type {SimpleSchema}\n * @memberof schemas\n * @property {String} _id required, Payment Id\n * @property {Address} address optional\n * @property {PaymentMethod} paymentMethod optional\n * @property {Invoice} invoice optional\n * @property {CurrencyExchangeRate} currency optional\n * @property {String} shopId optional\n */\nexport const Payment = new SimpleSchema({\n  _id: {\n    type: String,\n    label: \"Payment Id\",\n    autoValue: schemaIdAutoValue\n  },\n  address: {\n    type: Address,\n    optional: true\n  },\n  paymentMethod: {\n    type: PaymentMethod,\n    optional: true,\n    blackbox: true\n  },\n  invoice: {\n    type: Invoice,\n    optional: true\n  },\n  currency: {\n    type: CurrencyExchangeRate,\n    optional: true,\n    defaultValue: {}\n  },\n  shopId: {\n    type: String,\n    optional: true\n  }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"Payment\", Payment);\n\n/**\n * @name Payment\n * @type {SimpleSchema}\n * @memberof schemas\n * @property {String} type required\n * @property {Number} amount required\n * @property {Number} created required\n * @property {String} currency required\n * @property {Object} raw optional, blackbox\n */\nexport const Refund = new SimpleSchema({\n  type: {\n    type: String\n  },\n  amount: {\n    type: Number\n  },\n  created: {\n    type: SimpleSchema.Integer\n  },\n  currency: {\n    type: String\n  },\n  raw: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"Refund\", Refund);\n"]},"sourceType":"script","hash":"17fd795d7e32c481b572427d07bf3d3b5dac165f"}
