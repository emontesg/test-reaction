{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/core/discounts/server/methods/methods.js","filename":"imports/plugins/core/discounts/server/methods/methods.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/core/discounts/server/methods/methods.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/core/discounts/server/methods/methods.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/core/discounts/server/methods/methods.js"}},"code":"module.export({\n  methods: () => methods\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Match, check;\nmodule.watch(require(\"meteor/check\"), {\n  Match(v) {\n    Match = v;\n  },\n\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet Cart;\nmodule.watch(require(\"../../../../../../lib/collections\"), {\n  Cart(v) {\n    Cart = v;\n  }\n\n}, 2);\nlet Discounts;\nmodule.watch(require(\"../../lib/collections\"), {\n  Discounts(v) {\n    Discounts = v;\n  }\n\n}, 3);\nlet Reaction;\nmodule.watch(require(\"../api\"), {\n  default(v) {\n    Reaction = v;\n  }\n\n}, 4);\nconst methods = {\n  /**\n   * @name discounts/deleteRate\n   * @method\n   * @memberof Methods/Discounts\n   * @param  {String} discountId discount id to delete\n   * @return {String} returns update/insert result\n   */\n  \"discounts/deleteRate\"(discountId) {\n    check(discountId, String); // check permissions to delete\n\n    if (!Reaction.hasPermission(\"discounts\")) {\n      throw new Meteor.Error(\"access-denied\", \"Access Denied\");\n    }\n\n    return Discounts.remove({\n      _id: discountId\n    });\n  },\n\n  /**\n   * @name discounts/setRate\n   * @method\n   * @memberof Methods/Discounts\n   * @summary Update the cart discounts without hooks\n   * @param  {String} cartId cartId\n   * @param  {Number} discountRate discountRate\n   * @param  {Object} discounts discounts\n   * @return {Number} returns update result\n   */\n  \"discounts/setRate\"(cartId, discountRate, discounts) {\n    check(cartId, String);\n    check(discountRate, Number);\n    check(discounts, Match.Optional(Array));\n    return Cart.update(cartId, {\n      $set: {\n        discounts,\n        discount: discountRate\n      }\n    });\n  },\n\n  /**\n   * @name discounts/transaction\n   * @method\n   * @memberof Methods/Discounts\n   * @summary Applies a transaction to discounts for history\n   * @param  {String} cartId cartId\n   * @param  {String} discountId discountId\n   * @return {String} returns update result\n   */\n  \"discounts/transaction\"(cartId, discountId) {\n    check(cartId, String);\n    check(discountId, String);\n    const transaction = {\n      cartId,\n      userId: Meteor.userId(),\n      appliedAt: new Date()\n    }; // double duty validation, plus we need the method\n\n    const discount = Discounts.findOne(discountId);\n    return Discounts.update({\n      _id: discountId\n    }, {\n      $addToSet: {\n        transactions: transaction\n      }\n    }, {\n      selector: {\n        discountMethod: discount.discountMethod\n      }\n    });\n  },\n\n  /**\n   * @name discounts/calculate\n   * @method\n   * @memberof Methods/Discounts\n   * @param  {String} cart cartId\n   * @return {Object}  returns discount object\n   */\n  \"discounts/calculate\"(cart) {\n    Reaction.Schemas.Cart.validate(cart);\n    let currentDiscount = 0; // what's going on here?\n    // well, we're getting the real details of the discounts from\n    // the collection, because the publicly stored cart\n    // paymentMethod doesn't quite have all of the pieces (intentionally)\n\n    if (cart && cart.billing) {\n      for (const billing of cart.billing) {\n        if (billing.paymentMethod) {\n          const discount = Discounts.findOne(billing.paymentMethod.id);\n\n          if (discount && discount.calculation) {\n            const {\n              processor\n            } = billing.paymentMethod;\n            const calculation = discount.calculation.method; // we're using processor/calculation\n            // as a convention that can be easily\n            // added in external discount methods\n            // example: discounts/codes/discount\n            // will also not reprocess invoiced orders\n\n            if (!billing.invoice && processor === \"code\" || processor === \"rate\") {\n              // discounts are additive, if we allow more than one.\n              currentDiscount += Meteor.call(`discounts/${processor}s/${calculation}`, cart._id, discount._id); // note the added s.\n            }\n          }\n        }\n      }\n    }\n\n    return currentDiscount;\n  }\n\n};\nMeteor.methods(methods);","map":{"version":3,"sources":["imports/plugins/core/discounts/server/methods/methods.js"],"names":["module","export","methods","Meteor","watch","require","v","Match","check","Cart","Discounts","Reaction","default","discountId","String","hasPermission","Error","remove","_id","cartId","discountRate","discounts","Number","Optional","Array","update","$set","discount","transaction","userId","appliedAt","Date","findOne","$addToSet","transactions","selector","discountMethod","cart","Schemas","validate","currentDiscount","billing","paymentMethod","id","calculation","processor","method","invoice","call"],"mappings":"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","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Match, check } from \"meteor/check\";\nimport { Cart } from \"/lib/collections\";\nimport { Discounts } from \"../../lib/collections\";\nimport Reaction from \"../api\";\n\n/**\n *\n * @namespace Methods/Discounts\n */\n\nexport const methods = {\n  /**\n   * @name discounts/deleteRate\n   * @method\n   * @memberof Methods/Discounts\n   * @param  {String} discountId discount id to delete\n   * @return {String} returns update/insert result\n   */\n  \"discounts/deleteRate\"(discountId) {\n    check(discountId, String);\n\n    // check permissions to delete\n    if (!Reaction.hasPermission(\"discounts\")) {\n      throw new Meteor.Error(\"access-denied\", \"Access Denied\");\n    }\n\n    return Discounts.remove({ _id: discountId });\n  },\n\n  /**\n   * @name discounts/setRate\n   * @method\n   * @memberof Methods/Discounts\n   * @summary Update the cart discounts without hooks\n   * @param  {String} cartId cartId\n   * @param  {Number} discountRate discountRate\n   * @param  {Object} discounts discounts\n   * @return {Number} returns update result\n   */\n  \"discounts/setRate\"(cartId, discountRate, discounts) {\n    check(cartId, String);\n    check(discountRate, Number);\n    check(discounts, Match.Optional(Array));\n\n    return Cart.update(cartId, {\n      $set: {\n        discounts,\n        discount: discountRate\n      }\n    });\n  },\n\n  /**\n   * @name discounts/transaction\n   * @method\n   * @memberof Methods/Discounts\n   * @summary Applies a transaction to discounts for history\n   * @param  {String} cartId cartId\n   * @param  {String} discountId discountId\n   * @return {String} returns update result\n   */\n  \"discounts/transaction\"(cartId, discountId) {\n    check(cartId, String);\n    check(discountId, String);\n\n    const transaction = {\n      cartId,\n      userId: Meteor.userId(),\n      appliedAt: new Date()\n    };\n    // double duty validation, plus we need the method\n    const discount = Discounts.findOne(discountId);\n    return Discounts.update(\n      { _id: discountId },\n      { $addToSet: { transactions: transaction } },\n      { selector: { discountMethod: discount.discountMethod } }\n    );\n  },\n\n  /**\n   * @name discounts/calculate\n   * @method\n   * @memberof Methods/Discounts\n   * @param  {String} cart cartId\n   * @return {Object}  returns discount object\n   */\n  \"discounts/calculate\"(cart) {\n    Reaction.Schemas.Cart.validate(cart);\n\n    let currentDiscount = 0;\n    // what's going on here?\n    // well, we're getting the real details of the discounts from\n    // the collection, because the publicly stored cart\n    // paymentMethod doesn't quite have all of the pieces (intentionally)\n    if (cart && cart.billing) {\n      for (const billing of cart.billing) {\n        if (billing.paymentMethod) {\n          const discount = Discounts.findOne(billing.paymentMethod.id);\n          if (discount && discount.calculation) {\n            const { processor } = billing.paymentMethod;\n            const calculation = discount.calculation.method;\n            // we're using processor/calculation\n            // as a convention that can be easily\n            // added in external discount methods\n            // example: discounts/codes/discount\n            // will also not reprocess invoiced orders\n            if ((!billing.invoice && processor === \"code\") || processor === \"rate\") {\n              // discounts are additive, if we allow more than one.\n              currentDiscount += Meteor.call(`discounts/${processor}s/${calculation}`, cart._id, discount._id);// note the added s.\n            }\n          }\n        }\n      }\n    }\n    return currentDiscount;\n  }\n};\n\nMeteor.methods(methods);\n"]},"sourceType":"script","hash":"4d0c192c2d696b7aab9c5d444ecf3a33cf838b89"}
