{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"server/api/core/accounts/password.js","filename":"server/api/core/accounts/password.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"server/api/core/accounts/password.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"server/api/core/accounts/password.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/api/core/accounts/password.js"}},"code":"module.export({\n  sendResetPasswordEmail: () => sendResetPasswordEmail,\n  sendVerificationEmail: () => sendVerificationEmail,\n  sendUpdatedVerificationEmail: () => sendUpdatedVerificationEmail\n});\n\nlet _find;\n\nmodule.watch(require(\"lodash/find\"), {\n  default(v) {\n    _find = v;\n  }\n\n}, 0);\n\nlet _get;\n\nmodule.watch(require(\"lodash/get\"), {\n  default(v) {\n    _get = v;\n  }\n\n}, 1);\nlet Random;\nmodule.watch(require(\"meteor/random\"), {\n  Random(v) {\n    Random = v;\n  }\n\n}, 2);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 3);\nlet Accounts;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 4);\nlet SSR;\nmodule.watch(require(\"meteor/meteorhacks:ssr\"), {\n  SSR(v) {\n    SSR = v;\n  }\n\n}, 5);\nlet Shops;\nmodule.watch(require(\"../../../../lib/collections\"), {\n  Shops(v) {\n    Shops = v;\n  }\n\n}, 6);\nlet Reaction, Logger;\nmodule.watch(require(\"../..\"), {\n  Reaction(v) {\n    Reaction = v;\n  },\n\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 7);\n\nfunction sendResetPasswordEmail(userId, optionalEmail) {\n  return Promise.asyncApply(() => {\n    // Make sure the user exists, and email is one of their addresses.\n    const user = Meteor.users.findOne(userId);\n\n    if (!user) {\n      Logger.error(\"sendResetPasswordEmail - User not found\");\n      throw new Meteor.Error(\"not-found\", \"User not found\");\n    }\n\n    let email = optionalEmail; // pick the first email if we weren't passed an email.\n\n    if (!optionalEmail && user.emails && user.emails[0]) {\n      email = user.emails[0].address;\n    } // make sure we have a valid email\n\n\n    if (!email || !user.emails || !user.emails.map(mailInfo => mailInfo.address).includes(email)) {\n      Logger.error(\"sendResetPasswordEmail - Email not found\");\n      throw new Meteor.Error(\"not-found\", \"Email not found\");\n    } // Create token for password reset\n\n\n    const token = Random.secret();\n    const when = new Date();\n    const tokenObj = {\n      token,\n      email,\n      when\n    };\n    Meteor.users.update(userId, {\n      $set: {\n        \"services.password.reset\": tokenObj\n      }\n    });\n    Meteor._ensure(user, \"services\", \"password\").reset = tokenObj; // Get shop data for email display\n\n    const shop = Shops.findOne(Reaction.getShopId());\n    const emailLogo = Reaction.Email.getShopLogo(shop);\n    const copyrightDate = new Date().getFullYear();\n    const dataForEmail = {\n      // Shop Data\n      shop,\n      contactEmail: shop.emails[0].address,\n      homepage: Meteor.absoluteUrl(),\n      emailLogo,\n      copyrightDate,\n      legalName: _get(shop, \"addressBook[0].company\"),\n      physicalAddress: {\n        address: `${_get(shop, \"addressBook[0].address1\")} ${_get(shop, \"addressBook[0].address2\")}`,\n        city: _get(shop, \"addressBook[0].city\"),\n        region: _get(shop, \"addressBook[0].region\"),\n        postal: _get(shop, \"addressBook[0].postal\")\n      },\n      shopName: shop.name,\n      socialLinks: {\n        display: true,\n        facebook: {\n          display: true,\n          icon: `${Meteor.absoluteUrl()}resources/email-templates/facebook-icon.png`,\n          link: \"https://www.facebook.com\"\n        },\n        googlePlus: {\n          display: true,\n          icon: `${Meteor.absoluteUrl()}resources/email-templates/google-plus-icon.png`,\n          link: \"https://plus.google.com\"\n        },\n        twitter: {\n          display: true,\n          icon: `${Meteor.absoluteUrl()}resources/email-templates/twitter-icon.png`,\n          link: \"https://www.twitter.com\"\n        }\n      },\n      // Account Data\n      passwordResetUrl: Accounts.urls.resetPassword(token),\n      user\n    }; // Compile Email with SSR\n\n    const tpl = \"accounts/resetPassword\";\n    const subject = \"accounts/resetPassword/subject\";\n    SSR.compileTemplate(tpl, Reaction.Email.getTemplate(tpl));\n    SSR.compileTemplate(subject, Reaction.Email.getSubject(tpl));\n    return Reaction.Email.send({\n      to: email,\n      from: Reaction.getShopEmail(),\n      subject: SSR.render(subject, dataForEmail),\n      html: SSR.render(tpl, dataForEmail)\n    });\n  });\n}\n\nfunction sendVerificationEmail(userId, email) {\n  return Promise.asyncApply(() => {\n    // Make sure the user exists, and email is one of their addresses.\n    const user = Meteor.users.findOne(userId);\n\n    if (!user) {\n      Logger.error(\"sendVerificationEmail - User not found\");\n      throw new Meteor.Error(\"not-found\", \"User not found\");\n    }\n\n    let address = email; // pick the first unverified address if no address provided.\n\n    if (!email) {\n      const unverifiedEmail = _find(user.emails || [], e => !e.verified) || {};\n      ({\n        address\n      } = unverifiedEmail);\n\n      if (!address) {\n        const msg = \"No unverified email addresses found.\";\n        Logger.error(msg);\n        throw new Meteor.Error(\"not-found\", msg);\n      }\n    } // make sure we have a valid address\n\n\n    if (!address || !user.emails || !user.emails.map(mailInfo => mailInfo.address).includes(address)) {\n      const msg = \"Email not found for user\";\n      Logger.error(msg);\n      throw new Meteor.Error(\"not-found\", msg);\n    }\n\n    const token = Random.secret();\n    const when = new Date();\n    const tokenObj = {\n      token,\n      address,\n      when\n    };\n    Meteor.users.update({\n      _id: userId\n    }, {\n      $push: {\n        \"services.email.verificationTokens\": tokenObj\n      }\n    });\n    const shopName = Reaction.getShopName();\n    const url = Accounts.urls.verifyEmail(token);\n    const copyrightDate = new Date().getFullYear();\n    const dataForEmail = {\n      // Reaction Information\n      contactEmail: \"hello@reactioncommerce.com\",\n      homepage: Meteor.absoluteUrl(),\n      emailLogo: `${Meteor.absoluteUrl()}resources/placeholder.gif`,\n      copyrightDate,\n      legalName: \"Reaction Commerce\",\n      physicalAddress: {\n        address: \"2110 Main Street, Suite 207\",\n        city: \"Santa Monica\",\n        region: \"CA\",\n        postal: \"90405\"\n      },\n      shopName,\n      socialLinks: {\n        facebook: {\n          link: \"https://www.facebook.com/reactioncommerce\"\n        },\n        github: {\n          link: \"https://github.com/reactioncommerce/reaction\"\n        },\n        instagram: {\n          link: \"https://instagram.com/reactioncommerce\"\n        },\n        twitter: {\n          link: \"https://www.twitter.com/getreaction\"\n        }\n      },\n      confirmationUrl: url,\n      userEmailAddress: address\n    };\n\n    if (!Reaction.Email.getMailUrl()) {\n      Logger.warn(`\n\n  ***************************************************\n          IMPORTANT! EMAIL VERIFICATION LINK\n\n           Email sending is not configured.\n\n  Go to the following URL to verify email: ${address}\n\n  ${url}\n  ***************************************************\n\n    `);\n    }\n\n    const tpl = \"accounts/verifyEmail\";\n    const subject = \"accounts/verifyEmail/subject\";\n    SSR.compileTemplate(tpl, Reaction.Email.getTemplate(tpl));\n    SSR.compileTemplate(subject, Reaction.Email.getSubject(tpl));\n    return Reaction.Email.send({\n      to: address,\n      from: Reaction.getShopEmail(),\n      subject: SSR.render(subject, dataForEmail),\n      html: SSR.render(tpl, dataForEmail)\n    });\n  });\n}\n\nfunction sendUpdatedVerificationEmail(userId, email) {\n  return Promise.asyncApply(() => {\n    // Make sure the user exists, and email is one of their addresses.\n    const user = Meteor.users.findOne(userId);\n\n    if (!user) {\n      Logger.error(\"sendVerificationEmail - User not found\");\n      throw new Meteor.Error(\"not-found\", \"User not found\");\n    }\n\n    let address = email; // pick the first unverified address if no address provided.\n\n    if (!email) {\n      const unverifiedEmail = _find(user.emails || [], e => !e.verified) || {};\n      ({\n        address\n      } = unverifiedEmail);\n\n      if (!address) {\n        const msg = \"No unverified email addresses found.\";\n        Logger.error(msg);\n        throw new Meteor.Error(\"not-found\", msg);\n      }\n    } // make sure we have a valid address\n\n\n    if (!address || !user.emails || !user.emails.map(mailInfo => mailInfo.address).includes(address)) {\n      const msg = \"Email not found for user\";\n      Logger.error(msg);\n      throw new Meteor.Error(\"not-found\", msg);\n    }\n\n    const token = Random.secret();\n    const when = new Date();\n    const tokenObj = {\n      token,\n      address,\n      when\n    };\n    Meteor.users.update({\n      _id: userId\n    }, {\n      $push: {\n        \"services.email.verificationTokens\": tokenObj\n      }\n    });\n    const shopName = Reaction.getShopName();\n    const url = Accounts.urls.verifyEmail(token);\n    const copyrightDate = new Date().getFullYear();\n    const dataForEmail = {\n      // Reaction Information\n      contactEmail: \"hello@reactioncommerce.com\",\n      homepage: Meteor.absoluteUrl(),\n      emailLogo: `${Meteor.absoluteUrl()}resources/placeholder.gif`,\n      copyrightDate,\n      legalName: \"Reaction Commerce\",\n      physicalAddress: {\n        address: \"2110 Main Street, Suite 207\",\n        city: \"Santa Monica\",\n        region: \"CA\",\n        postal: \"90405\"\n      },\n      shopName,\n      socialLinks: {\n        facebook: {\n          link: \"https://www.facebook.com/reactioncommerce\"\n        },\n        github: {\n          link: \"https://github.com/reactioncommerce/reaction\"\n        },\n        instagram: {\n          link: \"https://instagram.com/reactioncommerce\"\n        },\n        twitter: {\n          link: \"https://www.twitter.com/getreaction\"\n        }\n      },\n      confirmationUrl: url,\n      userEmailAddress: address\n    };\n\n    if (!Reaction.Email.getMailUrl()) {\n      Logger.warn(`\n\n  ***************************************************\n          IMPORTANT! EMAIL VERIFICATION LINK\n\n           Email sending is not configured.\n\n  Go to the following URL to verify email: ${address}\n\n  ${url}\n  ***************************************************\n\n    `);\n    }\n\n    const tpl = \"accounts/verifyUpdatedEmail\";\n    const subject = \"accounts/verifyUpdatedEmail/subject\";\n    SSR.compileTemplate(tpl, Reaction.Email.getTemplate(tpl));\n    SSR.compileTemplate(subject, Reaction.Email.getSubject(tpl));\n    return Reaction.Email.send({\n      to: address,\n      from: Reaction.getShopEmail(),\n      subject: SSR.render(subject, dataForEmail),\n      html: SSR.render(tpl, dataForEmail)\n    });\n  });\n}","map":{"version":3,"sources":["server/api/core/accounts/password.js"],"names":["module","export","sendResetPasswordEmail","sendVerificationEmail","sendUpdatedVerificationEmail","_find","watch","require","default","v","_get","Random","Meteor","Accounts","SSR","Shops","Reaction","Logger","userId","optionalEmail","user","users","findOne","error","Error","email","emails","address","map","mailInfo","includes","token","secret","when","Date","tokenObj","update","$set","_ensure","reset","shop","getShopId","emailLogo","Email","getShopLogo","copyrightDate","getFullYear","dataForEmail","contactEmail","homepage","absoluteUrl","legalName","physicalAddress","city","region","postal","shopName","name","socialLinks","display","facebook","icon","link","googlePlus","twitter","passwordResetUrl","urls","resetPassword","tpl","subject","compileTemplate","getTemplate","getSubject","send","to","from","getShopEmail","render","html","unverifiedEmail","e","verified","msg","_id","$push","getShopName","url","verifyEmail","github","instagram","confirmationUrl","userEmailAddress","getMailUrl","warn"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport { Random } from \"meteor/random\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Accounts } from \"meteor/accounts-base\";\nimport { SSR } from \"meteor/meteorhacks:ssr\";\nimport { Shops } from \"/lib/collections\";\nimport { Reaction, Logger } from \"/server/api\";\n\n/**\n * @method sendResetPasswordEmail\n * @memberof Core\n * @summary Send an email with a link that the user can use to reset their password.\n * @param {String} userId - The id of the user to send email to.\n * @param {String} [optionalEmail] Address to send the email to.\n *                 This address must be in the user's `emails` list.\n *                 Defaults to the first email in the list.\n * @return {Job} - returns a sendEmail Job instance\n */\nexport async function sendResetPasswordEmail(userId, optionalEmail) {\n  // Make sure the user exists, and email is one of their addresses.\n  const user = Meteor.users.findOne(userId);\n\n  if (!user) {\n    Logger.error(\"sendResetPasswordEmail - User not found\");\n    throw new Meteor.Error(\"not-found\", \"User not found\");\n  }\n\n  let email = optionalEmail;\n\n  // pick the first email if we weren't passed an email.\n  if (!optionalEmail && user.emails && user.emails[0]) {\n    email = user.emails[0].address;\n  }\n\n  // make sure we have a valid email\n  if (!email || !user.emails || !user.emails.map((mailInfo) => mailInfo.address).includes(email)) {\n    Logger.error(\"sendResetPasswordEmail - Email not found\");\n    throw new Meteor.Error(\"not-found\", \"Email not found\");\n  }\n\n  // Create token for password reset\n  const token = Random.secret();\n  const when = new Date();\n  const tokenObj = { token, email, when };\n\n  Meteor.users.update(userId, {\n    $set: {\n      \"services.password.reset\": tokenObj\n    }\n  });\n\n  Meteor._ensure(user, \"services\", \"password\").reset = tokenObj;\n\n  // Get shop data for email display\n  const shop = Shops.findOne(Reaction.getShopId());\n  const emailLogo = Reaction.Email.getShopLogo(shop);\n  const copyrightDate = new Date().getFullYear();\n\n  const dataForEmail = {\n    // Shop Data\n    shop,\n    contactEmail: shop.emails[0].address,\n    homepage: Meteor.absoluteUrl(),\n    emailLogo,\n    copyrightDate,\n    legalName: _.get(shop, \"addressBook[0].company\"),\n    physicalAddress: {\n      address: `${_.get(shop, \"addressBook[0].address1\")} ${_.get(shop, \"addressBook[0].address2\")}`,\n      city: _.get(shop, \"addressBook[0].city\"),\n      region: _.get(shop, \"addressBook[0].region\"),\n      postal: _.get(shop, \"addressBook[0].postal\")\n    },\n    shopName: shop.name,\n    socialLinks: {\n      display: true,\n      facebook: {\n        display: true,\n        icon: `${Meteor.absoluteUrl()}resources/email-templates/facebook-icon.png`,\n        link: \"https://www.facebook.com\"\n      },\n      googlePlus: {\n        display: true,\n        icon: `${Meteor.absoluteUrl()}resources/email-templates/google-plus-icon.png`,\n        link: \"https://plus.google.com\"\n      },\n      twitter: {\n        display: true,\n        icon: `${Meteor.absoluteUrl()}resources/email-templates/twitter-icon.png`,\n        link: \"https://www.twitter.com\"\n      }\n    },\n    // Account Data\n    passwordResetUrl: Accounts.urls.resetPassword(token),\n    user\n  };\n\n  // Compile Email with SSR\n  const tpl = \"accounts/resetPassword\";\n  const subject = \"accounts/resetPassword/subject\";\n  SSR.compileTemplate(tpl, Reaction.Email.getTemplate(tpl));\n  SSR.compileTemplate(subject, Reaction.Email.getSubject(tpl));\n\n  return Reaction.Email.send({\n    to: email,\n    from: Reaction.getShopEmail(),\n    subject: SSR.render(subject, dataForEmail),\n    html: SSR.render(tpl, dataForEmail)\n  });\n}\n\n\n/**\n * @method sendVerificationEmail\n * @memberof Core\n * @summary Send an email with a link the user can use verify their email address.\n * @param {String} userId - The id of the user to send email to.\n * @param {String} [email] Optional. Address to send the email to.\n *                 This address must be in the user's emails list.\n *                 Defaults to the first unverified email in the list.\n * @return {Job} - returns a sendEmail Job instance\n */\nexport async function sendVerificationEmail(userId, email) {\n  // Make sure the user exists, and email is one of their addresses.\n  const user = Meteor.users.findOne(userId);\n\n  if (!user) {\n    Logger.error(\"sendVerificationEmail - User not found\");\n    throw new Meteor.Error(\"not-found\", \"User not found\");\n  }\n\n  let address = email;\n\n  // pick the first unverified address if no address provided.\n  if (!email) {\n    const unverifiedEmail = _.find(user.emails || [], (e) => !e.verified) || {};\n\n    ({ address } = unverifiedEmail);\n\n    if (!address) {\n      const msg = \"No unverified email addresses found.\";\n      Logger.error(msg);\n      throw new Meteor.Error(\"not-found\", msg);\n    }\n  }\n\n  // make sure we have a valid address\n  if (!address || !user.emails || !(user.emails.map((mailInfo) => mailInfo.address).includes(address))) {\n    const msg = \"Email not found for user\";\n    Logger.error(msg);\n    throw new Meteor.Error(\"not-found\", msg);\n  }\n\n  const token = Random.secret();\n  const when = new Date();\n  const tokenObj = { token, address, when };\n\n  Meteor.users.update({ _id: userId }, {\n    $push: {\n      \"services.email.verificationTokens\": tokenObj\n    }\n  });\n\n  const shopName = Reaction.getShopName();\n  const url = Accounts.urls.verifyEmail(token);\n  const copyrightDate = new Date().getFullYear();\n\n  const dataForEmail = {\n    // Reaction Information\n    contactEmail: \"hello@reactioncommerce.com\",\n    homepage: Meteor.absoluteUrl(),\n    emailLogo: `${Meteor.absoluteUrl()}resources/placeholder.gif`,\n    copyrightDate,\n    legalName: \"Reaction Commerce\",\n    physicalAddress: {\n      address: \"2110 Main Street, Suite 207\",\n      city: \"Santa Monica\",\n      region: \"CA\",\n      postal: \"90405\"\n    },\n    shopName,\n    socialLinks: {\n      facebook: {\n        link: \"https://www.facebook.com/reactioncommerce\"\n      },\n      github: {\n        link: \"https://github.com/reactioncommerce/reaction\"\n      },\n      instagram: {\n        link: \"https://instagram.com/reactioncommerce\"\n      },\n      twitter: {\n        link: \"https://www.twitter.com/getreaction\"\n      }\n    },\n    confirmationUrl: url,\n    userEmailAddress: address\n  };\n\n  if (!Reaction.Email.getMailUrl()) {\n    Logger.warn(`\n\n  ***************************************************\n          IMPORTANT! EMAIL VERIFICATION LINK\n\n           Email sending is not configured.\n\n  Go to the following URL to verify email: ${address}\n\n  ${url}\n  ***************************************************\n\n    `);\n  }\n\n  const tpl = \"accounts/verifyEmail\";\n  const subject = \"accounts/verifyEmail/subject\";\n\n  SSR.compileTemplate(tpl, Reaction.Email.getTemplate(tpl));\n  SSR.compileTemplate(subject, Reaction.Email.getSubject(tpl));\n\n  return Reaction.Email.send({\n    to: address,\n    from: Reaction.getShopEmail(),\n    subject: SSR.render(subject, dataForEmail),\n    html: SSR.render(tpl, dataForEmail)\n  });\n}\n\n\n/**\n * @method sendUpdatedVerificationEmail\n * @memberof Core\n * @summary Send an email with a link the user can use to verify their updated email address.\n * @param {String} userId - The id of the user to send email to.\n * @param {String} [email] Optional. Address to send the email to.\n *                 This address must be in the user's emails list.\n *                 Defaults to the first unverified email in the list.\n * @return {Job} - returns a sendEmail Job instance\n */\nexport async function sendUpdatedVerificationEmail(userId, email) {\n  // Make sure the user exists, and email is one of their addresses.\n  const user = Meteor.users.findOne(userId);\n\n  if (!user) {\n    Logger.error(\"sendVerificationEmail - User not found\");\n    throw new Meteor.Error(\"not-found\", \"User not found\");\n  }\n\n  let address = email;\n\n  // pick the first unverified address if no address provided.\n  if (!email) {\n    const unverifiedEmail = _.find(user.emails || [], (e) => !e.verified) || {};\n\n    ({ address } = unverifiedEmail);\n\n    if (!address) {\n      const msg = \"No unverified email addresses found.\";\n      Logger.error(msg);\n      throw new Meteor.Error(\"not-found\", msg);\n    }\n  }\n\n  // make sure we have a valid address\n  if (!address || !user.emails || !(user.emails.map((mailInfo) => mailInfo.address).includes(address))) {\n    const msg = \"Email not found for user\";\n    Logger.error(msg);\n    throw new Meteor.Error(\"not-found\", msg);\n  }\n\n  const token = Random.secret();\n  const when = new Date();\n  const tokenObj = { token, address, when };\n\n  Meteor.users.update({ _id: userId }, {\n    $push: {\n      \"services.email.verificationTokens\": tokenObj\n    }\n  });\n\n  const shopName = Reaction.getShopName();\n  const url = Accounts.urls.verifyEmail(token);\n  const copyrightDate = new Date().getFullYear();\n\n  const dataForEmail = {\n    // Reaction Information\n    contactEmail: \"hello@reactioncommerce.com\",\n    homepage: Meteor.absoluteUrl(),\n    emailLogo: `${Meteor.absoluteUrl()}resources/placeholder.gif`,\n    copyrightDate,\n    legalName: \"Reaction Commerce\",\n    physicalAddress: {\n      address: \"2110 Main Street, Suite 207\",\n      city: \"Santa Monica\",\n      region: \"CA\",\n      postal: \"90405\"\n    },\n    shopName,\n    socialLinks: {\n      facebook: {\n        link: \"https://www.facebook.com/reactioncommerce\"\n      },\n      github: {\n        link: \"https://github.com/reactioncommerce/reaction\"\n      },\n      instagram: {\n        link: \"https://instagram.com/reactioncommerce\"\n      },\n      twitter: {\n        link: \"https://www.twitter.com/getreaction\"\n      }\n    },\n    confirmationUrl: url,\n    userEmailAddress: address\n  };\n\n  if (!Reaction.Email.getMailUrl()) {\n    Logger.warn(`\n\n  ***************************************************\n          IMPORTANT! EMAIL VERIFICATION LINK\n\n           Email sending is not configured.\n\n  Go to the following URL to verify email: ${address}\n\n  ${url}\n  ***************************************************\n\n    `);\n  }\n\n  const tpl = \"accounts/verifyUpdatedEmail\";\n  const subject = \"accounts/verifyUpdatedEmail/subject\";\n\n  SSR.compileTemplate(tpl, Reaction.Email.getTemplate(tpl));\n  SSR.compileTemplate(subject, Reaction.Email.getSubject(tpl));\n\n  return Reaction.Email.send({\n    to: address,\n    from: Reaction.getShopEmail(),\n    subject: SSR.render(subject, dataForEmail),\n    html: SSR.render(tpl, dataForEmail)\n  });\n}\n"]},"sourceType":"script","hash":"5da4527896963f208d5183a1bd336e5217811ba8"}
