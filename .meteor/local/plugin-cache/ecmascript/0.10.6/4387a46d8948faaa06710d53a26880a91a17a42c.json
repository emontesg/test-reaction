{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/included/shipping-shippo/server/lib/shippoApiSchema.js","filename":"imports/plugins/included/shipping-shippo/server/lib/shippoApiSchema.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/included/shipping-shippo/server/lib/shippoApiSchema.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/included/shipping-shippo/server/lib/shippoApiSchema.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/included/shipping-shippo/server/lib/shippoApiSchema.js"}},"code":"module.export({\n  addressSchema: () => addressSchema,\n  purchaseAddressSchema: () => purchaseAddressSchema,\n  parcelSchema: () => parcelSchema\n});\nlet SimpleSchema;\nmodule.watch(require(\"simpl-schema\"), {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet Tracker;\nmodule.watch(require(\"meteor/tracker\"), {\n  Tracker(v) {\n    Tracker = v;\n  }\n\n}, 2);\nlet registerSchema;\nmodule.watch(require(\"@reactioncommerce/schemas\"), {\n  registerSchema(v) {\n    registerSchema = v;\n  }\n\n}, 3);\nconst addressSchema = new SimpleSchema({\n  object_purpose: {\n    type: String,\n    allowedValues: [\"QUOTE\", \"PURCHASE\"]\n  },\n  name: {\n    type: String,\n    optional: true\n  },\n  company: {\n    type: String,\n    optional: true\n  },\n  street1: {\n    type: String,\n    optional: true\n  },\n  street_no: {\n    type: String,\n    optional: true\n  },\n  // only needed for DHL , the others get it from street1\n  street2: {\n    type: String,\n    optional: true\n  },\n  city: {\n    type: String,\n    optional: true\n  },\n  state: {\n    type: String,\n    optional: true\n  },\n  zip: {\n    type: String,\n    optional: true\n  },\n  country: {\n    type: String\n  },\n  // maybe iso 2\n  phone: {\n    type: String,\n    optional: true\n  },\n  email: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email,\n    optional: true\n  },\n  is_residential: {\n    type: Boolean,\n    optional: true\n  },\n  validate: {\n    type: Boolean,\n    optional: true\n  },\n  metadata: {\n    type: String,\n    optional: true\n  }\n}, {\n  check,\n  tracker: Tracker\n});\nregisterSchema(\"addressSchema\", addressSchema); // Overrides the properties required for purchasing labels/shipping.\n// we don't override the purpose because for some cases like getRatesForCart we don't want to\n// purchase Labels(purpose=\"QUOTE\" but we want all the fields required for purchasing to be present.\n\nconst purchaseAddressSchema = addressSchema.clone().extend({\n  name: String,\n  street1: String,\n  city: String,\n  state: String,\n  zip: String,\n  phone: String,\n  email: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email,\n    optional: true\n  }\n});\nregisterSchema(\"purchaseAddressSchema\", purchaseAddressSchema);\nconst parcelSchema = new SimpleSchema({\n  length: {\n    type: Number,\n    min: 0.0001\n  },\n  width: {\n    type: Number,\n    min: 0.0001\n  },\n  height: {\n    type: Number,\n    min: 0.0001\n  },\n  distance_unit: {\n    type: String,\n    allowedValues: [\"cm\", \"in\", \"ft\", \"mm\", \"m\", \"yd\"]\n  },\n  weight: {\n    type: Number,\n    min: 0.0001\n  },\n  mass_unit: {\n    type: String,\n    allowedValues: [\"g\", \"oz\", \"lb\", \"kg\"]\n  },\n  template: {\n    type: String,\n    optional: true\n  },\n  extra: {\n    type: Object,\n    optional: true\n  },\n  metadata: {\n    type: String,\n    optional: true\n  }\n}, {\n  check,\n  tracker: Tracker\n});\nregisterSchema(\"parcelSchema\", parcelSchema);","map":{"version":3,"sources":["imports/plugins/included/shipping-shippo/server/lib/shippoApiSchema.js"],"names":["module","export","addressSchema","purchaseAddressSchema","parcelSchema","SimpleSchema","watch","require","default","v","check","Tracker","registerSchema","object_purpose","type","String","allowedValues","name","optional","company","street1","street_no","street2","city","state","zip","country","phone","email","regEx","RegEx","Email","is_residential","Boolean","validate","metadata","tracker","clone","extend","length","Number","min","width","height","distance_unit","weight","mass_unit","template","extra","Object"],"mappings":"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","sourcesContent":["/* eslint camelcase: 0 */\nimport SimpleSchema from \"simpl-schema\";\nimport { check } from \"meteor/check\";\nimport { Tracker } from \"meteor/tracker\";\nimport { registerSchema } from \"@reactioncommerce/schemas\";\n\nexport const addressSchema = new SimpleSchema({\n  object_purpose: { type: String, allowedValues: [\"QUOTE\", \"PURCHASE\"] },\n  name: { type: String, optional: true },\n  company: { type: String, optional: true },\n  street1: { type: String, optional: true },\n  street_no: { type: String, optional: true }, // only needed for DHL , the others get it from street1\n  street2: { type: String, optional: true },\n  city: { type: String, optional: true },\n  state: { type: String, optional: true },\n  zip: { type: String, optional: true },\n  country: { type: String }, // maybe iso 2\n  phone: { type: String, optional: true },\n  email: { type: String, regEx: SimpleSchema.RegEx.Email, optional: true },\n  is_residential: { type: Boolean, optional: true },\n  validate: { type: Boolean, optional: true },\n  metadata: { type: String, optional: true }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"addressSchema\", addressSchema);\n\n// Overrides the properties required for purchasing labels/shipping.\n// we don't override the purpose because for some cases like getRatesForCart we don't want to\n// purchase Labels(purpose=\"QUOTE\" but we want all the fields required for purchasing to be present.\nexport const purchaseAddressSchema = addressSchema.clone().extend({\n  name: String,\n  street1: String,\n  city: String,\n  state: String,\n  zip: String,\n  phone: String,\n  email: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email,\n    optional: true\n  }\n});\n\nregisterSchema(\"purchaseAddressSchema\", purchaseAddressSchema);\n\nexport const parcelSchema = new SimpleSchema({\n  length: { type: Number, min: 0.0001 },\n  width: { type: Number, min: 0.0001 },\n  height: { type: Number, min: 0.0001 },\n  distance_unit: { type: String, allowedValues: [\"cm\", \"in\", \"ft\", \"mm\", \"m\", \"yd\"] },\n  weight: { type: Number, min: 0.0001 },\n  mass_unit: { type: String, allowedValues: [\"g\", \"oz\", \"lb\", \"kg\"] },\n  template: { type: String, optional: true },\n  extra: { type: Object, optional: true },\n  metadata: { type: String, optional: true }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"parcelSchema\", parcelSchema);\n"]},"sourceType":"script","hash":"4387a46d8948faaa06710d53a26880a91a17a42c"}
