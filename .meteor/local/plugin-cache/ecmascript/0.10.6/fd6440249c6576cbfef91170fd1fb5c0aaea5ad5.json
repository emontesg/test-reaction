{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"server/api/core/assignRoles.js","filename":"server/api/core/assignRoles.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"server/api/core/assignRoles.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"server/api/core/assignRoles.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/api/core/assignRoles.js"}},"code":"module.export({\n  assignOwnerRoles: () => assignOwnerRoles\n});\n\nlet _uniq;\n\nmodule.watch(require(\"lodash/uniq\"), {\n  default(v) {\n    _uniq = v;\n  }\n\n}, 0);\nlet Roles;\nmodule.watch(require(\"meteor/alanning:roles\"), {\n  Roles(v) {\n    Roles = v;\n  }\n\n}, 1);\nlet Logger;\nmodule.watch(require(\"./..\"), {\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 2);\n\n/**\n * @name getRouteName\n * @method\n * @memberof Core\n * @private\n * @summary assemble route name to be standard\n * this is duplicate that exists in Reaction.Router\n * however this is to avoid a dependency in core\n * on the router\n * prefix/package name + registry name or route\n * @param  {string} packageName  [package name]\n * @param  {object} registryItem [registry object]\n * @return {String}              [route name]\n */\nfunction getRouteName(packageName, registryItem) {\n  let routeName;\n\n  if (packageName && registryItem) {\n    if (registryItem.name) {\n      routeName = registryItem.name;\n    } else if (registryItem.template) {\n      routeName = `${packageName}/${registryItem.template}`;\n    } else {\n      routeName = `${packageName}`;\n    } // dont include params in the name\n\n\n    [routeName] = routeName.split(\":\");\n    return routeName;\n  }\n\n  return null;\n}\n/**\n * @name assignOwnerRoles\n * @method\n * @memberof Core\n * @summary populate roles with all the packages and their permissions\n * this is the main way that roles are inserted and created for\n * admin user.\n * we assign all package roles to each owner account for each shopId\n * we assign only basic GLOBAL_GROUP rights\n *\n * @param  {String} shopId - shopId\n * @param  {String} pkgName - Package name\n * @param  {String} registry - registry object\n * @return {undefined}\n */\n\n\nfunction assignOwnerRoles(shopId, pkgName, registry) {\n  const defaultRoles = [\"owner\", \"admin\", \"createProduct\", \"guest\", pkgName];\n  const globalRoles = defaultRoles;\n\n  if (registry) {\n    // for each registry item define and push roles\n    for (const registryItem of registry) {\n      // packages don't need to define specific permission routes.,\n      // the routeName will be used as default roleName for each route.\n      // todo: check dependency on this.\n      const roleName = getRouteName(pkgName, registryItem);\n\n      if (roleName) {\n        defaultRoles.push(roleName);\n      } // Get all defined permissions, add them to an array\n      // define permissions if you need to check custom permission\n\n\n      if (registryItem.permissions) {\n        for (const permission of registryItem.permissions) {\n          // A wrong value in permissions (ie. [String] instead of [Object] in any plugin register.js\n          // results in an undefined element in defaultRoles Array\n          // an undefined value would make Roles.getUsersInRole(defaultRoles) return ALL users\n          if (permission && typeof permission.permission === \"string\" && permission.permission.length) {\n            defaultRoles.push(permission.permission);\n          }\n        }\n      }\n    }\n  } else {\n    Logger.debug(`No routes loaded for ${pkgName}`);\n  } // only unique roles\n\n\n  const defaultOwnerRoles = _uniq(defaultRoles); // get existing shop owners to add new roles to\n\n\n  const owners = [];\n  const shopOwners = Roles.getUsersInRole(defaultOwnerRoles).fetch(); // just a nice warning. something is misconfigured.\n\n  if (!shopOwners) {\n    Logger.warn(\"Cannot assign roles without existing owner users.\");\n    return;\n  } // assign this package permission to each existing owner.\n\n\n  for (const account of shopOwners) {\n    owners.push(account._id);\n  } // we don't use accounts/addUserPermissions here because we may not yet have permissions\n\n\n  Roles.addUsersToRoles(owners, defaultOwnerRoles, shopId); // the reaction owner has permissions to all sites by default\n\n  Roles.addUsersToRoles(owners, globalRoles, Roles.GLOBAL_GROUP);\n  Logger.debug(`Owner permissions added for ${pkgName}`);\n}","map":{"version":3,"sources":["server/api/core/assignRoles.js"],"names":["module","export","assignOwnerRoles","_uniq","watch","require","default","v","Roles","Logger","getRouteName","packageName","registryItem","routeName","name","template","split","shopId","pkgName","registry","defaultRoles","globalRoles","roleName","push","permissions","permission","length","debug","defaultOwnerRoles","owners","shopOwners","getUsersInRole","fetch","warn","account","_id","addUsersToRoles","GLOBAL_GROUP"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport { Roles } from \"meteor/alanning:roles\";\nimport { Logger } from \"/server/api\";\n\n/**\n * @name getRouteName\n * @method\n * @memberof Core\n * @private\n * @summary assemble route name to be standard\n * this is duplicate that exists in Reaction.Router\n * however this is to avoid a dependency in core\n * on the router\n * prefix/package name + registry name or route\n * @param  {string} packageName  [package name]\n * @param  {object} registryItem [registry object]\n * @return {String}              [route name]\n */\nfunction getRouteName(packageName, registryItem) {\n  let routeName;\n  if (packageName && registryItem) {\n    if (registryItem.name) {\n      routeName = registryItem.name;\n    } else if (registryItem.template) {\n      routeName = `${packageName}/${registryItem.template}`;\n    } else {\n      routeName = `${packageName}`;\n    }\n    // dont include params in the name\n    [routeName] = routeName.split(\":\");\n    return routeName;\n  }\n  return null;\n}\n\n\n/**\n * @name assignOwnerRoles\n * @method\n * @memberof Core\n * @summary populate roles with all the packages and their permissions\n * this is the main way that roles are inserted and created for\n * admin user.\n * we assign all package roles to each owner account for each shopId\n * we assign only basic GLOBAL_GROUP rights\n *\n * @param  {String} shopId - shopId\n * @param  {String} pkgName - Package name\n * @param  {String} registry - registry object\n * @return {undefined}\n */\nexport function assignOwnerRoles(shopId, pkgName, registry) {\n  const defaultRoles = [\"owner\", \"admin\", \"createProduct\", \"guest\", pkgName];\n  const globalRoles = defaultRoles;\n\n  if (registry) {\n    // for each registry item define and push roles\n    for (const registryItem of registry) {\n      // packages don't need to define specific permission routes.,\n      // the routeName will be used as default roleName for each route.\n      // todo: check dependency on this.\n      const roleName = getRouteName(pkgName, registryItem);\n      if (roleName) {\n        defaultRoles.push(roleName);\n      }\n\n      // Get all defined permissions, add them to an array\n      // define permissions if you need to check custom permission\n      if (registryItem.permissions) {\n        for (const permission of registryItem.permissions) {\n          // A wrong value in permissions (ie. [String] instead of [Object] in any plugin register.js\n          // results in an undefined element in defaultRoles Array\n          // an undefined value would make Roles.getUsersInRole(defaultRoles) return ALL users\n          if (permission && typeof permission.permission === \"string\" && permission.permission.length) {\n            defaultRoles.push(permission.permission);\n          }\n        }\n      }\n    }\n  } else {\n    Logger.debug(`No routes loaded for ${pkgName}`);\n  }\n  // only unique roles\n  const defaultOwnerRoles = _.uniq(defaultRoles);\n  // get existing shop owners to add new roles to\n  const owners = [];\n  const shopOwners = Roles.getUsersInRole(defaultOwnerRoles).fetch();\n  // just a nice warning. something is misconfigured.\n  if (!shopOwners) {\n    Logger.warn(\"Cannot assign roles without existing owner users.\");\n    return;\n  }\n  // assign this package permission to each existing owner.\n  for (const account of shopOwners) {\n    owners.push(account._id);\n  }\n  // we don't use accounts/addUserPermissions here because we may not yet have permissions\n  Roles.addUsersToRoles(owners, defaultOwnerRoles, shopId);\n\n  // the reaction owner has permissions to all sites by default\n  Roles.addUsersToRoles(owners, globalRoles, Roles.GLOBAL_GROUP);\n\n  Logger.debug(`Owner permissions added for ${pkgName}`);\n}\n"]},"sourceType":"script","hash":"fd6440249c6576cbfef91170fd1fb5c0aaea5ad5"}
