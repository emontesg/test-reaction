{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/core/graphql/server/resolvers/xforms/id.js","filename":"imports/plugins/core/graphql/server/resolvers/xforms/id.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/core/graphql/server/resolvers/xforms/id.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/core/graphql/server/resolvers/xforms/id.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/core/graphql/server/resolvers/xforms/id.js"}},"code":"module.export({\n  encodeOpaqueId: () => encodeOpaqueId,\n  decodeOpaqueId: () => decodeOpaqueId,\n  decodeOpaqueIdForNamespace: () => decodeOpaqueIdForNamespace,\n  assocOpaqueId: () => assocOpaqueId,\n  assocInternalId: () => assocInternalId\n});\nlet assoc, curry;\nmodule.watch(require(\"ramda\"), {\n  assoc(v) {\n    assoc = v;\n  },\n\n  curry(v) {\n    curry = v;\n  }\n\n}, 0);\nconst encodeOpaqueId = curry((namespace, id) => {\n  if (typeof id !== \"string\" && typeof id !== \"number\") return id;\n  const unencoded = `${namespace}:${id}`;\n  return Buffer.from(unencoded).toString(\"base64\");\n});\n\nconst decodeOpaqueId = opaqueId => {\n  if (opaqueId === undefined || opaqueId === null) return null;\n  const unencoded = Buffer.from(opaqueId, \"base64\").toString(\"utf8\");\n  const [namespace, id] = unencoded.split(\":\");\n  return {\n    namespace,\n    id\n  };\n};\n\nconst decodeOpaqueIdForNamespace = curry((namespace, opaqueId, error = new Error(`ID namespace must be ${namespace}`)) => {\n  const decodedId = decodeOpaqueId(opaqueId);\n  if (!decodedId) return null;\n  const {\n    namespace: actualNamespace,\n    id\n  } = decodedId;\n  if (actualNamespace !== namespace) throw error;\n  return id;\n});\nconst assocOpaqueId = curry((namespace, item) => assoc(\"_id\", encodeOpaqueId(namespace, item._id), item));\nconst assocInternalId = curry((namespace, item) => assoc(\"_id\", decodeOpaqueIdForNamespace(namespace, item._id), item));","map":{"version":3,"sources":["imports/plugins/core/graphql/server/resolvers/xforms/id.js"],"names":["module","export","encodeOpaqueId","decodeOpaqueId","decodeOpaqueIdForNamespace","assocOpaqueId","assocInternalId","assoc","curry","watch","require","v","namespace","id","unencoded","Buffer","from","toString","opaqueId","undefined","split","error","Error","decodedId","actualNamespace","item","_id"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,kBAAe,MAAIA,cAApB;AAAmCC,kBAAe,MAAIA,cAAtD;AAAqEC,8BAA2B,MAAIA,0BAApG;AAA+HC,iBAAc,MAAIA,aAAjJ;AAA+JC,mBAAgB,MAAIA;AAAnL,CAAd;AAAmN,IAAIC,KAAJ,EAAUC,KAAV;AAAgBR,OAAOS,KAAP,CAAaC,QAAQ,OAAR,CAAb,EAA8B;AAACH,QAAMI,CAAN,EAAQ;AAACJ,YAAMI,CAAN;AAAQ,GAAlB;;AAAmBH,QAAMG,CAAN,EAAQ;AAACH,YAAMG,CAAN;AAAQ;;AAApC,CAA9B,EAAoE,CAApE;AAQ5N,MAAMT,iBAAiBM,MAAM,CAACI,SAAD,EAAYC,EAAZ,KAAmB;AACrD,MAAI,OAAOA,EAAP,KAAc,QAAd,IAA0B,OAAOA,EAAP,KAAc,QAA5C,EAAsD,OAAOA,EAAP;AACtD,QAAMC,YAAa,GAAEF,SAAU,IAAGC,EAAG,EAArC;AACA,SAAOE,OAAOC,IAAP,CAAYF,SAAZ,EAAuBG,QAAvB,CAAgC,QAAhC,CAAP;AACD,CAJ6B,CAAvB;;AAWA,MAAMd,iBAAkBe,QAAD,IAAc;AAC1C,MAAIA,aAAaC,SAAb,IAA0BD,aAAa,IAA3C,EAAiD,OAAO,IAAP;AACjD,QAAMJ,YAAYC,OAAOC,IAAP,CAAYE,QAAZ,EAAsB,QAAtB,EAAgCD,QAAhC,CAAyC,MAAzC,CAAlB;AACA,QAAM,CAACL,SAAD,EAAYC,EAAZ,IAAkBC,UAAUM,KAAV,CAAgB,GAAhB,CAAxB;AACA,SAAO;AAAER,aAAF;AAAaC;AAAb,GAAP;AACD,CALM;;AAaA,MAAMT,6BAA6BI,MAAM,CAACI,SAAD,EAAYM,QAAZ,EAAsBG,QAAQ,IAAIC,KAAJ,CAAW,wBAAuBV,SAAU,EAA5C,CAA9B,KAAiF;AAC/H,QAAMW,YAAYpB,eAAee,QAAf,CAAlB;AACA,MAAI,CAACK,SAAL,EAAgB,OAAO,IAAP;AAChB,QAAM;AAAEX,eAAWY,eAAb;AAA8BX;AAA9B,MAAqCU,SAA3C;AACA,MAAIC,oBAAoBZ,SAAxB,EAAmC,MAAMS,KAAN;AACnC,SAAOR,EAAP;AACD,CANyC,CAAnC;AAcA,MAAMR,gBAAgBG,MAAM,CAACI,SAAD,EAAYa,IAAZ,KACjClB,MAAM,KAAN,EAAaL,eAAeU,SAAf,EAA0Ba,KAAKC,GAA/B,CAAb,EAAkDD,IAAlD,CAD2B,CAAtB;AASA,MAAMnB,kBAAkBE,MAAM,CAACI,SAAD,EAAYa,IAAZ,KACnClB,MAAM,KAAN,EAAaH,2BAA2BQ,SAA3B,EAAsCa,KAAKC,GAA3C,CAAb,EAA8DD,IAA9D,CAD6B,CAAxB","sourcesContent":["import { assoc, curry } from \"ramda\";\n\n/**\n * @summary Transforms an internal ID to an opaque ID\n * @param {String} namespace The namespace of the ID\n * @param {String} id The ID to transform\n * @returns {String} An opaque ID\n */\nexport const encodeOpaqueId = curry((namespace, id) => {\n  if (typeof id !== \"string\" && typeof id !== \"number\") return id;\n  const unencoded = `${namespace}:${id}`;\n  return Buffer.from(unencoded).toString(\"base64\");\n});\n\n/**\n * @summary Transforms an opaque ID to an internal ID\n * @param {String} opaqueId The ID to transform\n * @returns {String} An internal ID\n */\nexport const decodeOpaqueId = (opaqueId) => {\n  if (opaqueId === undefined || opaqueId === null) return null;\n  const unencoded = Buffer.from(opaqueId, \"base64\").toString(\"utf8\");\n  const [namespace, id] = unencoded.split(\":\");\n  return { namespace, id };\n};\n\n/**\n * @summary Transforms an opaque ID to an internal ID, throwing an error if the namespace is wrong\n * @param {String} namespace The namespace that you expect the decoded ID to have\n * @param {String} opaqueId The ID to transform\n * @returns {String} An internal ID\n */\nexport const decodeOpaqueIdForNamespace = curry((namespace, opaqueId, error = new Error(`ID namespace must be ${namespace}`)) => {\n  const decodedId = decodeOpaqueId(opaqueId);\n  if (!decodedId) return null;\n  const { namespace: actualNamespace, id } = decodedId;\n  if (actualNamespace !== namespace) throw error;\n  return id;\n});\n\n/**\n * @summary Assoc an opaque ID onto an object by transforming its existing _id\n *   Assumes key is _id but key could be provided as another curried param.\n * @param {String} namespace The namespace\n * @param {Object} item An object with _id property\n */\nexport const assocOpaqueId = curry((namespace, item) =>\n  assoc(\"_id\", encodeOpaqueId(namespace, item._id), item));\n\n/**\n * @summary Assoc an internal ID onto an object by decoding its existing opaque _id\n *   Assumes key is _id but key could be provided as another curried param.\n * @param {String} namespace The namespace\n * @param {Object} item An object with _id property\n */\nexport const assocInternalId = curry((namespace, item) =>\n  assoc(\"_id\", decodeOpaqueIdForNamespace(namespace, item._id), item));\n"]},"sourceType":"script","hash":"38cb433bfccc304f5435206ce58d64d92064b2a7"}
