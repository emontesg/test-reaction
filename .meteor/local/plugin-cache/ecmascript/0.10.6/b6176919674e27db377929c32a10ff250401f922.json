{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/included/payments-braintree/server/methods/braintreeMethods.js","filename":"imports/plugins/included/payments-braintree/server/methods/braintreeMethods.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/included/payments-braintree/server/methods/braintreeMethods.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/included/payments-braintree/server/methods/braintreeMethods.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/included/payments-braintree/server/methods/braintreeMethods.js"}},"code":"module.export({\n  paymentSubmit: () => paymentSubmit,\n  paymentCapture: () => paymentCapture,\n  createRefund: () => createRefund,\n  listRefunds: () => listRefunds\n});\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 0);\nlet BraintreeApi;\nmodule.watch(require(\"./braintreeApi\"), {\n  BraintreeApi(v) {\n    BraintreeApi = v;\n  }\n\n}, 1);\nlet Logger;\nmodule.watch(require(\"../../../../../../server/api\"), {\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 2);\nlet PaymentMethodArgument;\nmodule.watch(require(\"../../../../../../lib/collections/schemas\"), {\n  PaymentMethodArgument(v) {\n    PaymentMethodArgument = v;\n  }\n\n}, 3);\n\nfunction paymentSubmit(transactionType, cardData, paymentData) {\n  check(transactionType, String);\n  check(cardData, {\n    name: String,\n    number: String,\n    expirationMonth: String,\n    expirationYear: String,\n    cvv2: String,\n    type: String\n  });\n  check(paymentData, {\n    total: String,\n    currency: String\n  });\n  const paymentSubmitDetails = {\n    transactionType,\n    cardData,\n    paymentData\n  };\n  let result;\n\n  try {\n    const paymentSubmitResult = BraintreeApi.apiCall.paymentSubmit(paymentSubmitDetails);\n    Logger.debug(paymentSubmitResult);\n    result = paymentSubmitResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot Submit Payment: ${error.message}`\n    };\n    Logger.fatal(\"Braintree call failed, payment was not submitted\");\n  }\n\n  return result;\n}\n\nfunction paymentCapture(paymentMethod) {\n  // Call both check and validate because by calling `clean`, the audit pkg\n  // thinks that we haven't checked paymentMethod arg\n  check(paymentMethod, Object);\n  PaymentMethodArgument.validate(PaymentMethodArgument.clean(paymentMethod));\n  const paymentCaptureDetails = {\n    transactionId: paymentMethod.transactionId,\n    amount: paymentMethod.amount\n  };\n  let result;\n\n  try {\n    const paymentCaptureResult = BraintreeApi.apiCall.captureCharge(paymentCaptureDetails);\n    Logger.debug(paymentCaptureResult);\n    result = paymentCaptureResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot Capture Payment: ${error.message}`\n    };\n    Logger.fatal(\"Braintree call failed, payment was not captured\");\n  }\n\n  return result;\n}\n\nfunction createRefund(paymentMethod, amount) {\n  check(amount, Number); // Call both check and validate because by calling `clean`, the audit pkg\n  // thinks that we haven't checked paymentMethod arg\n\n  check(paymentMethod, Object);\n  PaymentMethodArgument.validate(PaymentMethodArgument.clean(paymentMethod));\n  const refundDetails = {\n    transactionId: paymentMethod.transactionId,\n    amount\n  };\n  let result;\n\n  try {\n    const refundResult = BraintreeApi.apiCall.createRefund(refundDetails);\n    Logger.debug(refundResult);\n    result = refundResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot issue refund: ${error.message}`\n    };\n    Logger.fatal(\"Braintree call failed, refund was not issued\");\n  }\n\n  return result;\n}\n\nfunction listRefunds(paymentMethod) {\n  check(paymentMethod, Object);\n  const refundListDetails = {\n    transactionId: paymentMethod.transactionId\n  };\n  let result;\n\n  try {\n    const refundListResult = BraintreeApi.apiCall.listRefunds(refundListDetails);\n    Logger.debug(refundListResult);\n    result = refundListResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot list refunds: ${error.message}`\n    };\n    Logger.fatal(\"Braintree call failed, refunds not listed\");\n  }\n\n  return result;\n}","map":{"version":3,"sources":["imports/plugins/included/payments-braintree/server/methods/braintreeMethods.js"],"names":["module","export","paymentSubmit","paymentCapture","createRefund","listRefunds","check","watch","require","v","BraintreeApi","Logger","PaymentMethodArgument","transactionType","cardData","paymentData","String","name","number","expirationMonth","expirationYear","cvv2","type","total","currency","paymentSubmitDetails","result","paymentSubmitResult","apiCall","debug","error","saved","message","fatal","paymentMethod","Object","validate","clean","paymentCaptureDetails","transactionId","amount","paymentCaptureResult","captureCharge","Number","refundDetails","refundResult","refundListDetails","refundListResult"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,iBAAc,MAAIA,aAAnB;AAAiCC,kBAAe,MAAIA,cAApD;AAAmEC,gBAAa,MAAIA,YAApF;AAAiGC,eAAY,MAAIA;AAAjH,CAAd;AAA6I,IAAIC,KAAJ;AAAUN,OAAOO,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACF,QAAMG,CAAN,EAAQ;AAACH,YAAMG,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAA4D,IAAIC,YAAJ;AAAiBV,OAAOO,KAAP,CAAaC,QAAQ,gBAAR,CAAb,EAAuC;AAACE,eAAaD,CAAb,EAAe;AAACC,mBAAaD,CAAb;AAAe;;AAAhC,CAAvC,EAAyE,CAAzE;AAA4E,IAAIE,MAAJ;AAAWX,OAAOO,KAAP,CAAaC,QAAQ,8BAAR,CAAb,EAAqD;AAACG,SAAOF,CAAP,EAAS;AAACE,aAAOF,CAAP;AAAS;;AAApB,CAArD,EAA2E,CAA3E;AAA8E,IAAIG,qBAAJ;AAA0BZ,OAAOO,KAAP,CAAaC,QAAQ,2CAAR,CAAb,EAAkE;AAACI,wBAAsBH,CAAtB,EAAwB;AAACG,4BAAsBH,CAAtB;AAAwB;;AAAlD,CAAlE,EAAsH,CAAtH;;AAc5Z,SAASP,aAAT,CAAuBW,eAAvB,EAAwCC,QAAxC,EAAkDC,WAAlD,EAA+D;AACpET,QAAMO,eAAN,EAAuBG,MAAvB;AACAV,QAAMQ,QAAN,EAAgB;AACdG,UAAMD,MADQ;AAEdE,YAAQF,MAFM;AAGdG,qBAAiBH,MAHH;AAIdI,oBAAgBJ,MAJF;AAKdK,UAAML,MALQ;AAMdM,UAAMN;AANQ,GAAhB;AAQAV,QAAMS,WAAN,EAAmB;AACjBQ,WAAOP,MADU;AAEjBQ,cAAUR;AAFO,GAAnB;AAKA,QAAMS,uBAAuB;AAC3BZ,mBAD2B;AAE3BC,YAF2B;AAG3BC;AAH2B,GAA7B;AAMA,MAAIW,MAAJ;;AAEA,MAAI;AACF,UAAMC,sBAAsBjB,aAAakB,OAAb,CAAqB1B,aAArB,CAAmCuB,oBAAnC,CAA5B;AACAd,WAAOkB,KAAP,CAAaF,mBAAb;AACAD,aAASC,mBAAT;AACD,GAJD,CAIE,OAAOG,KAAP,EAAc;AACdnB,WAAOmB,KAAP,CAAaA,KAAb;AACAJ,aAAS;AACPK,aAAO,KADA;AAEPD,aAAQ,0BAAyBA,MAAME,OAAQ;AAFxC,KAAT;AAIArB,WAAOsB,KAAP,CAAa,kDAAb;AACD;;AAED,SAAOP,MAAP;AACD;;AAUM,SAASvB,cAAT,CAAwB+B,aAAxB,EAAuC;AAC5C;AACA;AACA5B,QAAM4B,aAAN,EAAqBC,MAArB;AACAvB,wBAAsBwB,QAAtB,CAA+BxB,sBAAsByB,KAAtB,CAA4BH,aAA5B,CAA/B;AAEA,QAAMI,wBAAwB;AAC5BC,mBAAeL,cAAcK,aADD;AAE5BC,YAAQN,cAAcM;AAFM,GAA9B;AAKA,MAAId,MAAJ;;AAEA,MAAI;AACF,UAAMe,uBAAuB/B,aAAakB,OAAb,CAAqBc,aAArB,CAAmCJ,qBAAnC,CAA7B;AACA3B,WAAOkB,KAAP,CAAaY,oBAAb;AACAf,aAASe,oBAAT;AACD,GAJD,CAIE,OAAOX,KAAP,EAAc;AACdnB,WAAOmB,KAAP,CAAaA,KAAb;AACAJ,aAAS;AACPK,aAAO,KADA;AAEPD,aAAQ,2BAA0BA,MAAME,OAAQ;AAFzC,KAAT;AAIArB,WAAOsB,KAAP,CAAa,iDAAb;AACD;;AAED,SAAOP,MAAP;AACD;;AAWM,SAAStB,YAAT,CAAsB8B,aAAtB,EAAqCM,MAArC,EAA6C;AAClDlC,QAAMkC,MAAN,EAAcG,MAAd,EADkD,CAGlD;AACA;;AACArC,QAAM4B,aAAN,EAAqBC,MAArB;AACAvB,wBAAsBwB,QAAtB,CAA+BxB,sBAAsByB,KAAtB,CAA4BH,aAA5B,CAA/B;AAEA,QAAMU,gBAAgB;AACpBL,mBAAeL,cAAcK,aADT;AAEpBC;AAFoB,GAAtB;AAKA,MAAId,MAAJ;;AAEA,MAAI;AACF,UAAMmB,eAAenC,aAAakB,OAAb,CAAqBxB,YAArB,CAAkCwC,aAAlC,CAArB;AACAjC,WAAOkB,KAAP,CAAagB,YAAb;AACAnB,aAASmB,YAAT;AACD,GAJD,CAIE,OAAOf,KAAP,EAAc;AACdnB,WAAOmB,KAAP,CAAaA,KAAb;AACAJ,aAAS;AACPK,aAAO,KADA;AAEPD,aAAQ,wBAAuBA,MAAME,OAAQ;AAFtC,KAAT;AAIArB,WAAOsB,KAAP,CAAa,8CAAb;AACD;;AAED,SAAOP,MAAP;AACD;;AAUM,SAASrB,WAAT,CAAqB6B,aAArB,EAAoC;AACzC5B,QAAM4B,aAAN,EAAqBC,MAArB;AAEA,QAAMW,oBAAoB;AACxBP,mBAAeL,cAAcK;AADL,GAA1B;AAIA,MAAIb,MAAJ;;AAEA,MAAI;AACF,UAAMqB,mBAAmBrC,aAAakB,OAAb,CAAqBvB,WAArB,CAAiCyC,iBAAjC,CAAzB;AACAnC,WAAOkB,KAAP,CAAakB,gBAAb;AACArB,aAASqB,gBAAT;AACD,GAJD,CAIE,OAAOjB,KAAP,EAAc;AACdnB,WAAOmB,KAAP,CAAaA,KAAb;AACAJ,aAAS;AACPK,aAAO,KADA;AAEPD,aAAQ,wBAAuBA,MAAME,OAAQ;AAFtC,KAAT;AAIArB,WAAOsB,KAAP,CAAa,2CAAb;AACD;;AAED,SAAOP,MAAP;AACD","sourcesContent":["import { check } from \"meteor/check\";\nimport { BraintreeApi } from \"./braintreeApi\";\nimport { Logger } from \"/server/api\";\nimport { PaymentMethodArgument } from \"/lib/collections/schemas\";\n\n/**\n * braintreeSubmit\n * Authorize, or authorize and capture payments from Braintree\n * https://developers.braintreepayments.com/reference/request/transaction/sale/node\n * @param {String} transactionType - either authorize or capture\n * @param {Object} cardData - Object containing everything about the Credit card to be submitted\n * @param {Object} paymentData - Object containing everything about the transaction to be settled\n * @return {Object} results - Object containing the results of the transaction\n */\nexport function paymentSubmit(transactionType, cardData, paymentData) {\n  check(transactionType, String);\n  check(cardData, {\n    name: String,\n    number: String,\n    expirationMonth: String,\n    expirationYear: String,\n    cvv2: String,\n    type: String\n  });\n  check(paymentData, {\n    total: String,\n    currency: String\n  });\n\n  const paymentSubmitDetails = {\n    transactionType,\n    cardData,\n    paymentData\n  };\n\n  let result;\n\n  try {\n    const paymentSubmitResult = BraintreeApi.apiCall.paymentSubmit(paymentSubmitDetails);\n    Logger.debug(paymentSubmitResult);\n    result = paymentSubmitResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot Submit Payment: ${error.message}`\n    };\n    Logger.fatal(\"Braintree call failed, payment was not submitted\");\n  }\n\n  return result;\n}\n\n\n/**\n * paymentCapture\n * Capture payments from Braintree\n * https://developers.braintreepayments.com/reference/request/transaction/submit-for-settlement/node\n * @param {Object} paymentMethod - Object containing everything about the transaction to be settled\n * @return {Object} results - Object containing the results of the transaction\n */\nexport function paymentCapture(paymentMethod) {\n  // Call both check and validate because by calling `clean`, the audit pkg\n  // thinks that we haven't checked paymentMethod arg\n  check(paymentMethod, Object);\n  PaymentMethodArgument.validate(PaymentMethodArgument.clean(paymentMethod));\n\n  const paymentCaptureDetails = {\n    transactionId: paymentMethod.transactionId,\n    amount: paymentMethod.amount\n  };\n\n  let result;\n\n  try {\n    const paymentCaptureResult = BraintreeApi.apiCall.captureCharge(paymentCaptureDetails);\n    Logger.debug(paymentCaptureResult);\n    result = paymentCaptureResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot Capture Payment: ${error.message}`\n    };\n    Logger.fatal(\"Braintree call failed, payment was not captured\");\n  }\n\n  return result;\n}\n\n\n/**\n * createRefund\n * Refund BrainTree payment\n * https://developers.braintreepayments.com/reference/request/transaction/refund/node\n * @param {Object} paymentMethod - Object containing everything about the transaction to be settled\n * @param {Number} amount - Amount to be refunded if not the entire amount\n * @return {Object} results - Object containing the results of the transaction\n */\nexport function createRefund(paymentMethod, amount) {\n  check(amount, Number);\n\n  // Call both check and validate because by calling `clean`, the audit pkg\n  // thinks that we haven't checked paymentMethod arg\n  check(paymentMethod, Object);\n  PaymentMethodArgument.validate(PaymentMethodArgument.clean(paymentMethod));\n\n  const refundDetails = {\n    transactionId: paymentMethod.transactionId,\n    amount\n  };\n\n  let result;\n\n  try {\n    const refundResult = BraintreeApi.apiCall.createRefund(refundDetails);\n    Logger.debug(refundResult);\n    result = refundResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot issue refund: ${error.message}`\n    };\n    Logger.fatal(\"Braintree call failed, refund was not issued\");\n  }\n\n  return result;\n}\n\n\n/**\n * listRefunds\n * List all refunds for a transaction\n * https://developers.braintreepayments.com/reference/request/transaction/find/node\n * @param {Object} paymentMethod - Object containing everything about the transaction to be settled\n * @return {Array} results - An array of refund objects for display in admin\n */\nexport function listRefunds(paymentMethod) {\n  check(paymentMethod, Object);\n\n  const refundListDetails = {\n    transactionId: paymentMethod.transactionId\n  };\n\n  let result;\n\n  try {\n    const refundListResult = BraintreeApi.apiCall.listRefunds(refundListDetails);\n    Logger.debug(refundListResult);\n    result = refundListResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot list refunds: ${error.message}`\n    };\n    Logger.fatal(\"Braintree call failed, refunds not listed\");\n  }\n\n  return result;\n}\n"]},"sourceType":"script","hash":"b6176919674e27db377929c32a10ff250401f922"}
