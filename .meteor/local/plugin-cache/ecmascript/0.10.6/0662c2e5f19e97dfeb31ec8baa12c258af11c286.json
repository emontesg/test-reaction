{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/included/shipping-rates/server/methods/rates.js","filename":"imports/plugins/included/shipping-rates/server/methods/rates.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/included/shipping-rates/server/methods/rates.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/included/shipping-rates/server/methods/rates.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/included/shipping-rates/server/methods/rates.js"}},"code":"module.export({\n  methods: () => methods\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet check, Match;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  },\n\n  Match(v) {\n    Match = v;\n  }\n\n}, 1);\nlet Random;\nmodule.watch(require(\"meteor/random\"), {\n  Random(v) {\n    Random = v;\n  }\n\n}, 2);\nlet Shipping;\nmodule.watch(require(\"../../../../../../lib/collections\"), {\n  Shipping(v) {\n    Shipping = v;\n  }\n\n}, 3);\nlet ShippingMethod;\nmodule.watch(require(\"../../../../../../lib/collections/schemas\"), {\n  ShippingMethod(v) {\n    ShippingMethod = v;\n  }\n\n}, 4);\nlet Reaction;\nmodule.watch(require(\"../../../../../../server/api\"), {\n  Reaction(v) {\n    Reaction = v;\n  }\n\n}, 5);\nlet shippingRoles;\nmodule.watch(require(\"../lib/roles\"), {\n  shippingRoles(v) {\n    shippingRoles = v;\n  }\n\n}, 6);\nconst methods = {\n  /**\n   * shipping/rates/add\n   * add new shipping flat rate methods\n   * @summary insert shipping method for a flat rate provider\n   * @param { Object } rate a valid ShippingMethod object\n   * @return { Number } insert result\n   */\n  \"shipping/rates/add\"(rate) {\n    check(rate, {\n      _id: Match.Optional(String),\n      name: String,\n      label: String,\n      group: String,\n      cost: Match.Optional(Number),\n      handling: Match.Optional(Number),\n      rate: Number,\n      enabled: Boolean\n    });\n\n    if (!Reaction.hasPermission(shippingRoles)) {\n      throw new Meteor.Error(\"access-denied\", \"Access Denied\");\n    } // a little trickery\n    // we passed in the providerId\n    // as _id, perhaps cleanup\n\n\n    let providerId;\n\n    if (rate._id) {\n      providerId = rate._id;\n    } else if (!Shipping.find({}).count()) {\n      // There is no default provider, so add it\n      const defaultProvider = Shipping.insert({\n        name: \"Default Shipping Provider\",\n        provider: {\n          name: \"flatRates\",\n          label: \"Flat Rate\"\n        }\n      });\n      providerId = defaultProvider;\n    } else {\n      throw new Meteor.Error(\"bad-provider-id\", \"No Provider ID provided when adding methods\");\n    }\n\n    rate._id = Random.id();\n    return Shipping.update({\n      _id: providerId\n    }, {\n      $addToSet: {\n        methods: rate\n      }\n    });\n  },\n\n  /**\n   * shipping/rates/update\n   * @summary update shipping rate methods\n   * @param { Object } method shipping method object\n   * @return { Number } update result\n   */\n  \"shipping/rates/update\"(method) {\n    ShippingMethod.validate(method);\n\n    if (!Reaction.hasPermission(shippingRoles)) {\n      throw new Meteor.Error(\"access-denied\", \"Access Denied\");\n    }\n\n    const methodId = method._id;\n    return Shipping.update({\n      \"methods._id\": methodId\n    }, {\n      $set: {\n        \"methods.$\": method\n      }\n    });\n  },\n\n  /**\n   * shipping/rates/delete\n   * @summary delete shipping rate method\n   * @param { String } rateId id of method to delete\n   * @return { Number } update result\n   */\n  \"shipping/rates/delete\"(rateId) {\n    check(rateId, String);\n\n    if (!Reaction.hasPermission(shippingRoles)) {\n      throw new Meteor.Error(\"access-denied\", \"Access Denied\");\n    }\n\n    const rates = Shipping.findOne({\n      \"methods._id\": rateId\n    });\n    const {\n      methods: shippingMethods\n    } = rates;\n    const updatedMethods = shippingMethods.filter(method => method._id !== rateId); // HACK: not sure why we need to do this.. but it works.\n    // Replaced a $pull which in theory is better, but was broken.\n    // Issue w/ pull was introduced during the simpl-schema update\n\n    const deleted = Shipping.update({\n      \"methods._id\": rateId\n    }, {\n      $set: {\n        methods: updatedMethods\n      }\n    });\n    return deleted;\n  }\n\n};\nMeteor.methods(methods);","map":{"version":3,"sources":["imports/plugins/included/shipping-rates/server/methods/rates.js"],"names":["module","export","methods","Meteor","watch","require","v","check","Match","Random","Shipping","ShippingMethod","Reaction","shippingRoles","rate","_id","Optional","String","name","label","group","cost","Number","handling","enabled","Boolean","hasPermission","Error","providerId","find","count","defaultProvider","insert","provider","id","update","$addToSet","method","validate","methodId","$set","rateId","rates","findOne","shippingMethods","updatedMethods","filter","deleted"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,WAAQ,MAAIA;AAAb,CAAd;AAAqC,IAAIC,MAAJ;AAAWH,OAAOI,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACF,SAAOG,CAAP,EAAS;AAACH,aAAOG,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIC,KAAJ,EAAUC,KAAV;AAAgBR,OAAOI,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACE,QAAMD,CAAN,EAAQ;AAACC,YAAMD,CAAN;AAAQ,GAAlB;;AAAmBE,QAAMF,CAAN,EAAQ;AAACE,YAAMF,CAAN;AAAQ;;AAApC,CAArC,EAA2E,CAA3E;AAA8E,IAAIG,MAAJ;AAAWT,OAAOI,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACI,SAAOH,CAAP,EAAS;AAACG,aAAOH,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAII,QAAJ;AAAaV,OAAOI,KAAP,CAAaC,QAAQ,mCAAR,CAAb,EAA0D;AAACK,WAASJ,CAAT,EAAW;AAACI,eAASJ,CAAT;AAAW;;AAAxB,CAA1D,EAAoF,CAApF;AAAuF,IAAIK,cAAJ;AAAmBX,OAAOI,KAAP,CAAaC,QAAQ,2CAAR,CAAb,EAAkE;AAACM,iBAAeL,CAAf,EAAiB;AAACK,qBAAeL,CAAf;AAAiB;;AAApC,CAAlE,EAAwG,CAAxG;AAA2G,IAAIM,QAAJ;AAAaZ,OAAOI,KAAP,CAAaC,QAAQ,8BAAR,CAAb,EAAqD;AAACO,WAASN,CAAT,EAAW;AAACM,eAASN,CAAT;AAAW;;AAAxB,CAArD,EAA+E,CAA/E;AAAkF,IAAIO,aAAJ;AAAkBb,OAAOI,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACQ,gBAAcP,CAAd,EAAgB;AAACO,oBAAcP,CAAd;AAAgB;;AAAlC,CAArC,EAAyE,CAAzE;AAQnmB,MAAMJ,UAAU;AACrB;;;;;;;AAOA,uBAAqBY,IAArB,EAA2B;AACzBP,UAAMO,IAAN,EAAY;AACVC,WAAKP,MAAMQ,QAAN,CAAeC,MAAf,CADK;AAEVC,YAAMD,MAFI;AAGVE,aAAOF,MAHG;AAIVG,aAAOH,MAJG;AAKVI,YAAMb,MAAMQ,QAAN,CAAeM,MAAf,CALI;AAMVC,gBAAUf,MAAMQ,QAAN,CAAeM,MAAf,CANA;AAOVR,YAAMQ,MAPI;AAQVE,eAASC;AARC,KAAZ;;AAUA,QAAI,CAACb,SAASc,aAAT,CAAuBb,aAAvB,CAAL,EAA4C;AAC1C,YAAM,IAAIV,OAAOwB,KAAX,CAAiB,eAAjB,EAAkC,eAAlC,CAAN;AACD,KAbwB,CAczB;AACA;AACA;;;AACA,QAAIC,UAAJ;;AACA,QAAId,KAAKC,GAAT,EAAc;AACZa,mBAAad,KAAKC,GAAlB;AACD,KAFD,MAEO,IAAI,CAACL,SAASmB,IAAT,CAAc,EAAd,EAAkBC,KAAlB,EAAL,EAAgC;AAAE;AACvC,YAAMC,kBAAkBrB,SAASsB,MAAT,CAAgB;AACtCd,cAAM,2BADgC;AAEtCe,kBAAU;AACRf,gBAAM,WADE;AAERC,iBAAO;AAFC;AAF4B,OAAhB,CAAxB;AAOAS,mBAAaG,eAAb;AACD,KATM,MASA;AACL,YAAM,IAAI5B,OAAOwB,KAAX,CAAiB,iBAAjB,EAAoC,6CAApC,CAAN;AACD;;AAEDb,SAAKC,GAAL,GAAWN,OAAOyB,EAAP,EAAX;AACA,WAAOxB,SAASyB,MAAT,CAAgB;AACrBpB,WAAKa;AADgB,KAAhB,EAEJ;AACDQ,iBAAW;AACTlC,iBAASY;AADA;AADV,KAFI,CAAP;AAOD,GAjDoB;;AAmDrB;;;;;;AAMA,0BAAwBuB,MAAxB,EAAgC;AAC9B1B,mBAAe2B,QAAf,CAAwBD,MAAxB;;AACA,QAAI,CAACzB,SAASc,aAAT,CAAuBb,aAAvB,CAAL,EAA4C;AAC1C,YAAM,IAAIV,OAAOwB,KAAX,CAAiB,eAAjB,EAAkC,eAAlC,CAAN;AACD;;AACD,UAAMY,WAAWF,OAAOtB,GAAxB;AAEA,WAAOL,SAASyB,MAAT,CAAgB;AACrB,qBAAeI;AADM,KAAhB,EAEJ;AACDC,YAAM;AACJ,qBAAaH;AADT;AADL,KAFI,CAAP;AAOD,GAvEoB;;AAyErB;;;;;;AAMA,0BAAwBI,MAAxB,EAAgC;AAC9BlC,UAAMkC,MAAN,EAAcxB,MAAd;;AAEA,QAAI,CAACL,SAASc,aAAT,CAAuBb,aAAvB,CAAL,EAA4C;AAC1C,YAAM,IAAIV,OAAOwB,KAAX,CAAiB,eAAjB,EAAkC,eAAlC,CAAN;AACD;;AAED,UAAMe,QAAQhC,SAASiC,OAAT,CAAiB;AAAE,qBAAeF;AAAjB,KAAjB,CAAd;AACA,UAAM;AAAEvC,eAAS0C;AAAX,QAA+BF,KAArC;AACA,UAAMG,iBAAiBD,gBAAgBE,MAAhB,CAAwBT,MAAD,IAAYA,OAAOtB,GAAP,KAAe0B,MAAlD,CAAvB,CAT8B,CAW9B;AACA;AACA;;AACA,UAAMM,UAAUrC,SAASyB,MAAT,CAAgB;AAC9B,qBAAeM;AADe,KAAhB,EAEb;AACDD,YAAM;AACJtC,iBAAS2C;AADL;AADL,KAFa,CAAhB;AAQA,WAAOE,OAAP;AACD;;AAtGoB,CAAhB;AAyGP5C,OAAOD,OAAP,CAAeA,OAAf","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { check, Match } from \"meteor/check\";\nimport { Random } from \"meteor/random\";\nimport { Shipping } from \"/lib/collections\";\nimport { ShippingMethod } from \"/lib/collections/schemas\";\nimport { Reaction } from \"/server/api\";\nimport { shippingRoles } from \"../lib/roles\";\n\nexport const methods = {\n  /**\n   * shipping/rates/add\n   * add new shipping flat rate methods\n   * @summary insert shipping method for a flat rate provider\n   * @param { Object } rate a valid ShippingMethod object\n   * @return { Number } insert result\n   */\n  \"shipping/rates/add\"(rate) {\n    check(rate, {\n      _id: Match.Optional(String),\n      name: String,\n      label: String,\n      group: String,\n      cost: Match.Optional(Number),\n      handling: Match.Optional(Number),\n      rate: Number,\n      enabled: Boolean\n    });\n    if (!Reaction.hasPermission(shippingRoles)) {\n      throw new Meteor.Error(\"access-denied\", \"Access Denied\");\n    }\n    // a little trickery\n    // we passed in the providerId\n    // as _id, perhaps cleanup\n    let providerId;\n    if (rate._id) {\n      providerId = rate._id;\n    } else if (!Shipping.find({}).count()) { // There is no default provider, so add it\n      const defaultProvider = Shipping.insert({\n        name: \"Default Shipping Provider\",\n        provider: {\n          name: \"flatRates\",\n          label: \"Flat Rate\"\n        }\n      });\n      providerId = defaultProvider;\n    } else {\n      throw new Meteor.Error(\"bad-provider-id\", \"No Provider ID provided when adding methods\");\n    }\n\n    rate._id = Random.id();\n    return Shipping.update({\n      _id: providerId\n    }, {\n      $addToSet: {\n        methods: rate\n      }\n    });\n  },\n\n  /**\n   * shipping/rates/update\n   * @summary update shipping rate methods\n   * @param { Object } method shipping method object\n   * @return { Number } update result\n   */\n  \"shipping/rates/update\"(method) {\n    ShippingMethod.validate(method);\n    if (!Reaction.hasPermission(shippingRoles)) {\n      throw new Meteor.Error(\"access-denied\", \"Access Denied\");\n    }\n    const methodId = method._id;\n\n    return Shipping.update({\n      \"methods._id\": methodId\n    }, {\n      $set: {\n        \"methods.$\": method\n      }\n    });\n  },\n\n  /**\n   * shipping/rates/delete\n   * @summary delete shipping rate method\n   * @param { String } rateId id of method to delete\n   * @return { Number } update result\n   */\n  \"shipping/rates/delete\"(rateId) {\n    check(rateId, String);\n\n    if (!Reaction.hasPermission(shippingRoles)) {\n      throw new Meteor.Error(\"access-denied\", \"Access Denied\");\n    }\n\n    const rates = Shipping.findOne({ \"methods._id\": rateId });\n    const { methods: shippingMethods } = rates;\n    const updatedMethods = shippingMethods.filter((method) => method._id !== rateId);\n\n    // HACK: not sure why we need to do this.. but it works.\n    // Replaced a $pull which in theory is better, but was broken.\n    // Issue w/ pull was introduced during the simpl-schema update\n    const deleted = Shipping.update({\n      \"methods._id\": rateId\n    }, {\n      $set: {\n        methods: updatedMethods\n      }\n    });\n\n    return deleted;\n  }\n};\n\nMeteor.methods(methods);\n"]},"sourceType":"script","hash":"0662c2e5f19e97dfeb31ec8baa12c258af11c286"}
