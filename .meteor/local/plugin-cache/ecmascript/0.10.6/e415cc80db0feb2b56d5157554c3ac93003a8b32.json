{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/included/payments-paypal/server/methods/payflowproApi.js","filename":"imports/plugins/included/payments-paypal/server/methods/payflowproApi.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/included/payments-paypal/server/methods/payflowproApi.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/included/payments-paypal/server/methods/payflowproApi.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/included/payments-paypal/server/methods/payflowproApi.js"}},"code":"module.export({\n  PayflowproApi: () => PayflowproApi\n});\n\nlet _isObject;\n\nmodule.watch(require(\"lodash/isObject\"), {\n  default(v) {\n    _isObject = v;\n  }\n\n}, 0);\nlet PayFlow;\nmodule.watch(require(\"paypal-rest-sdk\"), {\n  default(v) {\n    PayFlow = v;\n  }\n\n}, 1);\nlet accounting;\nmodule.watch(require(\"accounting-js\"), {\n  default(v) {\n    accounting = v;\n  }\n\n}, 2);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 3);\nlet Reaction, Logger;\nmodule.watch(require(\"../../../../../../server/api\"), {\n  Reaction(v) {\n    Reaction = v;\n  },\n\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 4);\nlet Shops;\nmodule.watch(require(\"../../../../../../lib/collections\"), {\n  Shops(v) {\n    Shops = v;\n  }\n\n}, 5);\nlet PayPal;\nmodule.watch(require(\"../../lib/api\"), {\n  PayPal(v) {\n    PayPal = v;\n  }\n\n}, 6);\n// PayPal is the reaction api\nlet moment;\n\nfunction lazyLoadMoment() {\n  return Promise.asyncApply(() => {\n    if (moment) return;\n    moment = Promise.await(Promise.resolve().then(() => require(\"moment\")));\n  });\n}\n\nconst PayflowproApi = {};\nPayflowproApi.apiCall = {};\n\nPayflowproApi.apiCall.paymentSubmit = function (paymentSubmitDetails) {\n  PayFlow.configure(PayPal.payflowAccountOptions());\n  const paymentObj = PayPal.paymentObj();\n  paymentObj.intent = paymentSubmitDetails.transactionType;\n  paymentObj.payer.funding_instruments.push(PayPal.parseCardData(paymentSubmitDetails.cardData));\n  paymentObj.transactions.push(PayPal.parsePaymentData(paymentSubmitDetails.paymentData));\n  const wrappedFunc = Meteor.wrapAsync(PayFlow.payment.create, PayFlow.payment);\n  let result;\n\n  try {\n    result = {\n      saved: true,\n      response: wrappedFunc(paymentObj)\n    };\n  } catch (error) {\n    Logger.warn(error);\n    result = {\n      saved: false,\n      error\n    };\n  }\n\n  return result;\n};\n\nPayflowproApi.apiCall.captureCharge = function (paymentCaptureDetails) {\n  PayFlow.configure(PayPal.payflowAccountOptions());\n  let result; // TODO: This should be changed to some ReactionCore method\n\n  const shop = Shops.findOne(Reaction.getShopId());\n  const wrappedFunc = Meteor.wrapAsync(PayFlow.authorization.capture, PayFlow.authorization);\n  const wrappedFuncVoid = Meteor.wrapAsync(PayFlow.authorization.void, PayFlow.authorization);\n  const captureTotal = Math.round(parseFloat(paymentCaptureDetails.amount) * 100) / 100;\n  const captureDetails = {\n    amount: {\n      currency: shop.currency,\n      total: captureTotal\n    },\n    is_final_capture: true // eslint-disable-line camelcase\n\n  };\n  const capturedAmount = accounting.toFixed(captureDetails.amount.total, 2);\n\n  if (capturedAmount === accounting.toFixed(0, 2)) {\n    try {\n      const response = wrappedFuncVoid(paymentCaptureDetails.authorizationId, captureDetails);\n      result = {\n        saved: true,\n        metadata: {\n          parentPaymentId: response.parent_payment,\n          captureId: response.id\n        },\n        rawTransaction: response\n      };\n    } catch (error) {\n      Logger.warn(error);\n      result = {\n        saved: false,\n        error\n      };\n    }\n\n    return result;\n  }\n\n  try {\n    const response = wrappedFunc(paymentCaptureDetails.authorizationId, captureDetails);\n    result = {\n      saved: true,\n      metadata: {\n        parentPaymentId: response.parent_payment,\n        captureId: response.id\n      },\n      rawTransaction: response\n    };\n  } catch (error) {\n    Logger.warn(error);\n    result = {\n      saved: false,\n      error\n    };\n  }\n\n  return result;\n};\n\nPayflowproApi.apiCall.createRefund = function (refundDetails) {\n  PayFlow.configure(PayPal.payflowAccountOptions());\n  const createRefund = Meteor.wrapAsync(PayFlow.capture.refund, PayFlow.capture);\n  let result;\n\n  try {\n    Logger.debug(\"payflowpro/refund/create: paymentMethod.metadata.captureId\", refundDetails.captureId);\n    const response = createRefund(refundDetails.captureId, {\n      amount: {\n        total: refundDetails.amount,\n        currency: \"USD\"\n      }\n    });\n    result = {\n      saved: true,\n      type: \"refund\",\n      created: response.create_time,\n      amount: response.amount.total,\n      currency: response.amount.currency,\n      rawTransaction: response\n    };\n  } catch (error) {\n    result = {\n      saved: false,\n      error\n    };\n  }\n\n  return result;\n};\n\nPayflowproApi.apiCall.listRefunds = function (refundListDetails) {\n  PayFlow.configure(PayPal.payflowAccountOptions());\n  const listPayments = Meteor.wrapAsync(PayFlow.payment.get, PayFlow.payment);\n  let result = []; // todo: review parentPaymentId vs authorizationId, are they both correct?\n  // added authorizationId without fully understanding the intent of parentPaymentId\n  // let authId = paymentMethod.metadata.parentPaymentId || paymentMethod.metadata.authorizationId;\n\n  const authId = refundListDetails.transactionId;\n\n  if (authId) {\n    Logger.debug(\"payflowpro/refund/list: paymentMethod.metadata.parentPaymentId\", authId);\n\n    try {\n      const response = listPayments(authId);\n\n      for (const transaction of response.transactions) {\n        for (const resource of transaction.related_resources) {\n          if (_isObject(resource.refund)) {\n            if (resource.refund.state === \"completed\") {\n              Promise.await(lazyLoadMoment());\n              result.push({\n                type: \"refund\",\n                created: moment(resource.refund.create_time).unix() * 1000,\n                amount: Math.abs(resource.refund.amount.total),\n                currency: resource.refund.amount.currency,\n                raw: response\n              });\n            }\n          }\n        }\n      }\n    } catch (error) {\n      Logger.warn(\"Failed payflowpro/refund/list\", error);\n      result = {\n        error\n      };\n    }\n  }\n\n  return result;\n};","map":{"version":3,"sources":["imports/plugins/included/payments-paypal/server/methods/payflowproApi.js"],"names":["module","export","PayflowproApi","_isObject","watch","require","default","v","PayFlow","accounting","Meteor","Reaction","Logger","Shops","PayPal","moment","lazyLoadMoment","apiCall","paymentSubmit","paymentSubmitDetails","configure","payflowAccountOptions","paymentObj","intent","transactionType","payer","funding_instruments","push","parseCardData","cardData","transactions","parsePaymentData","paymentData","wrappedFunc","wrapAsync","payment","create","result","saved","response","error","warn","captureCharge","paymentCaptureDetails","shop","findOne","getShopId","authorization","capture","wrappedFuncVoid","void","captureTotal","Math","round","parseFloat","amount","captureDetails","currency","total","is_final_capture","capturedAmount","toFixed","authorizationId","metadata","parentPaymentId","parent_payment","captureId","id","rawTransaction","createRefund","refundDetails","refund","debug","type","created","create_time","listRefunds","refundListDetails","listPayments","get","authId","transactionId","transaction","resource","related_resources","state","Promise","await","unix","abs","raw"],"mappings":"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","sourcesContent":["import PayFlow from \"paypal-rest-sdk\"; // PayFlow is PayPal PayFlow lib\nimport accounting from \"accounting-js\";\nimport _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Reaction, Logger } from \"/server/api\";\nimport { Shops } from \"/lib/collections\";\nimport { PayPal } from \"../../lib/api\"; // PayPal is the reaction api\n\nlet moment;\nasync function lazyLoadMoment() {\n  if (moment) return;\n  moment = await import(\"moment\");\n}\n\nexport const PayflowproApi = {};\nPayflowproApi.apiCall = {};\n\n\nPayflowproApi.apiCall.paymentSubmit = function (paymentSubmitDetails) {\n  PayFlow.configure(PayPal.payflowAccountOptions());\n\n  const paymentObj = PayPal.paymentObj();\n  paymentObj.intent = paymentSubmitDetails.transactionType;\n  paymentObj.payer.funding_instruments.push(PayPal.parseCardData(paymentSubmitDetails.cardData));\n  paymentObj.transactions.push(PayPal.parsePaymentData(paymentSubmitDetails.paymentData));\n  const wrappedFunc = Meteor.wrapAsync(PayFlow.payment.create, PayFlow.payment);\n  let result;\n  try {\n    result = {\n      saved: true,\n      response: wrappedFunc(paymentObj)\n    };\n  } catch (error) {\n    Logger.warn(error);\n    result = {\n      saved: false,\n      error\n    };\n  }\n  return result;\n};\n\n\nPayflowproApi.apiCall.captureCharge = function (paymentCaptureDetails) {\n  PayFlow.configure(PayPal.payflowAccountOptions());\n\n  let result;\n  // TODO: This should be changed to some ReactionCore method\n  const shop = Shops.findOne(Reaction.getShopId());\n  const wrappedFunc = Meteor.wrapAsync(PayFlow.authorization.capture, PayFlow.authorization);\n  const wrappedFuncVoid = Meteor.wrapAsync(PayFlow.authorization.void, PayFlow.authorization);\n  const captureTotal = Math.round(parseFloat(paymentCaptureDetails.amount) * 100) / 100;\n  const captureDetails = {\n    amount: {\n      currency: shop.currency,\n      total: captureTotal\n    },\n    is_final_capture: true // eslint-disable-line camelcase\n  };\n  const capturedAmount = accounting.toFixed(captureDetails.amount.total, 2);\n\n  if (capturedAmount === accounting.toFixed(0, 2)) {\n    try {\n      const response = wrappedFuncVoid(paymentCaptureDetails.authorizationId, captureDetails);\n\n      result = {\n        saved: true,\n        metadata: {\n          parentPaymentId: response.parent_payment,\n          captureId: response.id\n        },\n        rawTransaction: response\n      };\n    } catch (error) {\n      Logger.warn(error);\n      result = {\n        saved: false,\n        error\n      };\n    }\n    return result;\n  }\n  try {\n    const response = wrappedFunc(paymentCaptureDetails.authorizationId, captureDetails);\n\n    result = {\n      saved: true,\n      metadata: {\n        parentPaymentId: response.parent_payment,\n        captureId: response.id\n      },\n      rawTransaction: response\n    };\n  } catch (error) {\n    Logger.warn(error);\n    result = {\n      saved: false,\n      error\n    };\n  }\n  return result;\n};\n\n\nPayflowproApi.apiCall.createRefund = function (refundDetails) {\n  PayFlow.configure(PayPal.payflowAccountOptions());\n\n  const createRefund = Meteor.wrapAsync(PayFlow.capture.refund, PayFlow.capture);\n  let result;\n\n  try {\n    Logger.debug(\"payflowpro/refund/create: paymentMethod.metadata.captureId\", refundDetails.captureId);\n    const response = createRefund(refundDetails.captureId, {\n      amount: {\n        total: refundDetails.amount,\n        currency: \"USD\"\n      }\n    });\n\n    result = {\n      saved: true,\n      type: \"refund\",\n      created: response.create_time,\n      amount: response.amount.total,\n      currency: response.amount.currency,\n      rawTransaction: response\n    };\n  } catch (error) {\n    result = {\n      saved: false,\n      error\n    };\n  }\n  return result;\n};\n\n\nPayflowproApi.apiCall.listRefunds = function (refundListDetails) {\n  PayFlow.configure(PayPal.payflowAccountOptions());\n\n  const listPayments = Meteor.wrapAsync(PayFlow.payment.get, PayFlow.payment);\n  let result = [];\n  // todo: review parentPaymentId vs authorizationId, are they both correct?\n  // added authorizationId without fully understanding the intent of parentPaymentId\n  // let authId = paymentMethod.metadata.parentPaymentId || paymentMethod.metadata.authorizationId;\n  const authId = refundListDetails.transactionId;\n\n  if (authId) {\n    Logger.debug(\"payflowpro/refund/list: paymentMethod.metadata.parentPaymentId\", authId);\n    try {\n      const response = listPayments(authId);\n\n      for (const transaction of response.transactions) {\n        for (const resource of transaction.related_resources) {\n          if (_.isObject(resource.refund)) {\n            if (resource.refund.state === \"completed\") {\n              Promise.await(lazyLoadMoment());\n              result.push({\n                type: \"refund\",\n                created: moment(resource.refund.create_time).unix() * 1000,\n                amount: Math.abs(resource.refund.amount.total),\n                currency: resource.refund.amount.currency,\n                raw: response\n              });\n            }\n          }\n        }\n      }\n    } catch (error) {\n      Logger.warn(\"Failed payflowpro/refund/list\", error);\n      result = {\n        error\n      };\n    }\n  }\n  return result;\n};\n"]},"sourceType":"script","hash":"e415cc80db0feb2b56d5157554c3ac93003a8b32"}
