{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/core/versions/server/migrations/19_remove_admin_from_shop_manager.js","filename":"imports/plugins/core/versions/server/migrations/19_remove_admin_from_shop_manager.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/core/versions/server/migrations/19_remove_admin_from_shop_manager.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/core/versions/server/migrations/19_remove_admin_from_shop_manager.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/core/versions/server/migrations/19_remove_admin_from_shop_manager.js"}},"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Migrations;\nmodule.watch(require(\"meteor/percolate:migrations\"), {\n  Migrations(v) {\n    Migrations = v;\n  }\n\n}, 1);\nlet Logger;\nmodule.watch(require(\"../../../../../../server/api\"), {\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 2);\nlet Accounts, Groups, Shops;\nmodule.watch(require(\"../../../../../../lib/collections\"), {\n  Accounts(v) {\n    Accounts = v;\n  },\n\n  Groups(v) {\n    Groups = v;\n  },\n\n  Shops(v) {\n    Shops = v;\n  }\n\n}, 3);\n// Migration file created for removing the admin role from shop manager group, and users in the group\nMigrations.add({\n  version: 19,\n\n  up() {\n    const shops = Shops.find({}).fetch();\n\n    if (shops && shops.length) {\n      shops.forEach(shop => {\n        const shopManager = Groups.findOne({\n          slug: \"shop manager\",\n          shopId: shop._id\n        });\n\n        if (shopManager) {\n          const shopManagerRoles = shopManager.permissions;\n          const newShopManagerRoles = shopManagerRoles.filter(permission => permission !== \"admin\");\n          Groups.update({\n            slug: \"shop manager\",\n            shopId: shop._id\n          }, {\n            $set: {\n              permissions: newShopManagerRoles\n            }\n          });\n          Logger.debug(`group \"shop manager\" with id \"${shopManager._id}\" updated(admin role removed)`); // update users in group to new roles\n\n          const userIds = Accounts.find({\n            groups: shopManager._id\n          }).fetch().map(acc => acc._id);\n          Meteor.users.update({\n            _id: {\n              $in: userIds\n            }\n          }, {\n            $set: {\n              [`roles.${shop._id}`]: newShopManagerRoles\n            }\n          }, {\n            multi: true\n          });\n          Logger.debug(`users with \"shop manager\" in shop \"${shop._id}\" updated(admin role removed)`);\n        }\n      });\n    }\n  },\n\n  down() {\n    const shops = Shops.find({}).fetch();\n\n    if (shops && shops.length) {\n      shops.forEach(shop => {\n        const shopManager = Groups.findOne({\n          slug: \"shop manager\",\n          shopId: shop._id\n        });\n\n        if (shopManager) {\n          const shopManagerRoles = shopManager.permissions; // add back admin role\n\n          const newShopManagerRoles = shopManagerRoles.concat([\"admin\"]);\n          Groups.update({\n            slug: \"shop manager\",\n            shopId: shop._id\n          }, {\n            $set: {\n              permissions: newShopManagerRoles\n            }\n          });\n          Logger.debug(`group \"shop manager\" with id \"${shopManager._id}\" updated(admin role added)`); // update users in group to new roles\n\n          const userIds = Accounts.find({\n            groups: shopManager._id\n          }).fetch().map(acc => acc._id);\n          Meteor.users.update({\n            _id: {\n              $in: userIds\n            }\n          }, {\n            $set: {\n              [`roles.${shop._id}`]: newShopManagerRoles\n            }\n          }, {\n            multi: true\n          });\n          Logger.debug(`users with \"shop manager\" in shop \"${shop._id}\" updated(admin role added)`);\n        }\n      });\n    }\n  }\n\n});","map":{"version":3,"sources":["imports/plugins/core/versions/server/migrations/19_remove_admin_from_shop_manager.js"],"names":["Meteor","module","watch","require","v","Migrations","Logger","Accounts","Groups","Shops","add","version","up","shops","find","fetch","length","forEach","shop","shopManager","findOne","slug","shopId","_id","shopManagerRoles","permissions","newShopManagerRoles","filter","permission","update","$set","debug","userIds","groups","map","acc","users","$in","multi","down","concat"],"mappings":"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","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Migrations } from \"meteor/percolate:migrations\";\nimport { Logger } from \"/server/api\";\nimport { Accounts, Groups, Shops } from \"/lib/collections\";\n\n// Migration file created for removing the admin role from shop manager group, and users in the group\nMigrations.add({\n  version: 19,\n  up() {\n    const shops = Shops.find({}).fetch();\n    if (shops && shops.length) {\n      shops.forEach((shop) => {\n        const shopManager = Groups.findOne({ slug: \"shop manager\", shopId: shop._id });\n        if (shopManager) {\n          const shopManagerRoles = shopManager.permissions;\n          const newShopManagerRoles = shopManagerRoles.filter((permission) => permission !== \"admin\");\n          Groups.update({\n            slug: \"shop manager\",\n            shopId: shop._id\n          }, {\n            $set: { permissions: newShopManagerRoles }\n          });\n          Logger.debug(`group \"shop manager\" with id \"${shopManager._id}\" updated(admin role removed)`);\n\n          // update users in group to new roles\n          const userIds = Accounts.find({ groups: shopManager._id }).fetch().map((acc) => acc._id);\n          Meteor.users.update({\n            _id: { $in: userIds }\n          }, {\n            $set: { [`roles.${shop._id}`]: newShopManagerRoles }\n          }, {\n            multi: true\n          });\n          Logger.debug(`users with \"shop manager\" in shop \"${shop._id}\" updated(admin role removed)`);\n        }\n      });\n    }\n  },\n\n  down() {\n    const shops = Shops.find({}).fetch();\n\n    if (shops && shops.length) {\n      shops.forEach((shop) => {\n        const shopManager = Groups.findOne({ slug: \"shop manager\", shopId: shop._id });\n        if (shopManager) {\n          const shopManagerRoles = shopManager.permissions;\n          // add back admin role\n          const newShopManagerRoles = shopManagerRoles.concat([\"admin\"]);\n          Groups.update({\n            slug: \"shop manager\",\n            shopId: shop._id\n          }, {\n            $set: { permissions: newShopManagerRoles }\n          });\n          Logger.debug(`group \"shop manager\" with id \"${shopManager._id}\" updated(admin role added)`);\n\n          // update users in group to new roles\n          const userIds = Accounts.find({ groups: shopManager._id }).fetch().map((acc) => acc._id);\n          Meteor.users.update({\n            _id: { $in: userIds }\n          }, {\n            $set: { [`roles.${shop._id}`]: newShopManagerRoles }\n          }, {\n            multi: true\n          });\n          Logger.debug(`users with \"shop manager\" in shop \"${shop._id}\" updated(admin role added)`);\n        }\n      });\n    }\n  }\n});\n"]},"sourceType":"script","hash":"74c8f860cefec1c2172db01392178950cdca4739"}
