{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/core/accounts/client/components/addressBookForm.js","filename":"imports/plugins/core/accounts/client/components/addressBookForm.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/core/accounts/client/components/addressBookForm.js","plugins":["dynamicImport","classProperties","jsx","jsx","flow","asyncGenerators","objectRestSpread","objectRestSpread","flow","asyncGenerators"]},"generatorOpts":{"filename":"imports/plugins/core/accounts/client/components/addressBookForm.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/core/accounts/client/components/addressBookForm.js"}},"code":"var _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar React, Component;\nmodule.watch(require(\"react\"), {\n  \"default\": function (v) {\n    React = v;\n  },\n  Component: function (v) {\n    Component = v;\n  }\n}, 0);\nvar PropTypes;\nmodule.watch(require(\"prop-types\"), {\n  \"default\": function (v) {\n    PropTypes = v;\n  }\n}, 1);\nvar HTTP;\nmodule.watch(require(\"meteor/http\"), {\n  HTTP: function (v) {\n    HTTP = v;\n  }\n}, 2);\nvar Components, registerComponent;\nmodule.watch(require(\"../../../components/lib\"), {\n  Components: function (v) {\n    Components = v;\n  },\n  registerComponent: function (v) {\n    registerComponent = v;\n  }\n}, 3);\n\nvar AddressBookForm =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inheritsLoose2.default)(AddressBookForm, _Component);\n\n  function AddressBookForm(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.fieldLabelMap = {\n      region: {\n        label: \"Region\",\n        i18nKeyLabel: \"address.region\"\n      },\n      country: {\n        label: \"Country\",\n        i18nKeyLabel: \"address.country\"\n      },\n      fullName: {\n        label: \"Full Name\",\n        i18nKeyLabel: \"address.fullName\"\n      },\n      address1: {\n        label: \"Address\",\n        i18nKeyLabel: \"address.address1\"\n      },\n      address2: {\n        label: \"Address\",\n        i18nKeyLabel: \"address.address2\"\n      },\n      postal: {\n        label: \"Postal\",\n        i18nKeyLabel: \"address.postal\"\n      },\n      city: {\n        label: \"City\",\n        i18nKeyLabel: \"address.city\"\n      },\n      phone: {\n        label: \"Phone\",\n        i18nKeyLabel: \"address.phone\"\n      }\n      /**\n       * @method setRegionOptions\n       * @summary creates an array of region options for the regions select field.\n       * @since 2.0.0\n       * @param {String} country - country code \"US\" \"CA\" \"JP\"\n       */\n\n    };\n\n    _this.clientValidation = function (enteredAddress) {\n      var requiredFields = [\"country\", \"fullName\", \"address1\", \"postal\", \"city\", \"region\", \"phone\"];\n      var validation = {\n        messages: {}\n      };\n      var isValid = true;\n      Object.keys(enteredAddress).forEach(function (key) {\n        if (enteredAddress[key] && typeof enteredAddress[key] === \"string\" && requiredFields.indexOf(key) > -1) {\n          enteredAddress[key] = enteredAddress[key].trim();\n        }\n\n        if (requiredFields.indexOf(key) > -1 && !enteredAddress[key]) {\n          validation.messages[key] = {\n            message: _this.fieldLabelMap[key].label + \" is required\"\n          };\n          isValid = false;\n        }\n      });\n\n      if (!isValid) {\n        _this.setState({\n          validation: validation\n        });\n      } else {\n        _this.setState({\n          validation: undefined\n        });\n      }\n\n      return isValid;\n    };\n\n    _this.onSubmit = function (event) {\n      event.preventDefault();\n      var add = _this.props.add;\n      var enteredAddress = _this.state.fields; // fields object as enteredAddress\n      // TODO: field validatiion\n\n      if (_this.clientValidation(enteredAddress)) {\n        add(enteredAddress);\n      }\n    };\n\n    _this.onFieldChange = function (event, value, name) {\n      var fields = _this.state.fields;\n      fields[name] = value;\n\n      _this.setState({\n        fields: fields\n      }); // if country changed set new region options\n\n\n      if (name === \"country\") _this.setRegionOptions(value);\n    };\n\n    _this.onSelectChange = function (value, name) {\n      // the reaction select component doesn't return\n      // the same values as the other field components\n      // this updates that return and calls the\n      // typical on field change handler\n      _this.onFieldChange(new Event(\"onSelect\"), value, name);\n    };\n\n    _this.state = {\n      regions: [],\n      fields: {\n        _id: _this.props.editAddress._id,\n        country: _this.props.editAddress.country || \"US\",\n        // defaults to United States\n        fullName: _this.props.editAddress.fullName || \"\",\n        address1: _this.props.editAddress.address1 || \"\",\n        address2: _this.props.editAddress.address2 || \"\",\n        postal: _this.props.editAddress.postal || \"\",\n        city: _this.props.editAddress.city || \"\",\n        region: _this.props.editAddress.region || \"\",\n        phone: _this.props.editAddress.phone || \"\",\n        isShippingDefault: _this.props.editAddress.isShippingDefault || !_this.props.hasAddress,\n        // no address, default to true\n        isBillingDefault: _this.props.editAddress.isBillingDefault || !_this.props.hasAddress,\n        // no addres, default to true\n        isCommercial: _this.props.editAddress.isCommercial || false\n      }\n    }; // Getting the user's countrt and setting it as default\n\n    HTTP.get(\"https://geo.getreaction.io/json/\", function (err, res) {\n      if (!err) {\n        var countryCode = res.data.country_code;\n\n        if (countryCode && !_this.props.editAddress.country) {\n          _this.setState(function (prevState) {\n            return {\n              fields: (0, _objectSpread2.default)({}, prevState.fields, {\n                country: countryCode\n              })\n            };\n          }, function () {\n            _this.setRegionOptions(countryCode);\n          });\n        }\n      }\n    });\n    return _this;\n  }\n\n  var _proto = AddressBookForm.prototype;\n\n  _proto.componentWillMount = function () {\n    function componentWillMount() {\n      var country = this.state.fields.country; // if selected country has region options set those too\n\n      this.setRegionOptions(country);\n    }\n\n    return componentWillMount;\n  }(); // Address Book Form helpers\n\n\n  _proto.setRegionOptions = function () {\n    function setRegionOptions(country) {\n      var _props = this.props,\n          regionsByCountry = _props.regionsByCountry,\n          editAddress = _props.editAddress;\n      var fields = this.state.fields;\n      var regions = regionsByCountry[country]; // if the region field is empty\n\n      if (Object.keys(editAddress).length) {\n        this.setState({\n          regions: regions\n        });\n      } else {\n        // setting the fields region to be the\n        var _regions = _slicedToArray(regions, 1),\n            firstRegion = _regions[0];\n\n        if (firstRegion !== null && (0, _typeof2.default)(firstRegion) === \"object\") {\n          fields.region = firstRegion.value;\n        } else {\n          fields.region = firstRegion;\n        }\n\n        this.setState({\n          regions: regions,\n          fields: fields\n        });\n      }\n    }\n\n    return setRegionOptions;\n  }();\n\n  // Address Book Form JSX\n\n  /**\n   * @method renderAddressOptiions\n   * @summary renders address options at the bottom of the address book form\n   * if no address in addressBook array only show the isCommercial option\n   * since a first address will always be the default shipping/billing address.\n   * @since 2.0.0\n   * @return {Object} - JSX and Checkbox components.\n   */\n  _proto.renderAddressOptions = function () {\n    function renderAddressOptions() {\n      var hasAddress = this.props.hasAddress;\n      var fields = this.state.fields;\n      var defaultOptions;\n\n      if (hasAddress) {\n        defaultOptions = React.createElement(\"div\", null, React.createElement(\"div\", {\n          className: \"form-group\"\n        }, React.createElement(\"div\", {\n          className: \"checkbox\"\n        }, React.createElement(Components.Checkbox, {\n          i18nKeyLabel: \"address.isShippingDefault\",\n          label: \"Make this your default shipping address.\",\n          name: \"isShippingDefault\",\n          onChange: this.onFieldChange,\n          checked: fields.isShippingDefault\n        }))), React.createElement(\"div\", {\n          className: \"form-group\"\n        }, React.createElement(\"div\", {\n          className: \"checkbox\"\n        }, React.createElement(Components.Checkbox, {\n          i18nKeyLabel: \"address.isBillingDefault\",\n          label: \"Make this your default billing address.\",\n          name: \"isBillingDefault\",\n          onChange: this.onFieldChange,\n          checked: fields.isBillingDefault\n        }))));\n      }\n\n      return React.createElement(\"div\", {\n        className: \"row address-options\",\n        style: {\n          paddingLeft: \"5px\"\n        }\n      }, React.createElement(\"div\", {\n        className: \"col-md-12\"\n      }, defaultOptions, React.createElement(\"div\", {\n        className: \"form-group\"\n      }, React.createElement(\"div\", {\n        className: \"checkbox\"\n      }, React.createElement(Components.Checkbox, {\n        i18nKeyLabel: \"address.isCommercial\",\n        label: \"This is a commercal address.\",\n        name: \"isCommercial\",\n        onChange: this.onFieldChange,\n        checked: fields.isCommercial\n      })))));\n    }\n\n    return renderAddressOptions;\n  }();\n  /**\n   * @method renderButtons\n   * @summary renders submit and cancel buttons for address book form\n   * if no address in addressBook array don't show the cancel button\n   * since the user needs to add a default address.\n   * @since 2.0.0\n   * @return {Object} - JSX\n   */\n\n\n  _proto.renderButtons = function () {\n    function renderButtons() {\n      var _props2 = this.props,\n          cancel = _props2.cancel,\n          hasAddress = _props2.hasAddress;\n      var cancelBtn = React.createElement(Components.Button, {\n        buttonType: \"reset\",\n        className: \"btn btn-default\",\n        bezelStyle: \"solid\",\n        onClick: cancel,\n        i18nKeyLabel: \"app.cancel\",\n        label: \"Cancel\"\n      });\n      return React.createElement(\"div\", {\n        className: \"row text-right\"\n      }, React.createElement(Components.Button, {\n        buttonType: \"submit\",\n        className: \"btn btn-primary\",\n        bezelStyle: \"solid\",\n        i18nKeyLabel: \"app.saveAndContinue\",\n        label: \"Save and continue\"\n      }), hasAddress ? cancelBtn : \"\");\n    }\n\n    return renderButtons;\n  }();\n\n  _proto.render = function () {\n    function render() {\n      var countries = this.props.countries;\n      var _state = this.state,\n          regions = _state.regions,\n          fields = _state.fields,\n          validation = _state.validation;\n      var regionField;\n\n      if (regions.length === 0) {\n        // if no region optioins\n        // render a TextField\n        regionField = React.createElement(Components.TextField, {\n          i18nKeyLabel: this.fieldLabelMap.region.i18nKeyLabel,\n          label: this.fieldLabelMap.region.label,\n          name: \"region\",\n          onChange: this.onFieldChange,\n          value: fields.region,\n          validation: validation\n        });\n      } else {\n        // if region optioins\n        // render a Select\n        regionField = React.createElement(Components.Select, {\n          i18nKeyLabel: this.fieldLabelMap.region.i18nKeyLabel,\n          label: this.fieldLabelMap.region.label,\n          name: \"region\",\n          options: regions,\n          onChange: this.onSelectChange,\n          value: fields.region,\n          validation: validation\n        });\n      }\n\n      return React.createElement(\"form\", {\n        onSubmit: this.onSubmit\n      }, React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(\"div\", {\n        className: \"col-md-6\"\n      }, React.createElement(Components.Select, {\n        i18nKeyLabel: this.fieldLabelMap.country.i18nKeyLabel,\n        label: this.fieldLabelMap.country.label,\n        name: \"country\",\n        options: countries,\n        onChange: this.onSelectChange,\n        placeholder: \"Country\",\n        value: fields.country,\n        validation: validation\n      }))), React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(\"div\", {\n        className: \"col-md-6\"\n      }, React.createElement(Components.TextField, {\n        i18nKeyLabel: this.fieldLabelMap.fullName.i18nKeyLabel,\n        label: this.fieldLabelMap.fullName.label,\n        name: \"fullName\",\n        onChange: this.onFieldChange,\n        value: fields.fullName,\n        validation: validation\n      }))), React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(\"div\", {\n        className: \"col-md-6\"\n      }, React.createElement(Components.TextField, {\n        i18nKeyLabel: this.fieldLabelMap.address1.i18nKeyLabel,\n        label: this.fieldLabelMap.address1.label,\n        name: \"address1\",\n        onChange: this.onFieldChange,\n        value: fields.address1,\n        validation: validation\n      })), React.createElement(\"div\", {\n        className: \"col-md-6\"\n      }, React.createElement(Components.TextField, {\n        i18nKeyLabel: this.fieldLabelMap.address2.i18nKeyLabel,\n        label: this.fieldLabelMap.address2.label,\n        name: \"address2\",\n        onChange: this.onFieldChange,\n        value: fields.address2,\n        validation: validation\n      }))), React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(\"div\", {\n        className: \"col-md-4\"\n      }, React.createElement(Components.TextField, {\n        i18nKeyLabel: this.fieldLabelMap.postal.i18nKeyLabel,\n        label: this.fieldLabelMap.postal.label,\n        name: \"postal\",\n        onChange: this.onFieldChange,\n        value: fields.postal,\n        validation: validation\n      })), React.createElement(\"div\", {\n        className: \"col-md-4\"\n      }, React.createElement(Components.TextField, {\n        i18nKeyLabel: this.fieldLabelMap.city.i18nKeyLabel,\n        label: this.fieldLabelMap.city.label,\n        name: \"city\",\n        onChange: this.onFieldChange,\n        value: fields.city,\n        validation: validation\n      })), React.createElement(\"div\", {\n        className: \"col-md-4\"\n      }, regionField)), React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(\"div\", {\n        className: \"col-md-4\"\n      }, React.createElement(Components.TextField, {\n        i18nKeyLabel: this.fieldLabelMap.phone.i18nKeyLabel,\n        label: this.fieldLabelMap.phone.label,\n        name: \"phone\",\n        onChange: this.onFieldChange,\n        value: fields.phone,\n        validation: validation\n      }))), this.renderAddressOptions(), this.renderButtons());\n    }\n\n    return render;\n  }();\n\n  return AddressBookForm;\n}(Component);\n\nAddressBookForm.propTypes = {\n  /**\n   * add addess callback\n   */\n  add: PropTypes.func,\n\n  /**\n   * cancel address entry and render AddressBookGrid\n   */\n  cancel: PropTypes.func,\n\n  /**\n   * country options for select\n   */\n  countries: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string,\n    value: PropTypes.string\n  })),\n\n  /**\n   * address object\n   */\n  editAddress: PropTypes.object,\n\n  /**\n   * has address in addressBook\n   */\n  hasAddress: PropTypes.bool,\n\n  /**\n   * regions by county\n   */\n  regionsByCountry: PropTypes.object\n};\nregisterComponent(\"AddressBookForm\", AddressBookForm);\nmodule.exportDefault(AddressBookForm);","map":{"version":3,"sources":["imports/plugins/core/accounts/client/components/addressBookForm.js"],"names":["React","Component","module","watch","require","v","PropTypes","HTTP","Components","registerComponent","AddressBookForm","props","fieldLabelMap","region","label","i18nKeyLabel","country","fullName","address1","address2","postal","city","phone","clientValidation","enteredAddress","requiredFields","validation","messages","isValid","Object","keys","forEach","key","indexOf","trim","message","setState","undefined","onSubmit","event","preventDefault","add","state","fields","onFieldChange","value","name","setRegionOptions","onSelectChange","Event","regions","_id","editAddress","isShippingDefault","hasAddress","isBillingDefault","isCommercial","get","err","res","countryCode","data","country_code","prevState","componentWillMount","regionsByCountry","length","firstRegion","renderAddressOptions","defaultOptions","paddingLeft","renderButtons","cancel","cancelBtn","render","countries","regionField","propTypes","func","arrayOf","shape","string","object","bool","exportDefault"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { HTTP } from \"meteor/http\";\nimport { Components, registerComponent } from \"@reactioncommerce/reaction-components\";\n\nclass AddressBookForm extends Component {\n  static propTypes = {\n    /**\n     * add addess callback\n     */\n    add: PropTypes.func,\n    /**\n     * cancel address entry and render AddressBookGrid\n     */\n    cancel: PropTypes.func,\n    /**\n     * country options for select\n     */\n    countries: PropTypes.arrayOf(PropTypes.shape({\n      label: PropTypes.string,\n      value: PropTypes.string\n    })),\n    /**\n     * address object\n     */\n    editAddress: PropTypes.object,\n    /**\n     * has address in addressBook\n     */\n    hasAddress: PropTypes.bool,\n    /**\n     * regions by county\n     */\n    regionsByCountry: PropTypes.object\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      regions: [],\n      fields: {\n        _id: this.props.editAddress._id,\n        country: this.props.editAddress.country || \"US\", // defaults to United States\n        fullName: this.props.editAddress.fullName || \"\",\n        address1: this.props.editAddress.address1 || \"\",\n        address2: this.props.editAddress.address2 || \"\",\n        postal: this.props.editAddress.postal || \"\",\n        city: this.props.editAddress.city || \"\",\n        region: this.props.editAddress.region || \"\",\n        phone: this.props.editAddress.phone || \"\",\n        isShippingDefault: this.props.editAddress.isShippingDefault || (!this.props.hasAddress), // no address, default to true\n        isBillingDefault: this.props.editAddress.isBillingDefault || (!this.props.hasAddress), // no addres, default to true\n        isCommercial: this.props.editAddress.isCommercial || false\n      }\n    };\n    // Getting the user's countrt and setting it as default\n    HTTP.get(\"https://geo.getreaction.io/json/\", (err, res) => {\n      if (!err) {\n        const countryCode = res.data.country_code;\n        if (countryCode && !this.props.editAddress.country) {\n          this.setState((prevState) => ({\n            fields: {\n              ...prevState.fields,\n              country: countryCode\n            }\n          }), () => {\n            this.setRegionOptions(countryCode);\n          });\n        }\n      }\n    });\n  }\n\n  componentWillMount() {\n    const { fields: { country } } = this.state;\n\n    // if selected country has region options set those too\n    this.setRegionOptions(country);\n  }\n  // Address Book Form helpers\n\n  fieldLabelMap = {\n    region: {\n      label: \"Region\",\n      i18nKeyLabel: \"address.region\"\n    },\n    country: {\n      label: \"Country\",\n      i18nKeyLabel: \"address.country\"\n    },\n    fullName: {\n      label: \"Full Name\",\n      i18nKeyLabel: \"address.fullName\"\n    },\n    address1: {\n      label: \"Address\",\n      i18nKeyLabel: \"address.address1\"\n    },\n    address2: {\n      label: \"Address\",\n      i18nKeyLabel: \"address.address2\"\n    },\n    postal: {\n      label: \"Postal\",\n      i18nKeyLabel: \"address.postal\"\n    },\n    city: {\n      label: \"City\",\n      i18nKeyLabel: \"address.city\"\n    },\n    phone: {\n      label: \"Phone\",\n      i18nKeyLabel: \"address.phone\"\n    }\n  }\n\n\n  /**\n   * @method setRegionOptions\n   * @summary creates an array of region options for the regions select field.\n   * @since 2.0.0\n   * @param {String} country - country code \"US\" \"CA\" \"JP\"\n   */\n  setRegionOptions(country) {\n    const { regionsByCountry, editAddress } = this.props;\n    const { fields } = this.state;\n    const regions = regionsByCountry[country];\n\n    // if the region field is empty\n    if (Object.keys(editAddress).length) {\n      this.setState({ regions });\n    } else {\n      // setting the fields region to be the\n      // first region in options array\n      const [firstRegion] = regions;\n      if (firstRegion !== null && typeof firstRegion === \"object\") {\n        fields.region = firstRegion.value;\n      } else {\n        fields.region = firstRegion;\n      }\n      this.setState({ regions, fields });\n    }\n  }\n\n  clientValidation = (enteredAddress) => {\n    const requiredFields = [\"country\", \"fullName\", \"address1\", \"postal\", \"city\", \"region\", \"phone\"];\n    const validation = { messages: {} };\n    let isValid = true;\n    Object.keys(enteredAddress).forEach((key) => {\n      if (enteredAddress[key] && typeof enteredAddress[key] === \"string\" && requiredFields.indexOf(key) > -1) {\n        enteredAddress[key] = enteredAddress[key].trim();\n      }\n      if (requiredFields.indexOf(key) > -1 && !enteredAddress[key]) {\n        validation.messages[key] = {\n          message: `${this.fieldLabelMap[key].label} is required`\n        };\n        isValid = false;\n      }\n    });\n    if (!isValid) {\n      this.setState({\n        validation\n      });\n    } else {\n      this.setState({\n        validation: undefined\n      });\n    }\n    return isValid;\n  }\n\n  // Address Book Form Actions\n\n  /**\n   * @method onSubmit\n   * @summary takes the entered address and adds or updates it to the addressBook.\n   * @since 2.0.0\n   */\n  onSubmit = (event) => {\n    event.preventDefault();\n    const { add } = this.props;\n    const { fields: enteredAddress } = this.state; // fields object as enteredAddress\n    // TODO: field validatiion\n    if (this.clientValidation(enteredAddress)) {\n      add(enteredAddress);\n    }\n  }\n\n  /**\n   * @method onFieldChange\n   * @summary when field values change update the value in state\n   * @since 2.0.0\n   */\n  onFieldChange = (event, value, name) => {\n    const { fields } = this.state;\n    fields[name] = value;\n    this.setState({ fields });\n    // if country changed set new region options\n    if (name === \"country\") this.setRegionOptions(value);\n  }\n\n  /**\n   * @method onSelectChange\n   * @summary normalizes the select components onChange.\n   * @since 2.0.0\n   */\n  onSelectChange = (value, name) => {\n    // the reaction select component doesn't return\n    // the same values as the other field components\n    // this updates that return and calls the\n    // typical on field change handler\n    this.onFieldChange(new Event(\"onSelect\"), value, name);\n  }\n\n  // Address Book Form JSX\n\n  /**\n   * @method renderAddressOptiions\n   * @summary renders address options at the bottom of the address book form\n   * if no address in addressBook array only show the isCommercial option\n   * since a first address will always be the default shipping/billing address.\n   * @since 2.0.0\n   * @return {Object} - JSX and Checkbox components.\n   */\n  renderAddressOptions() {\n    const { hasAddress } = this.props;\n    const { fields } = this.state;\n    let defaultOptions;\n    if (hasAddress) {\n      defaultOptions = (\n        <div>\n          <div className=\"form-group\">\n            <div className=\"checkbox\">\n              <Components.Checkbox\n                i18nKeyLabel=\"address.isShippingDefault\"\n                label=\"Make this your default shipping address.\"\n                name=\"isShippingDefault\"\n                onChange={this.onFieldChange}\n                checked={fields.isShippingDefault}\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <div className=\"checkbox\">\n              <Components.Checkbox\n                i18nKeyLabel=\"address.isBillingDefault\"\n                label=\"Make this your default billing address.\"\n                name=\"isBillingDefault\"\n                onChange={this.onFieldChange}\n                checked={fields.isBillingDefault}\n              />\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"row address-options\" style={{ paddingLeft: \"5px\" }}>\n        <div className=\"col-md-12\">\n          {defaultOptions}\n          <div className=\"form-group\">\n            <div className=\"checkbox\">\n              <Components.Checkbox\n                i18nKeyLabel=\"address.isCommercial\"\n                label=\"This is a commercal address.\"\n                name=\"isCommercial\"\n                onChange={this.onFieldChange}\n                checked={fields.isCommercial}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * @method renderButtons\n   * @summary renders submit and cancel buttons for address book form\n   * if no address in addressBook array don't show the cancel button\n   * since the user needs to add a default address.\n   * @since 2.0.0\n   * @return {Object} - JSX\n   */\n  renderButtons() {\n    const { cancel, hasAddress } = this.props;\n    const cancelBtn = (\n      <Components.Button\n        buttonType=\"reset\"\n        className=\"btn btn-default\"\n        bezelStyle=\"solid\"\n        onClick={cancel}\n        i18nKeyLabel=\"app.cancel\"\n        label=\"Cancel\"\n      />\n    );\n    return (\n      <div className=\"row text-right\">\n        <Components.Button\n          buttonType=\"submit\"\n          className=\"btn btn-primary\"\n          bezelStyle=\"solid\"\n          i18nKeyLabel=\"app.saveAndContinue\"\n          label=\"Save and continue\"\n        />\n        {(hasAddress) ? cancelBtn : \"\"}\n      </div>\n    );\n  }\n\n  render() {\n    const { countries } = this.props;\n    const { regions, fields, validation } = this.state;\n    let regionField;\n    if (regions.length === 0) {\n      // if no region optioins\n      // render a TextField\n      regionField = (\n        <Components.TextField\n          i18nKeyLabel={this.fieldLabelMap.region.i18nKeyLabel}\n          label={this.fieldLabelMap.region.label}\n          name=\"region\"\n          onChange={this.onFieldChange}\n          value={fields.region}\n          validation={validation}\n        />\n      );\n    } else {\n      // if region optioins\n      // render a Select\n      regionField = (\n        <Components.Select\n          i18nKeyLabel={this.fieldLabelMap.region.i18nKeyLabel}\n          label={this.fieldLabelMap.region.label}\n          name=\"region\"\n          options={regions}\n          onChange={this.onSelectChange}\n          value={fields.region}\n          validation={validation}\n        />\n      );\n    }\n    return (\n      <form onSubmit={this.onSubmit}>\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <Components.Select\n              i18nKeyLabel={this.fieldLabelMap.country.i18nKeyLabel}\n              label={this.fieldLabelMap.country.label}\n              name=\"country\"\n              options={countries}\n              onChange={this.onSelectChange}\n              placeholder=\"Country\"\n              value={fields.country}\n              validation={validation}\n            />\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <Components.TextField\n              i18nKeyLabel={this.fieldLabelMap.fullName.i18nKeyLabel}\n              label={this.fieldLabelMap.fullName.label}\n              name=\"fullName\"\n              onChange={this.onFieldChange}\n              value={fields.fullName}\n              validation={validation}\n            />\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <Components.TextField\n              i18nKeyLabel={this.fieldLabelMap.address1.i18nKeyLabel}\n              label={this.fieldLabelMap.address1.label}\n              name=\"address1\"\n              onChange={this.onFieldChange}\n              value={fields.address1}\n              validation={validation}\n            />\n          </div>\n          <div className=\"col-md-6\">\n            <Components.TextField\n              i18nKeyLabel={this.fieldLabelMap.address2.i18nKeyLabel}\n              label={this.fieldLabelMap.address2.label}\n              name=\"address2\"\n              onChange={this.onFieldChange}\n              value={fields.address2}\n              validation={validation}\n            />\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-md-4\">\n            <Components.TextField\n              i18nKeyLabel={this.fieldLabelMap.postal.i18nKeyLabel}\n              label={this.fieldLabelMap.postal.label}\n              name=\"postal\"\n              onChange={this.onFieldChange}\n              value={fields.postal}\n              validation={validation}\n            />\n          </div>\n          <div className=\"col-md-4\">\n            <Components.TextField\n              i18nKeyLabel={this.fieldLabelMap.city.i18nKeyLabel}\n              label={this.fieldLabelMap.city.label}\n              name=\"city\"\n              onChange={this.onFieldChange}\n              value={fields.city}\n              validation={validation}\n            />\n          </div>\n          <div className=\"col-md-4\">\n            {regionField}\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-md-4\">\n            <Components.TextField\n              i18nKeyLabel={this.fieldLabelMap.phone.i18nKeyLabel}\n              label={this.fieldLabelMap.phone.label}\n              name=\"phone\"\n              onChange={this.onFieldChange}\n              value={fields.phone}\n              validation={validation}\n            />\n          </div>\n        </div>\n\n        {this.renderAddressOptions()}\n        {this.renderButtons()}\n      </form>\n    );\n  }\n}\n\nregisterComponent(\"AddressBookForm\", AddressBookForm);\n\nexport default AddressBookForm;\n"]},"sourceType":"script","hash":"0c97af2b6d233b62e2b867ce9a6b701b0d36cf8e"}
