{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/core/ui/client/components/textfield/textfield.js","filename":"imports/plugins/core/ui/client/components/textfield/textfield.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/core/ui/client/components/textfield/textfield.js","plugins":["dynamicImport","classProperties","jsx","jsx","flow","asyncGenerators","objectRestSpread","objectRestSpread","flow","asyncGenerators"]},"generatorOpts":{"filename":"imports/plugins/core/ui/client/components/textfield/textfield.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/core/ui/client/components/textfield/textfield.js"}},"code":"var _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React, Component;\nmodule.watch(require(\"react\"), {\n  \"default\": function (v) {\n    React = v;\n  },\n  Component: function (v) {\n    Component = v;\n  }\n}, 0);\nvar PropTypes;\nmodule.watch(require(\"prop-types\"), {\n  \"default\": function (v) {\n    PropTypes = v;\n  }\n}, 1);\nvar classnames;\nmodule.watch(require(\"classnames\"), {\n  \"default\": function (v) {\n    classnames = v;\n  }\n}, 2);\nvar TextareaAutosize;\nmodule.watch(require(\"react-textarea-autosize\"), {\n  \"default\": function (v) {\n    TextareaAutosize = v;\n  }\n}, 3);\nvar Components, registerComponent;\nmodule.watch(require(\"../../../../components/lib\"), {\n  Components: function (v) {\n    Components = v;\n  },\n  registerComponent: function (v) {\n    registerComponent = v;\n  }\n}, 4);\nvar i18next;\nmodule.watch(require(\"../../../../../../../client/api\"), {\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 5);\n\nvar TextField =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inheritsLoose2.default)(TextField, _Component);\n\n  function TextField() {\n    var _temp, _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return (_temp = _this = _Component.call.apply(_Component, [this].concat(args)) || this, _this.onChange = function (event) {\n      if (_this.props.onChange) {\n        _this.props.onChange(event, _this.getEventValue(event), _this.props.name);\n      }\n    }, _this.onBlur = function (event) {\n      if (_this.props.onBlur) {\n        _this.props.onBlur(event, _this.getEventValue(event), _this.props.name);\n      }\n    }, _this.onFocus = function (event) {\n      if (_this.props.onFocus) {\n        _this.props.onFocus(event, _this.getEventValue(event), _this.props.name);\n      }\n    }, _this.onKeyDown = function (event) {\n      if (_this.props.onKeyDown) {\n        _this.props.onKeyDown(event, _this.props.name);\n      }\n\n      if (_this.props.onReturnKeyDown && event.keyCode === 13) {\n        _this.props.onReturnKeyDown(event, event.target.value, _this.props.name);\n      }\n    }, _temp) || (0, _assertThisInitialized2.default)(_this);\n  }\n\n  var _proto = TextField.prototype;\n\n  _proto.getEventValue = function () {\n    function getEventValue(event) {\n      if (this.props.type === \"number\") {\n        try {\n          return Number(event.target.value);\n        } catch (err) {\n          return event.target.value;\n        }\n      }\n\n      return event.target.value;\n    }\n\n    return getEventValue;\n  }();\n  /**\n   * onValueChange\n   * @summary set the state when the value of the input is changed\n   * @param  {Event} event Event object\n   * @return {void}\n   */\n\n\n  /**\n   * Render a multiline input (textarea)\n   * @return {JSX} jsx\n   */\n  _proto.renderMultilineInput = function () {\n    function renderMultilineInput() {\n      var placeholder = i18next.t(this.props.i18nKeyPlaceholder, {\n        defaultValue: this.props.placeholder\n      });\n      return React.createElement(TextareaAutosize, {\n        className: this.props.name + \"-edit-input\",\n        onBlur: this.onBlur,\n        onChange: this.onChange,\n        onFocus: this.onFocus,\n        placeholder: placeholder,\n        ref: \"input\",\n        value: this.value,\n        style: this.props.style,\n        disabled: this.props.disabled,\n        maxRows: this.props.maxRows,\n        id: this.props.id\n      });\n    }\n\n    return renderMultilineInput;\n  }();\n  /**\n   * Render a singleline input\n   * @return {JSX} jsx\n   */\n\n\n  _proto.renderSingleLineInput = function () {\n    function renderSingleLineInput() {\n      var _classnames;\n\n      var inputClassName = classnames((_classnames = {}, _classnames[(this.props.name || \"text\") + \"-edit-input\"] = true, _classnames), this.props.className);\n      var placeholder = i18next.t(this.props.i18nKeyPlaceholder, {\n        defaultValue: this.props.placeholder\n      });\n      return React.createElement(\"input\", {\n        className: inputClassName,\n        name: this.props.name,\n        onBlur: this.onBlur,\n        onChange: this.onChange,\n        onFocus: this.onFocus,\n        onKeyDown: this.onKeyDown,\n        placeholder: placeholder,\n        ref: \"input\",\n        type: this.props.type || \"text\",\n        min: this.props.minValue,\n        max: this.props.maxValue,\n        value: this.value,\n        style: this.props.style,\n        disabled: this.props.disabled,\n        id: this.props.id\n      });\n    }\n\n    return renderSingleLineInput;\n  }();\n  /**\n   * Render either a multiline (textarea) or singleline (input)\n   * @return {JSX} jsx template\n   */\n\n\n  _proto.renderField = function () {\n    function renderField() {\n      if (this.props.multiline === true) {\n        return this.renderMultilineInput();\n      }\n\n      return this.renderSingleLineInput();\n    }\n\n    return renderField;\n  }();\n  /**\n   * Render the label for the text field if one is provided in props\n   * @return {ReactNode|null} react node or null\n   */\n\n\n  _proto.renderLabel = function () {\n    function renderLabel() {\n      if (this.props.label) {\n        return React.createElement(\"label\", {\n          htmlFor: this.props.id\n        }, React.createElement(Components.Translation, {\n          defaultValue: this.props.label,\n          i18nKey: this.props.i18nKeyLabel\n        }));\n      }\n\n      return null;\n    }\n\n    return renderLabel;\n  }();\n  /**\n   * Render help text or validation message\n   * @return {ReactNode|null} react node or null\n   */\n\n\n  _proto.renderHelpText = function () {\n    function renderHelpText() {\n      var helpMode = this.isHelpMode;\n      var message = this.validationMessage;\n      var helpText = this.props.helpText;\n      var i18nKey = this.props.i18nKeyHelpText;\n\n      if (this.isValid === false && message) {\n        helpText = message.message;\n        i18nKey = message.i18nKeyMessage;\n      } // If this is a validation message, show even if helpMode is false\n\n\n      if (this.isValid === false && message) {\n        return React.createElement(\"span\", {\n          className: \"help-block\"\n        }, React.createElement(Components.Translation, {\n          defaultValue: helpText,\n          i18nKey: i18nKey\n        }));\n      } // If this is a non-validation message, only show if helpMode is true\n\n\n      if (helpText && helpMode) {\n        return React.createElement(\"span\", {\n          className: \"help-block\"\n        }, React.createElement(Components.Translation, {\n          defaultValue: helpText,\n          i18nKey: i18nKey\n        }));\n      }\n\n      return null;\n    }\n\n    return renderHelpText;\n  }();\n  /**\n   * Render Component\n   * @return {JSX} component\n   */\n\n\n  _proto.render = function () {\n    function render() {\n      var classes = classnames({\n        // Base\n        \"rui\": true,\n        \"textfield\": true,\n        \"form-group\": true,\n        \"has-error\": this.isValid === false,\n        \"has-success\": this.isValid === true,\n        // Alignment\n        \"center\": this.props.align === \"center\",\n        \"left\": this.props.align === \"left\",\n        \"right\": this.props.align === \"right\"\n      });\n      return React.createElement(\"div\", {\n        className: classes,\n        style: this.props.textFieldStyle\n      }, this.renderLabel(), this.renderField(), this.renderHelpText(), React.createElement(\"span\", {\n        className: \"product-detail-message\",\n        id: \"{{field}}-message\"\n      }));\n    }\n\n    return render;\n  }();\n\n  (0, _createClass2.default)(TextField, [{\n    key: \"value\",\n\n    /**\n     * Getter: value\n     * @return {String} value for text input\n     */\n    get: function () {\n      // if the props.value is not a number\n      // return either the value or and empty string\n      if (isNaN(this.props.value)) {\n        return this.props.value || \"\";\n      }\n\n      return this.props.value;\n    }\n    /**\n     * Getter: isValid\n     * @return {Boolean} true/false if field is valid from props.isValid or props.valitation[this.props.name].isValid\n     */\n\n  }, {\n    key: \"isValid\",\n    get: function () {\n      var isValid = this.props.isValid;\n\n      if (typeof isValid === \"boolean\") {\n        return isValid;\n      } else if (this.validationMessage) {\n        return false;\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"isHelpMode\",\n    get: function () {\n      // TODO: add functionality to toggle helpMode on / off.\n      // When on, helpText will always show.\n      // When off, only validation messages will show.\n      // For now, all helpText will show, meaning this doesn't affect how the app currently works.\n      // This is here just to lay the foundation for when we add the toggle.\n      return true;\n    }\n  }, {\n    key: \"validationMessage\",\n    get: function () {\n      var _props = this.props,\n          name = _props.name,\n          validation = _props.validation;\n\n      if ((0, _typeof2.default)(validation) === \"object\" && validation.messages && validation.messages[name]) {\n        return validation.messages[name];\n      }\n\n      return undefined;\n    }\n  }]);\n  return TextField;\n}(Component);\n\nTextField.propTypes = {\n  align: PropTypes.oneOf([\"left\", \"center\", \"right\", \"justify\"]),\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  helpText: PropTypes.string,\n  i18nKeyHelpText: PropTypes.string,\n  i18nKeyLabel: PropTypes.string,\n  i18nKeyPlaceholder: PropTypes.string,\n  id: PropTypes.string,\n  isValid: PropTypes.bool,\n  label: PropTypes.string,\n  maxRows: PropTypes.number,\n  maxValue: PropTypes.any,\n  minValue: PropTypes.number,\n  multiline: PropTypes.bool,\n  name: PropTypes.string,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onReturnKeyDown: PropTypes.func,\n  placeholder: PropTypes.string,\n  style: PropTypes.object,\n  textFieldStyle: PropTypes.object,\n  type: PropTypes.string,\n  validation: PropTypes.object,\n  value: PropTypes.any\n};\nregisterComponent(\"TextField\", TextField);\nmodule.exportDefault(TextField);","map":{"version":3,"sources":["imports/plugins/core/ui/client/components/textfield/textfield.js"],"names":["React","Component","module","watch","require","v","PropTypes","classnames","TextareaAutosize","Components","registerComponent","i18next","TextField","onChange","event","props","getEventValue","name","onBlur","onFocus","onKeyDown","onReturnKeyDown","keyCode","target","value","type","Number","err","renderMultilineInput","placeholder","t","i18nKeyPlaceholder","defaultValue","style","disabled","maxRows","id","renderSingleLineInput","inputClassName","className","minValue","maxValue","renderField","multiline","renderLabel","label","i18nKeyLabel","renderHelpText","helpMode","isHelpMode","message","validationMessage","helpText","i18nKey","i18nKeyHelpText","isValid","i18nKeyMessage","render","classes","align","textFieldStyle","isNaN","undefined","validation","messages","propTypes","oneOf","string","bool","number","any","func","object","exportDefault"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport { Components, registerComponent } from \"@reactioncommerce/reaction-components\";\nimport { i18next } from \"/client/api\";\n\n\nclass TextField extends Component {\n  /**\n   * Getter: value\n   * @return {String} value for text input\n   */\n  get value() {\n    // if the props.value is not a number\n    // return either the value or and empty string\n    if (isNaN(this.props.value)) {\n      return this.props.value || \"\";\n    }\n    return this.props.value;\n  }\n\n  /**\n   * Getter: isValid\n   * @return {Boolean} true/false if field is valid from props.isValid or props.valitation[this.props.name].isValid\n   */\n  get isValid() {\n    const { isValid } = this.props;\n\n    if (typeof isValid === \"boolean\") {\n      return isValid;\n    } else if (this.validationMessage) {\n      return false;\n    }\n\n    return undefined;\n  }\n\n  get isHelpMode() {\n    // TODO: add functionality to toggle helpMode on / off.\n    // When on, helpText will always show.\n    // When off, only validation messages will show.\n    // For now, all helpText will show, meaning this doesn't affect how the app currently works.\n    // This is here just to lay the foundation for when we add the toggle.\n\n    return true;\n  }\n\n  get validationMessage() {\n    const { name, validation } = this.props;\n\n    if (typeof validation === \"object\" && validation.messages && validation.messages[name]) {\n      return validation.messages[name];\n    }\n\n    return undefined;\n  }\n\n  getEventValue(event) {\n    if (this.props.type === \"number\") {\n      try {\n        return Number(event.target.value);\n      } catch (err) {\n        return event.target.value;\n      }\n    }\n    return event.target.value;\n  }\n\n  /**\n   * onValueChange\n   * @summary set the state when the value of the input is changed\n   * @param  {Event} event Event object\n   * @return {void}\n   */\n  onChange = (event) => {\n    if (this.props.onChange) {\n      this.props.onChange(event, this.getEventValue(event), this.props.name);\n    }\n  }\n\n  /**\n   * onBlur\n   * @summary set the state when the value of the input is changed\n   * @param  {Event} event Event object\n   * @return {void}\n   */\n  onBlur = (event) => {\n    if (this.props.onBlur) {\n      this.props.onBlur(event, this.getEventValue(event), this.props.name);\n    }\n  }\n\n  /**\n   * onFocus\n   * @summary set the state when the input is focused\n   * @param  {Event} event Event object\n   * @return {void}\n   */\n  onFocus = (event) => {\n    if (this.props.onFocus) {\n      this.props.onFocus(event, this.getEventValue(event), this.props.name);\n    }\n  }\n\n  /**\n   * onKeyDown\n   * @summary set the state when the value of the input is changed\n   * @param  {Event} event Event object\n   * @return {void}\n   */\n  onKeyDown = (event) => {\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(event, this.props.name);\n    }\n\n    if (this.props.onReturnKeyDown && event.keyCode === 13) {\n      this.props.onReturnKeyDown(event, event.target.value, this.props.name);\n    }\n  }\n\n  /**\n   * Render a multiline input (textarea)\n   * @return {JSX} jsx\n   */\n  renderMultilineInput() {\n    const placeholder = i18next.t(this.props.i18nKeyPlaceholder, {\n      defaultValue: this.props.placeholder\n    });\n\n    return (\n      <TextareaAutosize\n        className={`${this.props.name}-edit-input`}\n        onBlur={this.onBlur}\n        onChange={this.onChange}\n        onFocus={this.onFocus}\n        placeholder={placeholder}\n        ref=\"input\"\n        value={this.value}\n        style={this.props.style}\n        disabled={this.props.disabled}\n        maxRows={this.props.maxRows}\n        id={this.props.id}\n      />\n    );\n  }\n\n  /**\n   * Render a singleline input\n   * @return {JSX} jsx\n   */\n  renderSingleLineInput() {\n    const inputClassName = classnames({\n      [`${this.props.name || \"text\"}-edit-input`]: true\n    }, this.props.className);\n\n    const placeholder = i18next.t(this.props.i18nKeyPlaceholder, {\n      defaultValue: this.props.placeholder\n    });\n\n    return (\n      <input\n        className={inputClassName}\n        name={this.props.name}\n        onBlur={this.onBlur}\n        onChange={this.onChange}\n        onFocus={this.onFocus}\n        onKeyDown={this.onKeyDown}\n        placeholder={placeholder}\n        ref=\"input\"\n        type={this.props.type || \"text\"}\n        min={this.props.minValue}\n        max={this.props.maxValue}\n        value={this.value}\n        style={this.props.style}\n        disabled={this.props.disabled}\n        id={this.props.id}\n      />\n    );\n  }\n\n  /**\n   * Render either a multiline (textarea) or singleline (input)\n   * @return {JSX} jsx template\n   */\n  renderField() {\n    if (this.props.multiline === true) {\n      return this.renderMultilineInput();\n    }\n\n    return this.renderSingleLineInput();\n  }\n\n  /**\n   * Render the label for the text field if one is provided in props\n   * @return {ReactNode|null} react node or null\n   */\n  renderLabel() {\n    if (this.props.label) {\n      return (\n        <label htmlFor={this.props.id}>\n          <Components.Translation defaultValue={this.props.label} i18nKey={this.props.i18nKeyLabel} />\n        </label>\n      );\n    }\n\n    return null;\n  }\n\n  /**\n   * Render help text or validation message\n   * @return {ReactNode|null} react node or null\n   */\n  renderHelpText() {\n    const helpMode = this.isHelpMode;\n    const message = this.validationMessage;\n    let { helpText } = this.props;\n    let i18nKey = this.props.i18nKeyHelpText;\n\n    if (this.isValid === false && message) {\n      helpText = message.message;\n      i18nKey = message.i18nKeyMessage;\n    }\n\n    // If this is a validation message, show even if helpMode is false\n    if (this.isValid === false && message) {\n      return (\n        <span className=\"help-block\">\n          <Components.Translation defaultValue={helpText} i18nKey={i18nKey} />\n        </span>\n      );\n    }\n\n    // If this is a non-validation message, only show if helpMode is true\n    if (helpText && helpMode) {\n      return (\n        <span className=\"help-block\">\n          <Components.Translation defaultValue={helpText} i18nKey={i18nKey} />\n        </span>\n      );\n    }\n\n    return null;\n  }\n\n  /**\n   * Render Component\n   * @return {JSX} component\n   */\n  render() {\n    const classes = classnames({\n      // Base\n      \"rui\": true,\n      \"textfield\": true,\n      \"form-group\": true,\n      \"has-error\": this.isValid === false,\n      \"has-success\": this.isValid === true,\n\n      // Alignment\n      \"center\": this.props.align === \"center\",\n      \"left\": this.props.align === \"left\",\n      \"right\": this.props.align === \"right\"\n    });\n\n    return (\n      <div className={classes} style={this.props.textFieldStyle}>\n        {this.renderLabel()}\n        {this.renderField()}\n        {this.renderHelpText()}\n        <span className=\"product-detail-message\" id=\"{{field}}-message\" />\n      </div>\n    );\n  }\n}\n\nTextField.propTypes = {\n  align: PropTypes.oneOf([\"left\", \"center\", \"right\", \"justify\"]),\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  helpText: PropTypes.string,\n  i18nKeyHelpText: PropTypes.string,\n  i18nKeyLabel: PropTypes.string,\n  i18nKeyPlaceholder: PropTypes.string,\n  id: PropTypes.string,\n  isValid: PropTypes.bool,\n  label: PropTypes.string,\n  maxRows: PropTypes.number,\n  maxValue: PropTypes.any,\n  minValue: PropTypes.number,\n  multiline: PropTypes.bool,\n  name: PropTypes.string,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onReturnKeyDown: PropTypes.func,\n  placeholder: PropTypes.string,\n  style: PropTypes.object,\n  textFieldStyle: PropTypes.object,\n  type: PropTypes.string,\n  validation: PropTypes.object,\n  value: PropTypes.any\n};\n\nregisterComponent(\"TextField\", TextField);\n\nexport default TextField;\n"]},"sourceType":"script","hash":"cd90aed0197fcaa8c2bfc489b100b3a7f2059d7d"}
