{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/included/shipping-shippo/server/methods/shippoapi.js","filename":"imports/plugins/included/shipping-shippo/server/methods/shippoapi.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/included/shipping-shippo/server/methods/shippoapi.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/included/shipping-shippo/server/methods/shippoapi.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/included/shipping-shippo/server/methods/shippoapi.js"}},"code":"const module1 = module;\nmodule1.export({\n  ShippoApi: () => ShippoApi\n});\nlet Shippo;\nmodule1.watch(require(\"shippo\"), {\n  default(v) {\n    Shippo = v;\n  }\n\n}, 0);\nlet SimpleSchema;\nmodule1.watch(require(\"simpl-schema\"), {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 1);\nlet Meteor;\nmodule1.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 2);\nlet ValidatedMethod;\nmodule1.watch(require(\"meteor/mdg:validated-method\"), {\n  ValidatedMethod(v) {\n    ValidatedMethod = v;\n  }\n\n}, 3);\nlet Logger;\nmodule1.watch(require(\"../../../../../../server/api\"), {\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 4);\nlet purchaseAddressSchema, parcelSchema;\nmodule1.watch(require(\"../lib/shippoApiSchema\"), {\n  purchaseAddressSchema(v) {\n    purchaseAddressSchema = v;\n  },\n\n  parcelSchema(v) {\n    parcelSchema = v;\n  }\n\n}, 5);\nconst ShippoApi = {\n  methods: {}\n};\n\n/**\n * Retrieves the address objects stored in Shippo Account\n * @see https://goshippo.com/docs/reference#addresses\n * @param {Object} parameter - ValidatedMethod's parameter\n * @param {String} parameter.apiKey - The Test or Live Token required\n * for authentication by Shippo's api\n * @return {Object} addressList - compound object returned returned by Shippo\n * @return {Array} addressList.results - An array with the address objects\n * @return {Number} addressList.count - the count of the address objects.\n * */\nShippoApi.methods.getAddressList = new ValidatedMethod({\n  name: \"ShippoApi.methods.getAddressList\",\n  validate: new SimpleSchema({\n    apiKey: {\n      type: String\n    }\n  }).validator(),\n\n  run({\n    apiKey\n  }) {\n    const shippoObj = new Shippo(apiKey);\n    shippoObj.set(\"version\", \"2016-10-25\");\n    const getAddressListFiber = Meteor.wrapAsync(shippoObj.address.list, shippoObj.address);\n\n    try {\n      const addressList = getAddressListFiber();\n      return addressList;\n    } catch (error) {\n      Logger.error(error.message);\n      throw new Meteor.Error(\"server-error\", error.message);\n    }\n  }\n\n});\n/**\n * Retrieves all Shippo carriers from the Shippo Account\n * @see https://goshippo.com/docs/reference#carrier-accounts-list\n * @param {Object} parameter - ValidatedMethod's parameter\n * @param {String} parameter.apiKey - The Test or Live Token required\n * for authentication by Shippo's api\n * @return {Object} carrierAccountList - the compound object returned by Shippo\n * @return {Array} carrierAccountList.results - An array with the carrier accounts objects\n * @return {Number} carrierAccountList.count - the count of the carrier accounts objects.\n *\n */\n\nShippoApi.methods.getCarrierAccountsList = new ValidatedMethod({\n  name: \"ShippoApi.methods.getCarrierAccountsList\",\n  validate: new SimpleSchema({\n    apiKey: {\n      type: String\n    }\n  }).validator(),\n\n  run({\n    apiKey\n  }) {\n    const shippoObj = new Shippo(apiKey);\n    shippoObj.set(\"version\", \"2016-10-25\");\n    let allCarriers = []; // recursively fetch carriers because shippo returns paginated results\n\n    function fetchCarriers() {\n      try {\n        const response = Meteor.wrapAsync(shippoObj.carrieraccount.list, shippoObj.carrieraccount)();\n        allCarriers = allCarriers.concat(response.results);\n\n        if (!response.next) {\n          response.results = allCarriers;\n          return response;\n        } // the Shippo module uses \"createFullPath\" to form the url for the request\n        // https://github.com/goshippo/shippo-node-client/blob/master/lib/Resource.js#L40-L48\n        // hence we're passing the next url in this way\n\n\n        shippoObj.carrieraccount.createFullPath = () => response.next;\n\n        return fetchCarriers();\n      } catch (error) {\n        Logger.error(error.message);\n        throw new Meteor.Error(\"server-error\", error.message);\n      }\n    }\n\n    return fetchCarriers();\n  }\n\n});\n/**\n * Creates a Shippo's Shipment object for the given addresses and gets Rates for the particular shipment)\n * @see https://goshippo.com/docs/reference#shipments-create\n * @param {Object} parameter - ValidatedMethod's parameter\n * @param {Object} parameter.shippoAddressFrom - The address of the sender\n * @param {Object} parameter.shippoAddressTo - The address of the receiver\n * @param {Object} parameter.shippoParcel - The parcel dimensions's/weight\n * @param {String} parameter.purpose  - \"QUOTE\" or \"PURCHASE\" - The reason of the shipment(check prices/ purchase labels)\n * @param {String} parameter.apiKey - The Test or Live Token required\n * for authentication by Shippo's api\n * @return {Object} shipment - The compound shipment object returned by Shippo\n * @return {Array} shipment.rates_list - The available rate objects\n * */\n\nShippoApi.methods.createShipment = new ValidatedMethod({\n  name: \"ShippoApi.methods.createShipment\",\n  validate: new SimpleSchema({\n    \"shippoAddressFrom\": purchaseAddressSchema,\n    \"shippoAddressTo\": purchaseAddressSchema,\n    \"shippoParcel\": parcelSchema,\n    \"purpose\": {\n      type: String,\n      allowedValues: [\"QUOTE\", \"PURCHASE\"]\n    },\n    \"apiKey\": String,\n    \"carrierAccounts\": {\n      type: Array,\n      optional: true\n    },\n    \"carrierAccounts.$\": String\n  }).validator(),\n\n  run({\n    shippoAddressFrom,\n    shippoAddressTo,\n    shippoParcel,\n    purpose,\n    apiKey,\n    carrierAccounts\n  }) {\n    const shippoObj = new Shippo(apiKey);\n    shippoObj.set(\"version\", \"2016-10-25\");\n    const createShipmentFiber = Meteor.wrapAsync(shippoObj.shipment.create, shippoObj.shipment);\n\n    try {\n      const shipment = createShipmentFiber({\n        object_purpose: purpose,\n        address_from: shippoAddressFrom,\n        address_to: shippoAddressTo,\n        parcel: shippoParcel,\n        carrier_accounts: carrierAccounts,\n        async: false\n      });\n      return shipment;\n    } catch (error) {\n      Logger.error(error.message);\n      throw new Meteor.Error(\"server-error\", error.message);\n    }\n  }\n\n});\n/**\n * Makes the transaction (purchasing of a shipping label from a shipping provider for a specific service)\n * for the specific rateId and returns its Shipping Label ,Tracking number etc\n * @see https://goshippo.com/docs/reference#transactions-create\n * @param {Object} parameter - ValidatedMethod's parameter\n * @param {String} parameter.rateId - unique identifier of the chosen rate object\n * @param {String} parameter.apiKey - The Test or Live Token required\n * for authentication by Shippo's api\n * @return {Object} transaction - The compound transaction object returned by Shippo\n * */\n\nShippoApi.methods.createTransaction = new ValidatedMethod({\n  name: \"ShippoApi.methods.createTransaction\",\n  validate: new SimpleSchema({\n    rateId: {\n      type: String\n    },\n    apiKey: {\n      type: String\n    }\n  }).validator(),\n\n  run({\n    rateId,\n    apiKey\n  }) {\n    const shippoObj = new Shippo(apiKey);\n    shippoObj.set(\"version\", \"2016-10-25\");\n    const createTransactionFiber = Meteor.wrapAsync(shippoObj.transaction.create, shippoObj.transaction);\n\n    try {\n      const transaction = createTransactionFiber({\n        rate: rateId,\n        label_file_type: \"PDF\",\n        async: false\n      });\n\n      if (transaction.object_status !== \"SUCCESS\") {\n        const error = transaction.messages[0].text;\n        Logger.error(error);\n        throw new Meteor.Error(\"server-error\", error);\n      }\n\n      return transaction;\n    } catch (error) {\n      Logger.debug(error.message);\n      throw new Meteor.Error(\"server-error\", error.message);\n    }\n  }\n\n});\n/**\n * Retrieves transaction with transactionId of Shippo Account\n * @see https://goshippo.com/docs/reference#transactions-retrieve\n * @param {Object} parameter - ValidatedMethod's parameter\n * @param {String} parameter.transactionId - unique identifier of the transaction object\n * @param {String} parameter.apiKey - The Test or Live Token required\n * for authentication by Shippo's api\n * @return {Object} transaction - transaction object returned by Shippo\n * */\n\nShippoApi.methods.getTransaction = new ValidatedMethod({\n  name: \"ShippoApi.methods.getTransaction\",\n  validate: new SimpleSchema({\n    transactionId: {\n      type: String\n    },\n    apiKey: {\n      type: String\n    }\n  }).validator(),\n\n  run({\n    transactionId,\n    apiKey\n  }) {\n    const shippoObj = new Shippo(apiKey);\n    shippoObj.set(\"version\", \"2016-10-25\");\n    const retrieveTransactionFiber = Meteor.wrapAsync(shippoObj.transaction.retrieve, shippoObj.transaction);\n\n    try {\n      const transaction = retrieveTransactionFiber(transactionId);\n      return transaction;\n    } catch (error) {\n      Logger.error(error.message);\n      throw new Meteor.Error(\"server-error\", error.message);\n    }\n  }\n\n});","map":{"version":3,"sources":["imports/plugins/included/shipping-shippo/server/methods/shippoapi.js"],"names":["module1","module","export","ShippoApi","Shippo","watch","require","default","v","SimpleSchema","Meteor","ValidatedMethod","Logger","purchaseAddressSchema","parcelSchema","methods","getAddressList","name","validate","apiKey","type","String","validator","run","shippoObj","set","getAddressListFiber","wrapAsync","address","list","addressList","error","message","Error","getCarrierAccountsList","allCarriers","fetchCarriers","response","carrieraccount","concat","results","next","createFullPath","createShipment","allowedValues","Array","optional","shippoAddressFrom","shippoAddressTo","shippoParcel","purpose","carrierAccounts","createShipmentFiber","shipment","create","object_purpose","address_from","address_to","parcel","carrier_accounts","async","createTransaction","rateId","createTransactionFiber","transaction","rate","label_file_type","object_status","messages","text","debug","getTransaction","transactionId","retrieveTransactionFiber","retrieve"],"mappings":"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","sourcesContent":["/* eslint camelcase: 0 */\nimport Shippo from \"shippo\";\nimport SimpleSchema from \"simpl-schema\";\nimport { Meteor } from \"meteor/meteor\";\nimport { ValidatedMethod } from \"meteor/mdg:validated-method\";\nimport { Logger } from \"/server/api\";\nimport { purchaseAddressSchema, parcelSchema } from \"../lib/shippoApiSchema\";\n\nexport const ShippoApi = {\n  methods: {}\n};\n\n\n/**\n * Retrieves the address objects stored in Shippo Account\n * @see https://goshippo.com/docs/reference#addresses\n * @param {Object} parameter - ValidatedMethod's parameter\n * @param {String} parameter.apiKey - The Test or Live Token required\n * for authentication by Shippo's api\n * @return {Object} addressList - compound object returned returned by Shippo\n * @return {Array} addressList.results - An array with the address objects\n * @return {Number} addressList.count - the count of the address objects.\n * */\nShippoApi.methods.getAddressList = new ValidatedMethod({\n  name: \"ShippoApi.methods.getAddressList\",\n  validate: new SimpleSchema({\n    apiKey: {\n      type: String\n    }\n  }).validator(),\n  run({ apiKey }) {\n    const shippoObj = new Shippo(apiKey);\n    shippoObj.set(\"version\", \"2016-10-25\");\n    const getAddressListFiber = Meteor.wrapAsync(shippoObj.address.list, shippoObj.address);\n    try {\n      const addressList = getAddressListFiber();\n\n      return addressList;\n    } catch (error) {\n      Logger.error(error.message);\n      throw new Meteor.Error(\"server-error\", error.message);\n    }\n  }\n});\n\n\n/**\n * Retrieves all Shippo carriers from the Shippo Account\n * @see https://goshippo.com/docs/reference#carrier-accounts-list\n * @param {Object} parameter - ValidatedMethod's parameter\n * @param {String} parameter.apiKey - The Test or Live Token required\n * for authentication by Shippo's api\n * @return {Object} carrierAccountList - the compound object returned by Shippo\n * @return {Array} carrierAccountList.results - An array with the carrier accounts objects\n * @return {Number} carrierAccountList.count - the count of the carrier accounts objects.\n *\n */\nShippoApi.methods.getCarrierAccountsList = new ValidatedMethod({\n  name: \"ShippoApi.methods.getCarrierAccountsList\",\n  validate: new SimpleSchema({\n    apiKey: {\n      type: String\n    }\n  }).validator(),\n  run({ apiKey }) {\n    const shippoObj = new Shippo(apiKey);\n    shippoObj.set(\"version\", \"2016-10-25\");\n    let allCarriers = [];\n\n    // recursively fetch carriers because shippo returns paginated results\n    function fetchCarriers() {\n      try {\n        const response = Meteor.wrapAsync(shippoObj.carrieraccount.list, shippoObj.carrieraccount)();\n        allCarriers = allCarriers.concat(response.results);\n\n        if (!response.next) {\n          response.results = allCarriers;\n          return response;\n        }\n        // the Shippo module uses \"createFullPath\" to form the url for the request\n        // https://github.com/goshippo/shippo-node-client/blob/master/lib/Resource.js#L40-L48\n        // hence we're passing the next url in this way\n        shippoObj.carrieraccount.createFullPath = () => response.next;\n        return fetchCarriers();\n      } catch (error) {\n        Logger.error(error.message);\n        throw new Meteor.Error(\"server-error\", error.message);\n      }\n    }\n\n    return fetchCarriers();\n  }\n});\n\n/**\n * Creates a Shippo's Shipment object for the given addresses and gets Rates for the particular shipment)\n * @see https://goshippo.com/docs/reference#shipments-create\n * @param {Object} parameter - ValidatedMethod's parameter\n * @param {Object} parameter.shippoAddressFrom - The address of the sender\n * @param {Object} parameter.shippoAddressTo - The address of the receiver\n * @param {Object} parameter.shippoParcel - The parcel dimensions's/weight\n * @param {String} parameter.purpose  - \"QUOTE\" or \"PURCHASE\" - The reason of the shipment(check prices/ purchase labels)\n * @param {String} parameter.apiKey - The Test or Live Token required\n * for authentication by Shippo's api\n * @return {Object} shipment - The compound shipment object returned by Shippo\n * @return {Array} shipment.rates_list - The available rate objects\n * */\nShippoApi.methods.createShipment = new ValidatedMethod({\n  name: \"ShippoApi.methods.createShipment\",\n  validate: new SimpleSchema({\n    \"shippoAddressFrom\": purchaseAddressSchema,\n    \"shippoAddressTo\": purchaseAddressSchema,\n    \"shippoParcel\": parcelSchema,\n    \"purpose\": { type: String, allowedValues: [\"QUOTE\", \"PURCHASE\"] },\n    \"apiKey\": String,\n    \"carrierAccounts\": { type: Array, optional: true },\n    \"carrierAccounts.$\": String\n  }).validator(),\n  run({ shippoAddressFrom, shippoAddressTo, shippoParcel, purpose, apiKey, carrierAccounts }) {\n    const shippoObj = new Shippo(apiKey);\n    shippoObj.set(\"version\", \"2016-10-25\");\n\n    const createShipmentFiber = Meteor.wrapAsync(shippoObj.shipment.create, shippoObj.shipment);\n    try {\n      const shipment = createShipmentFiber({\n        object_purpose: purpose,\n        address_from: shippoAddressFrom,\n        address_to: shippoAddressTo,\n        parcel: shippoParcel,\n        carrier_accounts: carrierAccounts,\n        async: false\n      });\n\n      return shipment;\n    } catch (error) {\n      Logger.error(error.message);\n      throw new Meteor.Error(\"server-error\", error.message);\n    }\n  }\n});\n\n/**\n * Makes the transaction (purchasing of a shipping label from a shipping provider for a specific service)\n * for the specific rateId and returns its Shipping Label ,Tracking number etc\n * @see https://goshippo.com/docs/reference#transactions-create\n * @param {Object} parameter - ValidatedMethod's parameter\n * @param {String} parameter.rateId - unique identifier of the chosen rate object\n * @param {String} parameter.apiKey - The Test or Live Token required\n * for authentication by Shippo's api\n * @return {Object} transaction - The compound transaction object returned by Shippo\n * */\nShippoApi.methods.createTransaction = new ValidatedMethod({\n  name: \"ShippoApi.methods.createTransaction\",\n  validate: new SimpleSchema({\n    rateId: { type: String },\n    apiKey: { type: String }\n  }).validator(),\n  run({ rateId, apiKey }) {\n    const shippoObj = new Shippo(apiKey);\n    shippoObj.set(\"version\", \"2016-10-25\");\n\n    const createTransactionFiber = Meteor.wrapAsync(shippoObj.transaction.create, shippoObj.transaction);\n    try {\n      const transaction = createTransactionFiber({\n        rate: rateId,\n        label_file_type: \"PDF\",\n        async: false\n      });\n\n      if (transaction.object_status !== \"SUCCESS\") {\n        const error = transaction.messages[0].text;\n        Logger.error(error);\n        throw new Meteor.Error(\"server-error\", error);\n      }\n\n      return transaction;\n    } catch (error) {\n      Logger.debug(error.message);\n      throw new Meteor.Error(\"server-error\", error.message);\n    }\n  }\n});\n\n/**\n * Retrieves transaction with transactionId of Shippo Account\n * @see https://goshippo.com/docs/reference#transactions-retrieve\n * @param {Object} parameter - ValidatedMethod's parameter\n * @param {String} parameter.transactionId - unique identifier of the transaction object\n * @param {String} parameter.apiKey - The Test or Live Token required\n * for authentication by Shippo's api\n * @return {Object} transaction - transaction object returned by Shippo\n * */\nShippoApi.methods.getTransaction = new ValidatedMethod({\n  name: \"ShippoApi.methods.getTransaction\",\n  validate: new SimpleSchema({\n    transactionId: { type: String },\n    apiKey: { type: String }\n  }).validator(),\n  run({ transactionId, apiKey }) {\n    const shippoObj = new Shippo(apiKey);\n    shippoObj.set(\"version\", \"2016-10-25\");\n\n    const retrieveTransactionFiber = Meteor.wrapAsync(shippoObj.transaction.retrieve, shippoObj.transaction);\n    try {\n      const transaction = retrieveTransactionFiber(transactionId);\n      return transaction;\n    } catch (error) {\n      Logger.error(error.message);\n      throw new Meteor.Error(\"server-error\", error.message);\n    }\n  }\n});\n"]},"sourceType":"script","hash":"e6dd9ddf366fb25a84f1923b6dcbad58622ae5ee"}
