{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/custom/knowledge-payments/server/methods/exampleapi.js","filename":"imports/plugins/custom/knowledge-payments/server/methods/exampleapi.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/custom/knowledge-payments/server/methods/exampleapi.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/custom/knowledge-payments/server/methods/exampleapi.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/custom/knowledge-payments/server/methods/exampleapi.js"}},"code":"module.export({\n  RISKY_TEST_CARD: () => RISKY_TEST_CARD,\n  ExampleApi: () => ExampleApi,\n  cardSchema: () => cardSchema,\n  paymentDataSchema: () => paymentDataSchema\n});\nlet ValidatedMethod;\nmodule.watch(require(\"meteor/mdg:validated-method\"), {\n  ValidatedMethod(v) {\n    ValidatedMethod = v;\n  }\n\n}, 0);\nlet SimpleSchema;\nmodule.watch(require(\"meteor/aldeed:simple-schema\"), {\n  SimpleSchema(v) {\n    SimpleSchema = v;\n  }\n\n}, 1);\nlet Random;\nmodule.watch(require(\"meteor/random\"), {\n  Random(v) {\n    Random = v;\n  }\n\n}, 2);\nlet registerSchema;\nmodule.watch(require(\"@reactioncommerce/schemas\"), {\n  registerSchema(v) {\n    registerSchema = v;\n  }\n\n}, 3);\nconst RISKY_TEST_CARD = \"4000000000009235\";\n// You should not implement ThirdPartyAPI. It is supposed to represent your third party API\n// And is called so that it can be stubbed out for testing. This would be a library\n// like Stripe or Authorize.net usually just included with a NPM.require\nconst ThirdPartyAPI = {\n  authorize(transactionType, cardData, paymentData) {\n    if (transactionType === \"authorize\") {\n      const results = {\n        success: true,\n        id: Random.id(),\n        cardNumber: cardData.number.slice(-4),\n        amount: paymentData.total,\n        currency: \"USD\"\n      }; // This is for testing risk evaluation. Proper payment methods have dectection mechanisms for this.\n      // This is just a sample\n\n      if (cardData.number === RISKY_TEST_CARD) {\n        results.riskStatus = \"highest_risk_level\";\n      }\n\n      return results;\n    }\n\n    return {\n      success: false\n    };\n  },\n\n  capture(authorizationId, amount) {\n    return {\n      authorizationId,\n      amount,\n      success: true\n    };\n  },\n\n  refund(transactionId, amount) {\n    return {\n      success: true,\n      transactionId,\n      amount\n    };\n  },\n\n  listRefunds(transactionId) {\n    return {\n      transactionId,\n      refunds: [{\n        type: \"refund\",\n        amount: 3.99,\n        created: 1454034562000,\n        currency: \"usd\",\n        raw: {}\n      }]\n    };\n  }\n\n}; // This is the \"wrapper\" functions you should write in order to make your code more\n// testable. You can either mirror the API calls or normalize them to the authorize/capture/refund/refunds\n// that Reaction is expecting\n\nconst ExampleApi = {};\nExampleApi.methods = {};\nconst cardSchema = new SimpleSchema({\n  number: {\n    type: String\n  },\n  name: {\n    type: String\n  },\n  cvv2: {\n    type: String\n  },\n  expireMonth: {\n    type: String\n  },\n  expireYear: {\n    type: String\n  },\n  type: {\n    type: String\n  }\n});\nregisterSchema(\"cardSchema\", cardSchema);\nconst paymentDataSchema = new SimpleSchema({\n  total: {\n    type: String\n  },\n  currency: {\n    type: String\n  }\n});\nregisterSchema(\"paymentDataSchema\", paymentDataSchema);\nExampleApi.methods.authorize = new ValidatedMethod({\n  name: \"ExampleApi.methods.authorize\",\n  validate: new SimpleSchema({\n    transactionType: {\n      type: String\n    },\n    cardData: {\n      type: cardSchema\n    },\n    paymentData: {\n      type: paymentDataSchema\n    }\n  }).validator(),\n\n  run({\n    transactionType,\n    cardData,\n    paymentData\n  }) {\n    const results = ThirdPartyAPI.authorize(transactionType, cardData, paymentData);\n    return results;\n  }\n\n});\nExampleApi.methods.capture = new ValidatedMethod({\n  name: \"ExampleApi.methods.capture\",\n  validate: new SimpleSchema({\n    authorizationId: {\n      type: String\n    },\n    amount: {\n      type: Number,\n      decimal: true\n    }\n  }).validator(),\n\n  run(args) {\n    const transactionId = args.authorizationId;\n    const {\n      amount\n    } = args;\n    const results = ThirdPartyAPI.capture(transactionId, amount);\n    return results;\n  }\n\n});\nExampleApi.methods.refund = new ValidatedMethod({\n  name: \"ExampleApi.methods.refund\",\n  validate: new SimpleSchema({\n    transactionId: {\n      type: String\n    },\n    amount: {\n      type: Number,\n      decimal: true\n    }\n  }).validator(),\n\n  run(args) {\n    const {\n      transactionId,\n      amount\n    } = args.transactionId;\n    const results = ThirdPartyAPI.refund(transactionId, amount);\n    return results;\n  }\n\n});\nExampleApi.methods.refunds = new ValidatedMethod({\n  name: \"ExampleApi.methods.refunds\",\n  validate: new SimpleSchema({\n    transactionId: {\n      type: String\n    }\n  }).validator(),\n\n  run(args) {\n    const {\n      transactionId\n    } = args;\n    const results = ThirdPartyAPI.listRefunds(transactionId);\n    return results;\n  }\n\n});","map":{"version":3,"sources":["imports/plugins/custom/knowledge-payments/server/methods/exampleapi.js"],"names":["module","export","RISKY_TEST_CARD","ExampleApi","cardSchema","paymentDataSchema","ValidatedMethod","watch","require","v","SimpleSchema","Random","registerSchema","ThirdPartyAPI","authorize","transactionType","cardData","paymentData","results","success","id","cardNumber","number","slice","amount","total","currency","riskStatus","capture","authorizationId","refund","transactionId","listRefunds","refunds","type","created","raw","methods","String","name","cvv2","expireMonth","expireYear","validate","validator","run","Number","decimal","args"],"mappings":"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","sourcesContent":["import { ValidatedMethod } from \"meteor/mdg:validated-method\";\nimport { SimpleSchema } from \"meteor/aldeed:simple-schema\";\nimport { Random } from \"meteor/random\";\nimport { registerSchema } from \"@reactioncommerce/schemas\";\n\n// Test card to use to add risk level flag for testing purposes only.\nexport const RISKY_TEST_CARD = \"4000000000009235\";\n\n// You should not implement ThirdPartyAPI. It is supposed to represent your third party API\n// And is called so that it can be stubbed out for testing. This would be a library\n// like Stripe or Authorize.net usually just included with a NPM.require\n\nconst ThirdPartyAPI = {\n  authorize(transactionType, cardData, paymentData) {\n    if (transactionType === \"authorize\") {\n      const results = {\n        success: true,\n        id: Random.id(),\n        cardNumber: cardData.number.slice(-4),\n        amount: paymentData.total,\n        currency: \"USD\"\n      };\n      // This is for testing risk evaluation. Proper payment methods have dectection mechanisms for this.\n      // This is just a sample\n      if (cardData.number === RISKY_TEST_CARD) {\n        results.riskStatus = \"highest_risk_level\";\n      }\n      return results;\n    }\n    return {\n      success: false\n    };\n  },\n  capture(authorizationId, amount) {\n    return {\n      authorizationId,\n      amount,\n      success: true\n    };\n  },\n  refund(transactionId, amount) {\n    return {\n      success: true,\n      transactionId,\n      amount\n    };\n  },\n  listRefunds(transactionId) {\n    return {\n      transactionId,\n      refunds: [\n        {\n          type: \"refund\",\n          amount: 3.99,\n          created: 1454034562000,\n          currency: \"usd\",\n          raw: {}\n        }\n      ]\n    };\n  }\n};\n\n// This is the \"wrapper\" functions you should write in order to make your code more\n// testable. You can either mirror the API calls or normalize them to the authorize/capture/refund/refunds\n// that Reaction is expecting\nexport const ExampleApi = {};\nExampleApi.methods = {};\n\nexport const cardSchema = new SimpleSchema({\n  number: { type: String },\n  name: { type: String },\n  cvv2: { type: String },\n  expireMonth: { type: String },\n  expireYear: { type: String },\n  type: { type: String }\n});\n\nregisterSchema(\"cardSchema\", cardSchema);\n\nexport const paymentDataSchema = new SimpleSchema({\n  total: { type: String },\n  currency: { type: String }\n});\n\nregisterSchema(\"paymentDataSchema\", paymentDataSchema);\n\n\nExampleApi.methods.authorize = new ValidatedMethod({\n  name: \"ExampleApi.methods.authorize\",\n  validate: new SimpleSchema({\n    transactionType: { type: String },\n    cardData: { type: cardSchema },\n    paymentData: { type: paymentDataSchema }\n  }).validator(),\n  run({ transactionType, cardData, paymentData }) {\n    const results = ThirdPartyAPI.authorize(transactionType, cardData, paymentData);\n    return results;\n  }\n});\n\n\nExampleApi.methods.capture = new ValidatedMethod({\n  name: \"ExampleApi.methods.capture\",\n  validate: new SimpleSchema({\n    authorizationId: { type: String },\n    amount: { type: Number, decimal: true }\n  }).validator(),\n  run(args) {\n    const transactionId = args.authorizationId;\n    const { amount } = args;\n    const results = ThirdPartyAPI.capture(transactionId, amount);\n    return results;\n  }\n});\n\n\nExampleApi.methods.refund = new ValidatedMethod({\n  name: \"ExampleApi.methods.refund\",\n  validate: new SimpleSchema({\n    transactionId: { type: String },\n    amount: { type: Number, decimal: true }\n  }).validator(),\n  run(args) {\n    const { transactionId, amount } = args.transactionId;\n    const results = ThirdPartyAPI.refund(transactionId, amount);\n    return results;\n  }\n});\n\n\nExampleApi.methods.refunds = new ValidatedMethod({\n  name: \"ExampleApi.methods.refunds\",\n  validate: new SimpleSchema({\n    transactionId: { type: String }\n  }).validator(),\n  run(args) {\n    const { transactionId } = args;\n    const results = ThirdPartyAPI.listRefunds(transactionId);\n    return results;\n  }\n});\n"]},"sourceType":"script","hash":"5fdd9c0419b185fbc75ca762063963569e8b83fd"}
