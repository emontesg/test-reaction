{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/core/graphql/server/resolvers/scalar/ConnectionLimitInt.js","filename":"imports/plugins/core/graphql/server/resolvers/scalar/ConnectionLimitInt.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/core/graphql/server/resolvers/scalar/ConnectionLimitInt.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/core/graphql/server/resolvers/scalar/ConnectionLimitInt.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/core/graphql/server/resolvers/scalar/ConnectionLimitInt.js"}},"code":"let GraphQLScalarType;\nmodule.watch(require(\"graphql\"), {\n  GraphQLScalarType(v) {\n    GraphQLScalarType = v;\n  }\n\n}, 0);\nlet Kind;\nmodule.watch(require(\"graphql/language\"), {\n  Kind(v) {\n    Kind = v;\n  }\n\n}, 1);\nconst MAX_LIMIT = 50;\n/**\n * @name parseValue\n * @method\n * @summary Adjusts value to be between 1 and MAX_LIMIT, inclusive\n * @param {Number} value An integer provided by the client for the requested limit\n * @returns The adjusted integer value.\n */\n\nfunction parseValue(value) {\n  // Note that we do not have to do isNaN(value) check here because GraphQLScalarType will not call this for isNaN.\n  // Instead it automatically changes isNaN to undefined.\n  if (typeof value !== \"number\") return MAX_LIMIT;\n  return Math.min(Math.max(1, value), MAX_LIMIT);\n}\n\nconst description = `\nAn integer between 1 and 50, inclusive. Values less than 1 become 1 and\nvalues greater than 50 become 50.\n`;\nmodule.exportDefault(new GraphQLScalarType({\n  description,\n  name: \"ConnectionLimitInt\",\n  serialize: value => value,\n\n  parseLiteral(ast) {\n    if (ast.kind !== Kind.INT) return MAX_LIMIT;\n    return parseValue(parseInt(ast.value, 10));\n  },\n\n  parseValue\n}));","map":{"version":3,"sources":["imports/plugins/core/graphql/server/resolvers/scalar/ConnectionLimitInt.js"],"names":["GraphQLScalarType","module","watch","require","v","Kind","MAX_LIMIT","parseValue","value","Math","min","max","description","exportDefault","name","serialize","parseLiteral","ast","kind","INT","parseInt"],"mappings":"AAAA,IAAIA,iBAAJ;AAAsBC,OAAOC,KAAP,CAAaC,QAAQ,SAAR,CAAb,EAAgC;AAACH,oBAAkBI,CAAlB,EAAoB;AAACJ,wBAAkBI,CAAlB;AAAoB;;AAA1C,CAAhC,EAA4E,CAA5E;AAA+E,IAAIC,IAAJ;AAASJ,OAAOC,KAAP,CAAaC,QAAQ,kBAAR,CAAb,EAAyC;AAACE,OAAKD,CAAL,EAAO;AAACC,WAAKD,CAAL;AAAO;;AAAhB,CAAzC,EAA2D,CAA3D;AAG9G,MAAME,YAAY,EAAlB;AAEA;;;;;;;;AAOA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB;AACA;AACA,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B,OAAOF,SAAP;AAC/B,SAAOG,KAAKC,GAAL,CAASD,KAAKE,GAAL,CAAS,CAAT,EAAYH,KAAZ,CAAT,EAA6BF,SAA7B,CAAP;AACD;;AAED,MAAMM,cAAe;;;CAArB;AAnBAX,OAAOY,aAAP,CAwBe,IAAIb,iBAAJ,CAAsB;AACnCY,aADmC;AAEnCE,QAAM,oBAF6B;AAGnCC,aAAYP,KAAD,IAAWA,KAHa;;AAInCQ,eAAaC,GAAb,EAAkB;AAChB,QAAIA,IAAIC,IAAJ,KAAab,KAAKc,GAAtB,EAA2B,OAAOb,SAAP;AAC3B,WAAOC,WAAWa,SAASH,IAAIT,KAAb,EAAoB,EAApB,CAAX,CAAP;AACD,GAPkC;;AAQnCD;AARmC,CAAtB,CAxBf","sourcesContent":["import { GraphQLScalarType } from \"graphql\";\nimport { Kind } from \"graphql/language\";\n\nconst MAX_LIMIT = 50;\n\n/**\n * @name parseValue\n * @method\n * @summary Adjusts value to be between 1 and MAX_LIMIT, inclusive\n * @param {Number} value An integer provided by the client for the requested limit\n * @returns The adjusted integer value.\n */\nfunction parseValue(value) {\n  // Note that we do not have to do isNaN(value) check here because GraphQLScalarType will not call this for isNaN.\n  // Instead it automatically changes isNaN to undefined.\n  if (typeof value !== \"number\") return MAX_LIMIT;\n  return Math.min(Math.max(1, value), MAX_LIMIT);\n}\n\nconst description = `\nAn integer between 1 and 50, inclusive. Values less than 1 become 1 and\nvalues greater than 50 become 50.\n`;\n\nexport default new GraphQLScalarType({\n  description,\n  name: \"ConnectionLimitInt\",\n  serialize: (value) => value,\n  parseLiteral(ast) {\n    if (ast.kind !== Kind.INT) return MAX_LIMIT;\n    return parseValue(parseInt(ast.value, 10));\n  },\n  parseValue\n});\n"]},"sourceType":"script","hash":"acc8ddab1d2c47ed97b06708432bdbe4606574aa"}
