{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"lib/collections/schemas/accounts.js","filename":"lib/collections/schemas/accounts.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"lib/collections/schemas/accounts.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"lib/collections/schemas/accounts.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"lib/collections/schemas/accounts.js"}},"code":"module.export({\n  Profile: () => Profile,\n  Email: () => Email,\n  Accounts: () => Accounts\n});\nlet SimpleSchema;\nmodule.watch(require(\"simpl-schema\"), {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet Tracker;\nmodule.watch(require(\"meteor/tracker\"), {\n  Tracker(v) {\n    Tracker = v;\n  }\n\n}, 2);\nlet registerSchema;\nmodule.watch(require(\"@reactioncommerce/schemas\"), {\n  registerSchema(v) {\n    registerSchema = v;\n  }\n\n}, 3);\nlet createdAtAutoValue, shopIdAutoValue, updatedAtAutoValue;\nmodule.watch(require(\"./helpers\"), {\n  createdAtAutoValue(v) {\n    createdAtAutoValue = v;\n  },\n\n  shopIdAutoValue(v) {\n    shopIdAutoValue = v;\n  },\n\n  updatedAtAutoValue(v) {\n    updatedAtAutoValue = v;\n  }\n\n}, 4);\nlet Address;\nmodule.watch(require(\"./address\"), {\n  Address(v) {\n    Address = v;\n  }\n\n}, 5);\nlet Metafield;\nmodule.watch(require(\"./metafield\"), {\n  Metafield(v) {\n    Metafield = v;\n  }\n\n}, 6);\n\n/**\n * @typedef {SimpleSchema} SimpleSchema\n * @summary SimpleSchema for Collections - Reaction uses {@link https://github.com/aldeed/meteor-simple-schema SimpleSchema} to apply basic content and structure validation to Collections. See {@link https://docs.reactioncommerce.com/reaction-docs/master/simple-schema full documentation}.\n */\n\n/**\n * @file Reaction Core schemas\n * Reaction uses {@link https://github.com/aldeed/meteor-simple-schema SimpleSchema} to apply basic content and structure validation to Collections.\n * See {@link https://docs.reactioncommerce.com/reaction-docs/master/simple-schema full documentation}.\n * @namespace schemas\n */\n\n/**\n * @name TaxSettings\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} exemptionNo optional\n * @property {String} customerUsageType optional\n */\nconst TaxSettings = new SimpleSchema({\n  exemptionNo: {\n    type: String,\n    optional: true\n  },\n  customerUsageType: {\n    type: String,\n    optional: true\n  }\n}, {\n  check,\n  tracker: Tracker\n});\nregisterSchema(\"TaxSettings\", TaxSettings);\n/**\n * @name Profile\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {Address[]} addressBook optional, array of Addresses\n * @property {Boolean} invited optional\n * @property {String} name optional\n * @property {String} picture optional\n * @property {String} bio optional\n * @property {String} username optional\n * @property {String} currency User currency\n */\n\nconst Profile = new SimpleSchema({\n  \"addressBook\": {\n    type: Array,\n    optional: true\n  },\n  \"addressBook.$\": {\n    type: Address\n  },\n  \"invited\": {\n    type: Boolean,\n    optional: true,\n    defaultValue: false\n  },\n  \"name\": {\n    type: String,\n    optional: true\n  },\n  \"picture\": {\n    type: String,\n    optional: true\n  },\n  \"bio\": {\n    type: String,\n    optional: true\n  },\n  \"username\": {\n    type: String,\n    optional: true\n  },\n  \"currency\": {\n    label: \"User Currency\",\n    type: String,\n    optional: true\n  },\n  \"preferences\": {\n    label: \"User preferences\",\n    type: Object,\n    blackbox: true,\n    optional: true\n  }\n}, {\n  check,\n  tracker: Tracker\n});\nregisterSchema(\"Profile\", Profile);\n/**\n * @name Email\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} provides optional\n * @property {String} address required\n * @property {Boolean} verified optional\n */\n\nconst Email = new SimpleSchema({\n  provides: {\n    type: String,\n    defaultValue: \"default\",\n    optional: true\n  },\n  address: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email\n  },\n  verified: {\n    type: Boolean,\n    defaultValue: false,\n    optional: true\n  }\n}, {\n  check,\n  tracker: Tracker\n});\nregisterSchema(\"Email\", Email);\n/**\n * @name Accounts\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} userId required\n * @property {String[]} sessions optional, Array of strings\n * @property {String} shopId required\n * @property {String} name optional\n * @property {String} username optional\n * @property {Email[]} emails optional, Array of strings\n * @property {Boolean} acceptsMarketing optional\n * @property {String} state optional\n * @property {TaxSettings} taxSettings optional\n * @property {String} note optional\n * @property {Profile} profile optional\n * @property {String[]} groups optional, Array of groupIds of the groups the user belongs to\n * @property {Metafield[]} metafields optional\n * @property {Date} createdAt required\n * @property {Date} updatedAt optional\n */\n\nconst Accounts = new SimpleSchema({\n  \"userId\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    index: 1,\n    label: \"Accounts ShopId\"\n  },\n  \"sessions\": {\n    type: Array,\n    optional: true,\n    index: 1\n  },\n  \"sessions.$\": {\n    type: String\n  },\n  \"shopId\": {\n    type: String,\n    autoValue: shopIdAutoValue,\n    regEx: SimpleSchema.RegEx.Id,\n    index: 1\n  },\n  \"name\": {\n    type: String,\n    optional: true\n  },\n  \"username\": {\n    type: String,\n    optional: true\n  },\n  \"emails\": {\n    type: Array,\n    optional: true\n  },\n  \"emails.$\": {\n    type: Email\n  },\n  \"acceptsMarketing\": {\n    type: Boolean,\n    defaultValue: false,\n    optional: true\n  },\n  \"state\": {\n    type: String,\n    defaultValue: \"new\",\n    optional: true\n  },\n  \"taxSettings\": {\n    type: TaxSettings,\n    optional: true\n  },\n  \"note\": {\n    type: String,\n    optional: true\n  },\n  \"profile\": {\n    type: Profile,\n    optional: true\n  },\n  \"groups\": {\n    type: Array,\n    // groupIds that user belongs to\n    optional: true,\n    defaultValue: []\n  },\n  \"groups.$\": {\n    type: String\n  },\n  \"metafields\": {\n    type: Array,\n    optional: true\n  },\n  \"metafields.$\": {\n    type: Metafield\n  },\n  \"createdAt\": {\n    type: Date,\n    autoValue: createdAtAutoValue\n  },\n  \"updatedAt\": {\n    type: Date,\n    autoValue: updatedAtAutoValue,\n    optional: true\n  }\n}, {\n  check,\n  tracker: Tracker\n});\nregisterSchema(\"Accounts\", Accounts);","map":{"version":3,"sources":["lib/collections/schemas/accounts.js"],"names":["module","export","Profile","Email","Accounts","SimpleSchema","watch","require","default","v","check","Tracker","registerSchema","createdAtAutoValue","shopIdAutoValue","updatedAtAutoValue","Address","Metafield","TaxSettings","exemptionNo","type","String","optional","customerUsageType","tracker","Array","Boolean","defaultValue","label","Object","blackbox","provides","address","regEx","RegEx","verified","Id","index","autoValue","Date"],"mappings":"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","sourcesContent":["import SimpleSchema from \"simpl-schema\";\nimport { check } from \"meteor/check\";\nimport { Tracker } from \"meteor/tracker\";\nimport { registerSchema } from \"@reactioncommerce/schemas\";\nimport { createdAtAutoValue, shopIdAutoValue, updatedAtAutoValue } from \"./helpers\";\nimport { Address } from \"./address\";\nimport { Metafield } from \"./metafield\";\n\n/**\n * @typedef {SimpleSchema} SimpleSchema\n * @summary SimpleSchema for Collections - Reaction uses {@link https://github.com/aldeed/meteor-simple-schema SimpleSchema} to apply basic content and structure validation to Collections. See {@link https://docs.reactioncommerce.com/reaction-docs/master/simple-schema full documentation}.\n */\n\n/**\n * @file Reaction Core schemas\n * Reaction uses {@link https://github.com/aldeed/meteor-simple-schema SimpleSchema} to apply basic content and structure validation to Collections.\n * See {@link https://docs.reactioncommerce.com/reaction-docs/master/simple-schema full documentation}.\n * @namespace schemas\n */\n\n/**\n * @name TaxSettings\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} exemptionNo optional\n * @property {String} customerUsageType optional\n */\nconst TaxSettings = new SimpleSchema({\n  exemptionNo: {\n    type: String,\n    optional: true\n  },\n  customerUsageType: {\n    type: String,\n    optional: true\n  }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"TaxSettings\", TaxSettings);\n\n/**\n * @name Profile\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {Address[]} addressBook optional, array of Addresses\n * @property {Boolean} invited optional\n * @property {String} name optional\n * @property {String} picture optional\n * @property {String} bio optional\n * @property {String} username optional\n * @property {String} currency User currency\n */\nexport const Profile = new SimpleSchema({\n  \"addressBook\": {\n    type: Array,\n    optional: true\n  },\n  \"addressBook.$\": {\n    type: Address\n  },\n  \"invited\": {\n    type: Boolean,\n    optional: true,\n    defaultValue: false\n  },\n  \"name\": {\n    type: String,\n    optional: true\n  },\n  \"picture\": {\n    type: String,\n    optional: true\n  },\n  \"bio\": {\n    type: String,\n    optional: true\n  },\n  \"username\": {\n    type: String,\n    optional: true\n  },\n  \"currency\": {\n    label: \"User Currency\",\n    type: String,\n    optional: true\n  },\n  \"preferences\": {\n    label: \"User preferences\",\n    type: Object,\n    blackbox: true,\n    optional: true\n  }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"Profile\", Profile);\n\n/**\n * @name Email\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} provides optional\n * @property {String} address required\n * @property {Boolean} verified optional\n */\nexport const Email = new SimpleSchema({\n  provides: {\n    type: String,\n    defaultValue: \"default\",\n    optional: true\n  },\n  address: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email\n  },\n  verified: {\n    type: Boolean,\n    defaultValue: false,\n    optional: true\n  }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"Email\", Email);\n\n/**\n * @name Accounts\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} userId required\n * @property {String[]} sessions optional, Array of strings\n * @property {String} shopId required\n * @property {String} name optional\n * @property {String} username optional\n * @property {Email[]} emails optional, Array of strings\n * @property {Boolean} acceptsMarketing optional\n * @property {String} state optional\n * @property {TaxSettings} taxSettings optional\n * @property {String} note optional\n * @property {Profile} profile optional\n * @property {String[]} groups optional, Array of groupIds of the groups the user belongs to\n * @property {Metafield[]} metafields optional\n * @property {Date} createdAt required\n * @property {Date} updatedAt optional\n */\nexport const Accounts = new SimpleSchema({\n  \"userId\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    index: 1,\n    label: \"Accounts ShopId\"\n  },\n  \"sessions\": {\n    type: Array,\n    optional: true,\n    index: 1\n  },\n  \"sessions.$\": {\n    type: String\n  },\n  \"shopId\": {\n    type: String,\n    autoValue: shopIdAutoValue,\n    regEx: SimpleSchema.RegEx.Id,\n    index: 1\n  },\n  \"name\": {\n    type: String,\n    optional: true\n  },\n  \"username\": {\n    type: String,\n    optional: true\n  },\n  \"emails\": {\n    type: Array,\n    optional: true\n  },\n  \"emails.$\": {\n    type: Email\n  },\n  \"acceptsMarketing\": {\n    type: Boolean,\n    defaultValue: false,\n    optional: true\n  },\n  \"state\": {\n    type: String,\n    defaultValue: \"new\",\n    optional: true\n  },\n  \"taxSettings\": {\n    type: TaxSettings,\n    optional: true\n  },\n  \"note\": {\n    type: String,\n    optional: true\n  },\n  \"profile\": {\n    type: Profile,\n    optional: true\n  },\n  \"groups\": {\n    type: Array, // groupIds that user belongs to\n    optional: true,\n    defaultValue: []\n  },\n  \"groups.$\": {\n    type: String\n  },\n  \"metafields\": {\n    type: Array,\n    optional: true\n  },\n  \"metafields.$\": {\n    type: Metafield\n  },\n  \"createdAt\": {\n    type: Date,\n    autoValue: createdAtAutoValue\n  },\n  \"updatedAt\": {\n    type: Date,\n    autoValue: updatedAtAutoValue,\n    optional: true\n  }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"Accounts\", Accounts);\n"]},"sourceType":"script","hash":"29fd3b8ce4491efe73886a7570f0b8ed17eaeca6"}
