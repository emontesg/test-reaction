{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/included/taxes-avalara/server/jobs/cleanup.js","filename":"imports/plugins/included/taxes-avalara/server/jobs/cleanup.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/included/taxes-avalara/server/jobs/cleanup.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/included/taxes-avalara/server/jobs/cleanup.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/included/taxes-avalara/server/jobs/cleanup.js"}},"code":"module.export({\n  setupAvalaraCleanupHook: () => setupAvalaraCleanupHook,\n  cleanupAvalogs: () => cleanupAvalogs\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Job;\nmodule.watch(require(\"../../../../core/job-collection/lib\"), {\n  Job(v) {\n    Job = v;\n  }\n\n}, 1);\nlet Jobs, Logs;\nmodule.watch(require(\"../../../../../../lib/collections\"), {\n  Jobs(v) {\n    Jobs = v;\n  },\n\n  Logs(v) {\n    Logs = v;\n  }\n\n}, 2);\nlet Hooks, Logger;\nmodule.watch(require(\"../../../../../../server/api\"), {\n  Hooks(v) {\n    Hooks = v;\n  },\n\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 3);\nlet taxCalc;\nmodule.watch(require(\"../methods/taxCalc\"), {\n  default(v) {\n    taxCalc = v;\n  }\n\n}, 4);\nlet moment;\n\nfunction lazyLoadMoment() {\n  return Promise.asyncApply(() => {\n    if (moment) return;\n    moment = Promise.await(Promise.resolve().then(() => require(\"moment\")));\n  });\n}\n/**\n * @summary Remove logs older than the configured number of days\n * @param {Function} callback - function to call when process complete\n * @returns {Number} results of remmoval query\n */\n\n\nfunction cleanupAvalaraJobs(callback) {\n  Promise.await(lazyLoadMoment());\n  const pkgData = taxCalc.getPackageData();\n\n  if (pkgData && pkgData.settings.avalara.enabled) {\n    const saveDuration = pkgData.settings.avalara.logRetentionDuration;\n    const olderThan = moment().subtract(saveDuration, \"days\");\n    const result = Logs.remove({\n      date: {\n        $lt: olderThan\n      }\n    });\n    Logger.debug(`Removed ${result} Avalara log records`);\n  }\n\n  callback();\n}\n\nfunction setupAvalaraCleanupHook() {\n  Hooks.Events.add(\"afterCoreInit\", () => {\n    if (!Meteor.isAppTest) {\n      Logger.debug(\"Adding Avalara log cleanup job and removing existing\");\n      new Job(Jobs, \"logs/removeOldAvalaraLogs\", {}).priority(\"normal\").retry({\n        retries: 5,\n        wait: 60000,\n        backoff: \"exponential\"\n      }).save({\n        cancelRepeats: true\n      });\n    }\n  });\n}\n\nfunction cleanupAvalogs() {\n  Jobs.processJobs(\"logs/removeOldAvalaraLogs\", {\n    pollInterval: 30 * 1000,\n    workTimeout: 180 * 1000\n  }, (job, callback) => {\n    Logger.debug(\"Avalara log cleanup running\");\n    cleanupAvalaraJobs(error => {\n      if (error) {\n        job.done(error.toString(), {\n          repeatId: true\n        });\n        callback();\n      } else {\n        const success = \"Avalara Log Cleanup ran successfully\";\n        Logger.debug(success);\n        job.done(success, {\n          repeatId: true\n        });\n        callback();\n      }\n    });\n  });\n}","map":{"version":3,"sources":["imports/plugins/included/taxes-avalara/server/jobs/cleanup.js"],"names":["module","export","setupAvalaraCleanupHook","cleanupAvalogs","Meteor","watch","require","v","Job","Jobs","Logs","Hooks","Logger","taxCalc","default","moment","lazyLoadMoment","cleanupAvalaraJobs","callback","Promise","await","pkgData","getPackageData","settings","avalara","enabled","saveDuration","logRetentionDuration","olderThan","subtract","result","remove","date","$lt","debug","Events","add","isAppTest","priority","retry","retries","wait","backoff","save","cancelRepeats","processJobs","pollInterval","workTimeout","job","error","done","toString","repeatId","success"],"mappings":"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","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Job } from \"/imports/plugins/core/job-collection/lib\";\nimport { Jobs, Logs } from \"/lib/collections\";\nimport { Hooks, Logger } from \"/server/api\";\nimport taxCalc from \"../methods/taxCalc\";\n\nlet moment;\nasync function lazyLoadMoment() {\n  if (moment) return;\n  moment = await import(\"moment\");\n}\n\n/**\n * @summary Remove logs older than the configured number of days\n * @param {Function} callback - function to call when process complete\n * @returns {Number} results of remmoval query\n */\nfunction cleanupAvalaraJobs(callback) {\n  Promise.await(lazyLoadMoment());\n  const pkgData = taxCalc.getPackageData();\n  if (pkgData && pkgData.settings.avalara.enabled) {\n    const saveDuration = pkgData.settings.avalara.logRetentionDuration;\n    const olderThan = moment().subtract(saveDuration, \"days\");\n    const result = Logs.remove({\n      date: {\n        $lt: olderThan\n      }\n    });\n    Logger.debug(`Removed ${result} Avalara log records`);\n  }\n  callback();\n}\n\nexport function setupAvalaraCleanupHook() {\n  Hooks.Events.add(\"afterCoreInit\", () => {\n    if (!Meteor.isAppTest) {\n      Logger.debug(\"Adding Avalara log cleanup job and removing existing\");\n      new Job(Jobs, \"logs/removeOldAvalaraLogs\", {})\n        .priority(\"normal\")\n        .retry({\n          retries: 5,\n          wait: 60000,\n          backoff: \"exponential\"\n        })\n        .save({\n          cancelRepeats: true\n        });\n    }\n  });\n}\n\nexport function cleanupAvalogs() {\n  Jobs.processJobs(\n    \"logs/removeOldAvalaraLogs\",\n    {\n      pollInterval: 30 * 1000,\n      workTimeout: 180 * 1000\n    },\n    (job, callback) => {\n      Logger.debug(\"Avalara log cleanup running\");\n      cleanupAvalaraJobs((error) => {\n        if (error) {\n          job.done(error.toString(), { repeatId: true });\n          callback();\n        } else {\n          const success = \"Avalara Log Cleanup ran successfully\";\n          Logger.debug(success);\n          job.done(success, { repeatId: true });\n          callback();\n        }\n      });\n    }\n  );\n}\n"]},"sourceType":"script","hash":"354bc1c1a3f3e4fc2c73a3b85378c38a6a1f6fd4"}
