{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"server/methods/email.js","filename":"server/methods/email.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"server/methods/email.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"server/methods/email.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/methods/email.js"}},"code":"let getServiceConfig;\nmodule.watch(require(\"nodemailer-wellknown\"), {\n  default(v) {\n    getServiceConfig = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet check, Match;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  },\n\n  Match(v) {\n    Match = v;\n  }\n\n}, 2);\nlet Jobs, Packages;\nmodule.watch(require(\"../../lib/collections\"), {\n  Jobs(v) {\n    Jobs = v;\n  },\n\n  Packages(v) {\n    Packages = v;\n  }\n\n}, 3);\nlet Logger, Reaction;\nmodule.watch(require(\"../api\"), {\n  Logger(v) {\n    Logger = v;\n  },\n\n  Reaction(v) {\n    Reaction = v;\n  }\n\n}, 4);\n\n/**\n * @file Methods for sending emails, retrying failed emails and verifying email configuration.\n * Run these methods using `Meteor.call()`\n *\n * @example Meteor.call(\"emails/retryFailed\", email._id, (err)\n * @namespace Methods/Email\n*/\nMeteor.methods({\n  /**\n   * @name email/verifySettings\n   * @method\n   * @summary Verify the current email configuration\n   * @memberof Methods/Email\n   * @param {Object} settings - optional settings object (otherwise uses settings in database)\n   * @return {Boolean} - returns true if SMTP connection succeeds\n   */\n  \"email/verifySettings\"(settings) {\n    if (!Reaction.hasPermission([\"owner\", \"admin\", \"dashboard\"], this.userId)) {\n      Logger.error(\"email/verifySettings: Access Denied\");\n      throw new Meteor.Error(\"access-denied\", \"Access Denied\");\n    }\n\n    this.unblock();\n    check(settings, Match.Optional(Object));\n    let config; // if a settings object has been provided, build a config\n\n    if (typeof settings === \"object\") {\n      const {\n        service,\n        host,\n        port,\n        user,\n        password\n      } = settings;\n\n      if (service === \"custom\" && host && port) {\n        // create a custom Nodemailer config\n        config = {\n          host,\n          port\n        };\n\n        if (host === \"localhost\") {\n          config.ignoreTLS = true;\n        }\n      } else if (service) {\n        // create a Nodemailer config from the nodemailer-wellknown services\n        config = getServiceConfig(service) || {};\n      }\n\n      if (user && password) {\n        config.auth = {\n          user,\n          pass: password\n        };\n      }\n    }\n\n    const {\n      Email\n    } = Reaction;\n    const conf = config || Email.getMailConfig();\n    Logger.debug(conf, \"Verifying email config settings\");\n\n    try {\n      return Meteor.wrapAsync(Email.verifyConfig)(conf);\n    } catch (e) {\n      Logger.error(e);\n      throw new Meteor.Error(e.responseCode, e.response);\n    }\n  },\n\n  /**\n   * @name email/saveSettings\n   * @method\n   * @summary Save new email configuration\n   * @memberof Methods/Email\n   * @param {Object} settings - mail provider settings\n   * @return {Boolean} - returns true if update succeeds\n   */\n  \"email/saveSettings\"(settings) {\n    if (!Reaction.hasPermission([\"owner\", \"admin\", \"dashboard\"], this.userId)) {\n      Logger.error(\"email/saveSettings: Access Denied\");\n      throw new Meteor.Error(\"access-denied\", \"Access Denied\");\n    }\n\n    check(settings, {\n      service: String,\n      host: Match.Optional(String),\n      port: Match.Optional(Number),\n      user: Match.Optional(String),\n      password: Match.Optional(String)\n    });\n    Packages.update({\n      name: \"core\",\n      shopId: Reaction.getShopId()\n    }, {\n      $set: {\n        \"settings.mail\": settings\n      }\n    });\n    delete settings.password;\n    Logger.info(settings, \"Email settings updated\");\n    return true;\n  },\n\n  /**\n   * @name email/retryFailed\n   * @method\n   * @summary Retry a failed or cancelled email job\n   * @memberof Methods/Email\n   * @param {String} jobId - a sendEmail job ID\n   * @return {Boolean} - returns true if job is successfully restarted\n   */\n  \"emails/retryFailed\"(jobId) {\n    if (!Reaction.hasPermission([\"owner\", \"admin\", \"reaction-email\"], this.userId)) {\n      Logger.error(\"email/retryFailed: Access Denied\");\n      throw new Meteor.Error(\"access-denied\", \"Access Denied\");\n    }\n\n    check(jobId, String);\n    let emailJobId = jobId;\n    Logger.debug(`emails/retryFailed - restarting email job \"${jobId}\"`); // Get email job to retry\n\n    const job = Jobs.getJob(jobId); // If this job was never completed, restart it and set it to \"ready\"\n\n    if (job._doc.status !== \"completed\") {\n      job.restart();\n      job.ready();\n    } else {\n      // Otherwise rerun the completed job\n      // `rerun` clones the job and returns the id.\n      // We'll set the new one to ready\n      emailJobId = job.rerun(); // Clone job to rerun\n    } // Set the job status to ready to trigger the Jobs observer to trigger sendEmail\n\n\n    Jobs.update({\n      _id: emailJobId\n    }, {\n      $set: {\n        status: \"ready\"\n      }\n    });\n    return true;\n  }\n\n});","map":{"version":3,"sources":["server/methods/email.js"],"names":["getServiceConfig","module","watch","require","default","v","Meteor","check","Match","Jobs","Packages","Logger","Reaction","methods","settings","hasPermission","userId","error","Error","unblock","Optional","Object","config","service","host","port","user","password","ignoreTLS","auth","pass","Email","conf","getMailConfig","debug","wrapAsync","verifyConfig","e","responseCode","response","String","Number","update","name","shopId","getShopId","$set","info","jobId","emailJobId","job","getJob","_doc","status","restart","ready","rerun","_id"],"mappings":"AAAA,IAAIA,gBAAJ;AAAqBC,OAAOC,KAAP,CAAaC,QAAQ,sBAAR,CAAb,EAA6C;AAACC,UAAQC,CAAR,EAAU;AAACL,uBAAiBK,CAAjB;AAAmB;;AAA/B,CAA7C,EAA8E,CAA9E;AAAiF,IAAIC,MAAJ;AAAWL,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACG,SAAOD,CAAP,EAAS;AAACC,aAAOD,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIE,KAAJ,EAAUC,KAAV;AAAgBP,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACI,QAAMF,CAAN,EAAQ;AAACE,YAAMF,CAAN;AAAQ,GAAlB;;AAAmBG,QAAMH,CAAN,EAAQ;AAACG,YAAMH,CAAN;AAAQ;;AAApC,CAArC,EAA2E,CAA3E;AAA8E,IAAII,IAAJ,EAASC,QAAT;AAAkBT,OAAOC,KAAP,CAAaC,QAAQ,uBAAR,CAAb,EAA8C;AAACM,OAAKJ,CAAL,EAAO;AAACI,WAAKJ,CAAL;AAAO,GAAhB;;AAAiBK,WAASL,CAAT,EAAW;AAACK,eAASL,CAAT;AAAW;;AAAxC,CAA9C,EAAwF,CAAxF;AAA2F,IAAIM,MAAJ,EAAWC,QAAX;AAAoBX,OAAOC,KAAP,CAAaC,QAAQ,QAAR,CAAb,EAA+B;AAACQ,SAAON,CAAP,EAAS;AAACM,aAAON,CAAP;AAAS,GAApB;;AAAqBO,WAASP,CAAT,EAAW;AAACO,eAASP,CAAT;AAAW;;AAA5C,CAA/B,EAA6E,CAA7E;;AAM/Y;;;;;;;AAOAC,OAAOO,OAAP,CAAe;AACb;;;;;;;;AAQA,yBAAuBC,QAAvB,EAAiC;AAC/B,QAAI,CAACF,SAASG,aAAT,CAAuB,CAAC,OAAD,EAAU,OAAV,EAAmB,WAAnB,CAAvB,EAAwD,KAAKC,MAA7D,CAAL,EAA2E;AACzEL,aAAOM,KAAP,CAAa,qCAAb;AACA,YAAM,IAAIX,OAAOY,KAAX,CAAiB,eAAjB,EAAkC,eAAlC,CAAN;AACD;;AAED,SAAKC,OAAL;AAEAZ,UAAMO,QAAN,EAAgBN,MAAMY,QAAN,CAAeC,MAAf,CAAhB;AAEA,QAAIC,MAAJ,CAV+B,CAY/B;;AACA,QAAI,OAAOR,QAAP,KAAoB,QAAxB,EAAkC;AAChC,YAAM;AAAES,eAAF;AAAWC,YAAX;AAAiBC,YAAjB;AAAuBC,YAAvB;AAA6BC;AAA7B,UAA0Cb,QAAhD;;AAEA,UAAIS,YAAY,QAAZ,IAAwBC,IAAxB,IAAgCC,IAApC,EAA0C;AACxC;AACAH,iBAAS;AAAEE,cAAF;AAAQC;AAAR,SAAT;;AAEA,YAAID,SAAS,WAAb,EAA0B;AACxBF,iBAAOM,SAAP,GAAmB,IAAnB;AACD;AACF,OAPD,MAOO,IAAIL,OAAJ,EAAa;AAClB;AACAD,iBAAStB,iBAAiBuB,OAAjB,KAA6B,EAAtC;AACD;;AAED,UAAIG,QAAQC,QAAZ,EAAsB;AACpBL,eAAOO,IAAP,GAAc;AAAEH,cAAF;AAAQI,gBAAMH;AAAd,SAAd;AACD;AACF;;AAED,UAAM;AAAEI;AAAF,QAAYnB,QAAlB;AAEA,UAAMoB,OAAOV,UAAUS,MAAME,aAAN,EAAvB;AAEAtB,WAAOuB,KAAP,CAAaF,IAAb,EAAmB,iCAAnB;;AAEA,QAAI;AACF,aAAO1B,OAAO6B,SAAP,CAAiBJ,MAAMK,YAAvB,EAAqCJ,IAArC,CAAP;AACD,KAFD,CAEE,OAAOK,CAAP,EAAU;AACV1B,aAAOM,KAAP,CAAaoB,CAAb;AACA,YAAM,IAAI/B,OAAOY,KAAX,CAAiBmB,EAAEC,YAAnB,EAAiCD,EAAEE,QAAnC,CAAN;AACD;AACF,GAtDY;;AAwDb;;;;;;;;AAQA,uBAAqBzB,QAArB,EAA+B;AAC7B,QAAI,CAACF,SAASG,aAAT,CAAuB,CAAC,OAAD,EAAU,OAAV,EAAmB,WAAnB,CAAvB,EAAwD,KAAKC,MAA7D,CAAL,EAA2E;AACzEL,aAAOM,KAAP,CAAa,mCAAb;AACA,YAAM,IAAIX,OAAOY,KAAX,CAAiB,eAAjB,EAAkC,eAAlC,CAAN;AACD;;AAEDX,UAAMO,QAAN,EAAgB;AACdS,eAASiB,MADK;AAEdhB,YAAMhB,MAAMY,QAAN,CAAeoB,MAAf,CAFQ;AAGdf,YAAMjB,MAAMY,QAAN,CAAeqB,MAAf,CAHQ;AAIdf,YAAMlB,MAAMY,QAAN,CAAeoB,MAAf,CAJQ;AAKdb,gBAAUnB,MAAMY,QAAN,CAAeoB,MAAf;AALI,KAAhB;AAQA9B,aAASgC,MAAT,CAAgB;AAAEC,YAAM,MAAR;AAAgBC,cAAQhC,SAASiC,SAAT;AAAxB,KAAhB,EAAgE;AAC9DC,YAAM;AACJ,yBAAiBhC;AADb;AADwD,KAAhE;AAMA,WAAOA,SAASa,QAAhB;AAEAhB,WAAOoC,IAAP,CAAYjC,QAAZ,EAAsB,wBAAtB;AAEA,WAAO,IAAP;AACD,GAzFY;;AA2Fb;;;;;;;;AAQA,uBAAqBkC,KAArB,EAA4B;AAC1B,QAAI,CAACpC,SAASG,aAAT,CAAuB,CAAC,OAAD,EAAU,OAAV,EAAmB,gBAAnB,CAAvB,EAA6D,KAAKC,MAAlE,CAAL,EAAgF;AAC9EL,aAAOM,KAAP,CAAa,kCAAb;AACA,YAAM,IAAIX,OAAOY,KAAX,CAAiB,eAAjB,EAAkC,eAAlC,CAAN;AACD;;AAEDX,UAAMyC,KAAN,EAAaR,MAAb;AACA,QAAIS,aAAaD,KAAjB;AAEArC,WAAOuB,KAAP,CAAc,8CAA6Cc,KAAM,GAAjE,EAT0B,CAW1B;;AACA,UAAME,MAAMzC,KAAK0C,MAAL,CAAYH,KAAZ,CAAZ,CAZ0B,CAa1B;;AACA,QAAIE,IAAIE,IAAJ,CAASC,MAAT,KAAoB,WAAxB,EAAqC;AACnCH,UAAII,OAAJ;AACAJ,UAAIK,KAAJ;AACD,KAHD,MAGO;AACL;AACA;AACA;AACAN,mBAAaC,IAAIM,KAAJ,EAAb,CAJK,CAIqB;AAC3B,KAtByB,CAwB1B;;;AACA/C,SAAKiC,MAAL,CAAY;AAAEe,WAAKR;AAAP,KAAZ,EAAiC;AAC/BH,YAAM;AACJO,gBAAQ;AADJ;AADyB,KAAjC;AAMA,WAAO,IAAP;AACD;;AAnIY,CAAf","sourcesContent":["import getServiceConfig from \"nodemailer-wellknown\";\nimport { Meteor } from \"meteor/meteor\";\nimport { check, Match } from \"meteor/check\";\nimport { Jobs, Packages } from \"/lib/collections\";\nimport { Logger, Reaction } from \"/server/api\";\n\n/**\n * @file Methods for sending emails, retrying failed emails and verifying email configuration.\n * Run these methods using `Meteor.call()`\n *\n * @example Meteor.call(\"emails/retryFailed\", email._id, (err)\n * @namespace Methods/Email\n*/\nMeteor.methods({\n  /**\n   * @name email/verifySettings\n   * @method\n   * @summary Verify the current email configuration\n   * @memberof Methods/Email\n   * @param {Object} settings - optional settings object (otherwise uses settings in database)\n   * @return {Boolean} - returns true if SMTP connection succeeds\n   */\n  \"email/verifySettings\"(settings) {\n    if (!Reaction.hasPermission([\"owner\", \"admin\", \"dashboard\"], this.userId)) {\n      Logger.error(\"email/verifySettings: Access Denied\");\n      throw new Meteor.Error(\"access-denied\", \"Access Denied\");\n    }\n\n    this.unblock();\n\n    check(settings, Match.Optional(Object));\n\n    let config;\n\n    // if a settings object has been provided, build a config\n    if (typeof settings === \"object\") {\n      const { service, host, port, user, password } = settings;\n\n      if (service === \"custom\" && host && port) {\n        // create a custom Nodemailer config\n        config = { host, port };\n\n        if (host === \"localhost\") {\n          config.ignoreTLS = true;\n        }\n      } else if (service) {\n        // create a Nodemailer config from the nodemailer-wellknown services\n        config = getServiceConfig(service) || {};\n      }\n\n      if (user && password) {\n        config.auth = { user, pass: password };\n      }\n    }\n\n    const { Email } = Reaction;\n\n    const conf = config || Email.getMailConfig();\n\n    Logger.debug(conf, \"Verifying email config settings\");\n\n    try {\n      return Meteor.wrapAsync(Email.verifyConfig)(conf);\n    } catch (e) {\n      Logger.error(e);\n      throw new Meteor.Error(e.responseCode, e.response);\n    }\n  },\n\n  /**\n   * @name email/saveSettings\n   * @method\n   * @summary Save new email configuration\n   * @memberof Methods/Email\n   * @param {Object} settings - mail provider settings\n   * @return {Boolean} - returns true if update succeeds\n   */\n  \"email/saveSettings\"(settings) {\n    if (!Reaction.hasPermission([\"owner\", \"admin\", \"dashboard\"], this.userId)) {\n      Logger.error(\"email/saveSettings: Access Denied\");\n      throw new Meteor.Error(\"access-denied\", \"Access Denied\");\n    }\n\n    check(settings, {\n      service: String,\n      host: Match.Optional(String),\n      port: Match.Optional(Number),\n      user: Match.Optional(String),\n      password: Match.Optional(String)\n    });\n\n    Packages.update({ name: \"core\", shopId: Reaction.getShopId() }, {\n      $set: {\n        \"settings.mail\": settings\n      }\n    });\n\n    delete settings.password;\n\n    Logger.info(settings, \"Email settings updated\");\n\n    return true;\n  },\n\n  /**\n   * @name email/retryFailed\n   * @method\n   * @summary Retry a failed or cancelled email job\n   * @memberof Methods/Email\n   * @param {String} jobId - a sendEmail job ID\n   * @return {Boolean} - returns true if job is successfully restarted\n   */\n  \"emails/retryFailed\"(jobId) {\n    if (!Reaction.hasPermission([\"owner\", \"admin\", \"reaction-email\"], this.userId)) {\n      Logger.error(\"email/retryFailed: Access Denied\");\n      throw new Meteor.Error(\"access-denied\", \"Access Denied\");\n    }\n\n    check(jobId, String);\n    let emailJobId = jobId;\n\n    Logger.debug(`emails/retryFailed - restarting email job \"${jobId}\"`);\n\n    // Get email job to retry\n    const job = Jobs.getJob(jobId);\n    // If this job was never completed, restart it and set it to \"ready\"\n    if (job._doc.status !== \"completed\") {\n      job.restart();\n      job.ready();\n    } else {\n      // Otherwise rerun the completed job\n      // `rerun` clones the job and returns the id.\n      // We'll set the new one to ready\n      emailJobId = job.rerun(); // Clone job to rerun\n    }\n\n    // Set the job status to ready to trigger the Jobs observer to trigger sendEmail\n    Jobs.update({ _id: emailJobId }, {\n      $set: {\n        status: \"ready\"\n      }\n    });\n\n    return true;\n  }\n});\n"]},"sourceType":"script","hash":"46b86c324c677b237bc0fe1a406c1c0754290db1"}
