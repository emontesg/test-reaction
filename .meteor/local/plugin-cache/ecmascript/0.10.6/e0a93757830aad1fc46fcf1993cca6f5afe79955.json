{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"server/imports/fixtures/cart.js","filename":"server/imports/fixtures/cart.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"server/imports/fixtures/cart.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"server/imports/fixtures/cart.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/imports/fixtures/cart.js"}},"code":"module.export({\n  getCartItem: () => getCartItem,\n  createCart: () => createCart\n});\n\nlet _defaults;\n\nmodule.watch(require(\"lodash/defaults\"), {\n  default(v) {\n    _defaults = v;\n  }\n\n}, 0);\n\nlet _random;\n\nmodule.watch(require(\"lodash/random\"), {\n  default(v) {\n    _random = v;\n  }\n\n}, 1);\nlet faker;\nmodule.watch(require(\"faker\"), {\n  default(v) {\n    faker = v;\n  }\n\n}, 2);\nlet Factory;\nmodule.watch(require(\"meteor/dburles:factory\"), {\n  Factory(v) {\n    Factory = v;\n  }\n\n}, 3);\nlet Random;\nmodule.watch(require(\"meteor/random\"), {\n  Random(v) {\n    Random = v;\n  }\n\n}, 4);\nlet Cart, Products;\nmodule.watch(require(\"../../../lib/collections\"), {\n  Cart(v) {\n    Cart = v;\n  },\n\n  Products(v) {\n    Products = v;\n  }\n\n}, 5);\nlet getShop;\nmodule.watch(require(\"./shops\"), {\n  getShop(v) {\n    getShop = v;\n  }\n\n}, 6);\nlet getAddress;\nmodule.watch(require(\"./accounts\"), {\n  getAddress(v) {\n    getAddress = v;\n  }\n\n}, 7);\nlet addProduct;\nmodule.watch(require(\"./products\"), {\n  addProduct(v) {\n    addProduct = v;\n  }\n\n}, 8);\n\nfunction getCartItem(options = {}) {\n  const product = addProduct();\n  const variant = Products.findOne({\n    ancestors: [product._id]\n  });\n  const childVariants = Products.find({\n    ancestors: [product._id, variant._id]\n  }).fetch();\n  const selectedOption = Random.choice(childVariants);\n  const defaults = {\n    _id: Random.id(),\n    productId: product._id,\n    shopId: options.shopId || getShop()._id,\n    quantity: _random(1, selectedOption.inventoryQuantity),\n    product,\n    variants: selectedOption,\n    title: product.title\n  };\n  return _defaults(options, defaults);\n}\n\n/**\n * @method getSingleCartItem\n * @memberof Fixtures\n * @param {Object} [options] - Options object (optional)\n * @param {string} [options._id] - id of CartItem\n * @param {string} [options.productId] - _id of product that item came from\n * @param {string} [options.shopId] - _id of shop that item came from\n * @returns {Object} - randomly generated cartItem/orderItem data object with only one cart item\n */\nfunction getSingleCartItem(options = {}) {\n  const cartItem = getCartItem(options);\n  const quantity = options.cartQuantity || 1;\n  cartItem.quantity = quantity;\n  return cartItem;\n}\n/**\n * @method createCart\n * @memberof Fixtures\n * @param  {String} productId ID of Product\n * @param  {String} variantId ID of Product Variant\n * @return {Object}           Inserted cart object\n */\n\n\nfunction createCart(productId, variantId) {\n  const product = Products.findOne(productId);\n  const variant = Products.findOne(variantId);\n  const user = Factory.create(\"user\");\n  const cartItem = {\n    _id: Random.id(),\n    productId: product._id,\n    shopId: getShop()._id,\n    quantity: 1,\n    product,\n    variants: variant,\n    title: product.title\n  };\n  const cart = {\n    shopId: getShop()._id,\n    userId: user._id,\n    sessionId: Random.id(),\n    email: faker.internet.email(),\n    items: [cartItem],\n    shipping: [{\n      _id: Random.id(),\n      shopId: getShop()._id,\n      address: getAddress()\n    }],\n    billing: [{\n      _id: Random.id(),\n      shopId: getShop()._id,\n      address: getAddress()\n    }],\n    workflow: {\n      status: \"checkoutPayment\",\n      workflow: [\"checkoutLogin\", \"checkoutAddressBook\", \"coreCheckoutShipping\", \"checkoutReview\", \"checkoutPayment\"]\n    },\n    createdAt: faker.date.past(),\n    updatedAt: new Date()\n  };\n  const newCartId = Cart.insert(cart);\n  const insertedCart = Cart.findOne(newCartId);\n  return insertedCart;\n}\n\nmodule.exportDefault(function () {\n  /**\n   * @name Cart\n   * @memberof Fixtures\n   * @summary Define cart Factory\n   * @example const cart = Factory.create(\"cartMultiItems\");\n   * @property {string} shopId id - `getShop().id`\n   * @property {string} userId id - `Factory.get(\"user\")`\n   * @property {string} sessionId - `Random.id()`\n   * @property {string} email - `faker.internet.email()`\n   * @property {Array} items - `[getCartItem(), getCartItem()]`\n   * @property {Array} shipping - `[\n     {\n       _id: Random.id(),\n       shopId: getShop()._id,\n       address: addressForOrder\n     }\n   ]`\n   * @property {Array} billing - `[\n     {\n       _id: Random.id(),\n       shopId: getShop()._id,\n       address: addressForOrder\n     }\n   ]`\n   * @property {Object} workflow - `{\n     status: \"checkoutPayment\",\n     workflow: [\n       \"checkoutLogin\",\n       \"checkoutAddressBook\",\n       \"coreCheckoutShipping\",\n       \"checkoutReview\",\n       \"checkoutPayment\"\n     ]\n   }`\n   * @property {Date} createdAt - `faker.date.past()`\n   * @property {Date} updatedAt - `new Date()`\n   * @description Types of Cart Factories:\n   * - `cart`: A cart with a user and two items\n   * - `cartToOrder`: A cart with shipping, billing info and at the Checkout workflow state\n   * - `anonymousCart`: An empty cart with an anonymous user\n   * - `cartOne`: A cart with one item\n   * - `cartTwo`: A cart with one item with quantity 2\n   * - `cartMultiItems`: A cart with two items, 1 each\n   * - `cartMultiShop`: A cart with two items, from different shops\n   * - `cartNoItems`: A cart with a user and no items\n   */\n  const cartNoItems = {\n    shopId: getShop()._id,\n    userId: Factory.get(\"user\"),\n    sessionId: Random.id(),\n    email: faker.internet.email(),\n    items: [],\n    shipping: [],\n    billing: [],\n    workflow: {\n      status: \"new\",\n      workflow: []\n    },\n    createdAt: faker.date.past(),\n    updatedAt: new Date()\n  };\n  const cart = {\n    shopId: getShop()._id,\n    userId: Factory.get(\"user\"),\n    sessionId: Random.id(),\n    email: faker.internet.email(),\n    items: [getCartItem(), getCartItem()],\n    shipping: [],\n    billing: [],\n    workflow: {\n      status: \"new\",\n      workflow: []\n    },\n    createdAt: faker.date.past(),\n    updatedAt: new Date()\n  };\n  const cartOne = {\n    items: [getSingleCartItem()]\n  };\n  const cartTwo = {\n    items: [getSingleCartItem({\n      cartQuantity: 2\n    })]\n  };\n  const cartMultiItems = {\n    items: [getSingleCartItem(), getSingleCartItem()]\n  };\n  const cartMultiShopItems = {\n    items: [getSingleCartItem(), getSingleCartItem({\n      shopId: Random.id()\n    })]\n  };\n  const addressForOrder = getAddress();\n  const cartToOrder = {\n    shopId: getShop()._id,\n    shipping: [{\n      _id: Random.id(),\n      shopId: getShop()._id,\n      address: addressForOrder\n    }],\n    billing: [{\n      _id: Random.id(),\n      shopId: getShop()._id,\n      address: addressForOrder\n    }],\n    workflow: {\n      status: \"checkoutPayment\",\n      workflow: [\"checkoutLogin\", \"checkoutAddressBook\", \"coreCheckoutShipping\", \"checkoutReview\", \"checkoutPayment\"]\n    }\n  };\n  const anonymousCart = {\n    userId: Factory.get(\"anonymous\")\n  };\n  Factory.define(\"cart\", Cart, Object.assign({}, cart));\n  Factory.define(\"cartToOrder\", Cart, Object.assign({}, cart, cartToOrder));\n  Factory.define(\"anonymousCart\", Cart, Object.assign({}, cart, anonymousCart));\n  Factory.define(\"cartOne\", Cart, Object.assign({}, cart, cartToOrder, cartOne));\n  Factory.define(\"cartTwo\", Cart, Object.assign({}, cart, cartToOrder, cartTwo));\n  Factory.define(\"cartMultiItems\", Cart, Object.assign({}, cart, cartToOrder, cartMultiItems));\n  Factory.define(\"cartMultiShop\", Cart, Object.assign({}, cart, cartToOrder, cartMultiShopItems));\n  Factory.define(\"cartNoItems\", Cart, Object.assign({}, cart, cartToOrder, cartNoItems));\n});","map":{"version":3,"sources":["server/imports/fixtures/cart.js"],"names":["module","export","getCartItem","createCart","_defaults","watch","require","default","v","_random","faker","Factory","Random","Cart","Products","getShop","getAddress","addProduct","options","product","variant","findOne","ancestors","_id","childVariants","find","fetch","selectedOption","choice","defaults","id","productId","shopId","quantity","inventoryQuantity","variants","title","getSingleCartItem","cartItem","cartQuantity","variantId","user","create","cart","userId","sessionId","email","internet","items","shipping","address","billing","workflow","status","createdAt","date","past","updatedAt","Date","newCartId","insert","insertedCart","exportDefault","cartNoItems","get","cartOne","cartTwo","cartMultiItems","cartMultiShopItems","addressForOrder","cartToOrder","anonymousCart","define","Object","assign"],"mappings":"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","sourcesContent":["import faker from \"faker\";\nimport _ from \"lodash\";\nimport { Factory } from \"meteor/dburles:factory\";\nimport { Random } from \"meteor/random\";\nimport { Cart, Products } from \"/lib/collections\";\nimport { getShop } from \"./shops\";\nimport { getAddress } from \"./accounts\";\nimport { addProduct } from \"./products\";\n\n/**\n * @method getCartItem\n * @memberof Fixtures\n * @param {Object} [options] - Options object (optional)\n * @param {string} [options._id] - id of CartItem\n * @param {string} [options.productId] - _id of product that item came from\n * @param {string} [options.shopId] - _id of shop that item came from\n * @param {number} [options.quantity] - quantity of item in CartItem\n * @param {Object} [options.variants] - _single_ variant object. ¯\\_(ツ)_/¯ why called variants\n *\n * @returns {Object} - randomly generated cartItem/orderItem data object\n */\nexport function getCartItem(options = {}) {\n  const product = addProduct();\n  const variant = Products.findOne({ ancestors: [product._id] });\n  const childVariants = Products.find({\n    ancestors: [\n      product._id, variant._id\n    ]\n  }).fetch();\n  const selectedOption = Random.choice(childVariants);\n  const defaults = {\n    _id: Random.id(),\n    productId: product._id,\n    shopId: options.shopId || getShop()._id,\n    quantity: _.random(1, selectedOption.inventoryQuantity),\n    product,\n    variants: selectedOption,\n    title: product.title\n  };\n  return _.defaults(options, defaults);\n}\n\n/**\n * @method getSingleCartItem\n * @memberof Fixtures\n * @param {Object} [options] - Options object (optional)\n * @param {string} [options._id] - id of CartItem\n * @param {string} [options.productId] - _id of product that item came from\n * @param {string} [options.shopId] - _id of shop that item came from\n * @returns {Object} - randomly generated cartItem/orderItem data object with only one cart item\n */\nfunction getSingleCartItem(options = {}) {\n  const cartItem = getCartItem(options);\n  const quantity = options.cartQuantity || 1;\n  cartItem.quantity = quantity;\n  return cartItem;\n}\n\n/**\n * @method createCart\n * @memberof Fixtures\n * @param  {String} productId ID of Product\n * @param  {String} variantId ID of Product Variant\n * @return {Object}           Inserted cart object\n */\nexport function createCart(productId, variantId) {\n  const product = Products.findOne(productId);\n  const variant = Products.findOne(variantId);\n  const user = Factory.create(\"user\");\n  const cartItem = {\n    _id: Random.id(),\n    productId: product._id,\n    shopId: getShop()._id,\n    quantity: 1,\n    product,\n    variants: variant,\n    title: product.title\n  };\n\n  const cart = {\n    shopId: getShop()._id,\n    userId: user._id,\n    sessionId: Random.id(),\n    email: faker.internet.email(),\n    items: [cartItem],\n    shipping: [\n      {\n        _id: Random.id(),\n        shopId: getShop()._id,\n        address: getAddress()\n      }\n    ],\n    billing: [\n      {\n        _id: Random.id(),\n        shopId: getShop()._id,\n        address: getAddress()\n      }\n    ],\n    workflow: {\n      status: \"checkoutPayment\",\n      workflow: [\n        \"checkoutLogin\",\n        \"checkoutAddressBook\",\n        \"coreCheckoutShipping\",\n        \"checkoutReview\",\n        \"checkoutPayment\"\n      ]\n    },\n    createdAt: faker.date.past(),\n    updatedAt: new Date()\n  };\n  const newCartId = Cart.insert(cart);\n  const insertedCart = Cart.findOne(newCartId);\n  return insertedCart;\n}\n\nexport default function () {\n  /**\n   * @name Cart\n   * @memberof Fixtures\n   * @summary Define cart Factory\n   * @example const cart = Factory.create(\"cartMultiItems\");\n   * @property {string} shopId id - `getShop().id`\n   * @property {string} userId id - `Factory.get(\"user\")`\n   * @property {string} sessionId - `Random.id()`\n   * @property {string} email - `faker.internet.email()`\n   * @property {Array} items - `[getCartItem(), getCartItem()]`\n   * @property {Array} shipping - `[\n     {\n       _id: Random.id(),\n       shopId: getShop()._id,\n       address: addressForOrder\n     }\n   ]`\n   * @property {Array} billing - `[\n     {\n       _id: Random.id(),\n       shopId: getShop()._id,\n       address: addressForOrder\n     }\n   ]`\n   * @property {Object} workflow - `{\n     status: \"checkoutPayment\",\n     workflow: [\n       \"checkoutLogin\",\n       \"checkoutAddressBook\",\n       \"coreCheckoutShipping\",\n       \"checkoutReview\",\n       \"checkoutPayment\"\n     ]\n   }`\n   * @property {Date} createdAt - `faker.date.past()`\n   * @property {Date} updatedAt - `new Date()`\n   * @description Types of Cart Factories:\n   * - `cart`: A cart with a user and two items\n   * - `cartToOrder`: A cart with shipping, billing info and at the Checkout workflow state\n   * - `anonymousCart`: An empty cart with an anonymous user\n   * - `cartOne`: A cart with one item\n   * - `cartTwo`: A cart with one item with quantity 2\n   * - `cartMultiItems`: A cart with two items, 1 each\n   * - `cartMultiShop`: A cart with two items, from different shops\n   * - `cartNoItems`: A cart with a user and no items\n   */\n  const cartNoItems = {\n    shopId: getShop()._id,\n    userId: Factory.get(\"user\"),\n    sessionId: Random.id(),\n    email: faker.internet.email(),\n    items: [],\n    shipping: [],\n    billing: [],\n    workflow: {\n      status: \"new\",\n      workflow: []\n    },\n    createdAt: faker.date.past(),\n    updatedAt: new Date()\n  };\n\n  const cart = {\n    shopId: getShop()._id,\n    userId: Factory.get(\"user\"),\n    sessionId: Random.id(),\n    email: faker.internet.email(),\n    items: [\n      getCartItem(),\n      getCartItem()\n    ],\n    shipping: [],\n    billing: [],\n    workflow: {\n      status: \"new\",\n      workflow: []\n    },\n    createdAt: faker.date.past(),\n    updatedAt: new Date()\n  };\n\n  const cartOne = {\n    items: [\n      getSingleCartItem()\n    ]\n  };\n\n  const cartTwo = {\n    items: [\n      getSingleCartItem({ cartQuantity: 2 })\n    ]\n  };\n\n  const cartMultiItems = {\n    items: [getSingleCartItem(), getSingleCartItem()]\n  };\n\n  const cartMultiShopItems = {\n    items: [getSingleCartItem(), getSingleCartItem({ shopId: Random.id() })]\n  };\n\n  const addressForOrder = getAddress();\n  const cartToOrder = {\n    shopId: getShop()._id,\n    shipping: [\n      {\n        _id: Random.id(),\n        shopId: getShop()._id,\n        address: addressForOrder\n      }\n    ],\n    billing: [\n      {\n        _id: Random.id(),\n        shopId: getShop()._id,\n        address: addressForOrder\n      }\n    ],\n    workflow: {\n      status: \"checkoutPayment\",\n      workflow: [\n        \"checkoutLogin\",\n        \"checkoutAddressBook\",\n        \"coreCheckoutShipping\",\n        \"checkoutReview\",\n        \"checkoutPayment\"\n      ]\n    }\n  };\n\n  const anonymousCart = {\n    userId: Factory.get(\"anonymous\")\n  };\n\n  Factory.define(\"cart\", Cart, Object.assign({}, cart));\n  Factory.define(\"cartToOrder\", Cart, Object.assign({}, cart, cartToOrder));\n  Factory.define(\"anonymousCart\", Cart, Object.assign({}, cart, anonymousCart));\n  Factory.define(\"cartOne\", Cart, Object.assign({}, cart, cartToOrder, cartOne));\n  Factory.define(\"cartTwo\", Cart, Object.assign({}, cart, cartToOrder, cartTwo));\n  Factory.define(\"cartMultiItems\", Cart, Object.assign({}, cart, cartToOrder, cartMultiItems));\n  Factory.define(\"cartMultiShop\", Cart, Object.assign({}, cart, cartToOrder, cartMultiShopItems));\n  Factory.define(\"cartNoItems\", Cart, Object.assign({}, cart, cartToOrder, cartNoItems));\n}\n"]},"sourceType":"script","hash":"e0a93757830aad1fc46fcf1993cca6f5afe79955"}
