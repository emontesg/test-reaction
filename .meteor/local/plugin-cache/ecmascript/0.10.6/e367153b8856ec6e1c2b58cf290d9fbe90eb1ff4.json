{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"server/jobs/email.js","filename":"server/jobs/email.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"server/jobs/email.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"server/jobs/email.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/jobs/email.js"}},"code":"let nodemailer;\nmodule.watch(require(\"@reactioncommerce/nodemailer\"), {\n  default(v) {\n    nodemailer = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Emails, Jobs;\nmodule.watch(require(\"../../lib/collections\"), {\n  Emails(v) {\n    Emails = v;\n  },\n\n  Jobs(v) {\n    Jobs = v;\n  }\n\n}, 2);\nlet Reaction, Logger;\nmodule.watch(require(\"../api\"), {\n  Reaction(v) {\n    Reaction = v;\n  },\n\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 3);\nmodule.exportDefault(function () {\n  /**\n   * Send Email job\n   *\n   * Example usage:\n   * new Job(Jobs, \"sendEmail\", { from, to, subject, html }).save();\n   */\n  const sendEmail = Jobs.processJobs(\"sendEmail\", {\n    pollInterval: 5 * 60 * 1000,\n    // poll every 5 mins as a backup - see the realtime observer below\n    workTimeout: 2 * 60 * 1000,\n    // fail if it takes longer than 2mins\n    payload: 20\n  }, (jobs, callback) => {\n    jobs.forEach(job => {\n      const {\n        from,\n        to,\n        subject,\n        html\n      } = job.data;\n\n      if (!from || !to || !subject || !html) {\n        const msg = \"Email job requires an options object with to/from/subject/html.\";\n        Logger.error(`[Job]: ${msg}`);\n        return job.fail(msg, {\n          fatal: true\n        });\n      }\n\n      const jobId = job._doc._id;\n      Emails.update({\n        jobId\n      }, {\n        $set: {\n          from,\n          to,\n          subject,\n          html,\n          status: \"processing\"\n        }\n      }, {\n        upsert: true\n      });\n      const config = Reaction.Email.getMailConfig();\n\n      if (config.direct) {\n        Emails.update({\n          jobId\n        }, {\n          $set: {\n            status: \"failed\"\n          }\n        });\n        const msg = \"Mail not configured\";\n        Logger.error(msg);\n        return job.fail(msg);\n      }\n\n      Logger.debug(config, \"Sending email with config\");\n      const transport = nodemailer.createTransport(config);\n      transport.sendMail({\n        from,\n        to,\n        subject,\n        html\n      }, Meteor.bindEnvironment(error => {\n        if (error) {\n          Emails.update({\n            jobId\n          }, {\n            $set: {\n              status: \"failed\"\n            }\n          });\n          Logger.error(error, \"Email job failed\");\n          return job.fail(error.toString());\n        }\n\n        Emails.update({\n          jobId\n        }, {\n          $set: {\n            status: \"completed\"\n          }\n        });\n        Logger.debug(`Successfully sent email to ${to}`);\n        return job.done();\n      }));\n      return true;\n    });\n    return callback();\n  }); // Job Collection Observer\n  // This processes an email sending job as soon as it's submitted\n\n  Jobs.find({\n    type: \"sendEmail\",\n    status: \"ready\"\n  }).observe({\n    added() {\n      sendEmail.trigger();\n    }\n\n  });\n});","map":{"version":3,"sources":["server/jobs/email.js"],"names":["nodemailer","module","watch","require","default","v","Meteor","Emails","Jobs","Reaction","Logger","exportDefault","sendEmail","processJobs","pollInterval","workTimeout","payload","jobs","callback","forEach","job","from","to","subject","html","data","msg","error","fail","fatal","jobId","_doc","_id","update","$set","status","upsert","config","Email","getMailConfig","direct","debug","transport","createTransport","sendMail","bindEnvironment","toString","done","find","type","observe","added","trigger"],"mappings":"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","sourcesContent":["import nodemailer from \"@reactioncommerce/nodemailer\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Emails, Jobs } from \"/lib/collections\";\nimport { Reaction, Logger } from \"/server/api\";\n\nexport default function () {\n  /**\n   * Send Email job\n   *\n   * Example usage:\n   * new Job(Jobs, \"sendEmail\", { from, to, subject, html }).save();\n   */\n  const sendEmail = Jobs.processJobs(\"sendEmail\", {\n    pollInterval: 5 * 60 * 1000, // poll every 5 mins as a backup - see the realtime observer below\n    workTimeout: 2 * 60 * 1000, // fail if it takes longer than 2mins\n    payload: 20\n  }, (jobs, callback) => {\n    jobs.forEach((job) => {\n      const { from, to, subject, html } = job.data;\n\n      if (!from || !to || !subject || !html) {\n        const msg = \"Email job requires an options object with to/from/subject/html.\";\n        Logger.error(`[Job]: ${msg}`);\n        return job.fail(msg, { fatal: true });\n      }\n\n      const jobId = job._doc._id;\n\n      Emails.update({ jobId }, {\n        $set: {\n          from,\n          to,\n          subject,\n          html,\n          status: \"processing\"\n        }\n      }, {\n        upsert: true\n      });\n\n      const config = Reaction.Email.getMailConfig();\n\n      if (config.direct) {\n        Emails.update({ jobId }, {\n          $set: {\n            status: \"failed\"\n          }\n        });\n        const msg = \"Mail not configured\";\n        Logger.error(msg);\n        return job.fail(msg);\n      }\n\n      Logger.debug(config, \"Sending email with config\");\n\n      const transport = nodemailer.createTransport(config);\n\n      transport.sendMail({ from, to, subject, html }, Meteor.bindEnvironment((error) => {\n        if (error) {\n          Emails.update({ jobId }, {\n            $set: {\n              status: \"failed\"\n            }\n          });\n          Logger.error(error, \"Email job failed\");\n          return job.fail(error.toString());\n        }\n        Emails.update({ jobId }, {\n          $set: {\n            status: \"completed\"\n          }\n        });\n        Logger.debug(`Successfully sent email to ${to}`);\n        return job.done();\n      }));\n\n      return true;\n    });\n\n    return callback();\n  });\n\n  // Job Collection Observer\n  // This processes an email sending job as soon as it's submitted\n  Jobs.find({\n    type: \"sendEmail\",\n    status: \"ready\"\n  }).observe({\n    added() {\n      sendEmail.trigger();\n    }\n  });\n}\n"]},"sourceType":"script","hash":"e367153b8856ec6e1c2b58cf290d9fbe90eb1ff4"}
