{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/core/graphql/server/resolvers/xforms/connection.js","filename":"imports/plugins/core/graphql/server/resolvers/xforms/connection.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/core/graphql/server/resolvers/xforms/connection.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/core/graphql/server/resolvers/xforms/connection.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/core/graphql/server/resolvers/xforms/connection.js"}},"code":"module.export({\n  xformArrayToConnection: () => xformArrayToConnection\n});\nlet connectionFromArray, connectionFromPromisedArray;\nmodule.watch(require(\"graphql-relay\"), {\n  connectionFromArray(v) {\n    connectionFromArray = v;\n  },\n\n  connectionFromPromisedArray(v) {\n    connectionFromPromisedArray = v;\n  }\n\n}, 0);\n\nfunction xformArrayToConnection(connectionArgs, result) {\n  return Promise.asyncApply(() => {\n    let connection;\n\n    if (Array.isArray(result)) {\n      connection = connectionFromArray(result, connectionArgs);\n    } else {\n      connection = Promise.await(connectionFromPromisedArray(result, connectionArgs));\n    } // XXX An optimization would be to do this map only if the client\n    // actually asked for the `nodes` array.\n\n\n    connection.nodes = connection.edges.map(({\n      node\n    }) => node);\n    return connection;\n  });\n}","map":{"version":3,"sources":["imports/plugins/core/graphql/server/resolvers/xforms/connection.js"],"names":["module","export","xformArrayToConnection","connectionFromArray","connectionFromPromisedArray","watch","require","v","connectionArgs","result","connection","Array","isArray","nodes","edges","map","node"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,0BAAuB,MAAIA;AAA5B,CAAd;AAAmE,IAAIC,mBAAJ,EAAwBC,2BAAxB;AAAoDJ,OAAOK,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACH,sBAAoBI,CAApB,EAAsB;AAACJ,0BAAoBI,CAApB;AAAsB,GAA9C;;AAA+CH,8BAA4BG,CAA5B,EAA8B;AAACH,kCAA4BG,CAA5B;AAA8B;;AAA5G,CAAtC,EAAoJ,CAApJ;;AAEhH,SAAeL,sBAAf,CAAsCM,cAAtC,EAAsDC,MAAtD;AAAA,kCAA8D;AACnE,QAAIC,UAAJ;;AACA,QAAIC,MAAMC,OAAN,CAAcH,MAAd,CAAJ,EAA2B;AACzBC,mBAAaP,oBAAoBM,MAApB,EAA4BD,cAA5B,CAAb;AACD,KAFD,MAEO;AACLE,iCAAmBN,4BAA4BK,MAA5B,EAAoCD,cAApC,CAAnB;AACD,KANkE,CAQnE;AACA;;;AACAE,eAAWG,KAAX,GAAmBH,WAAWI,KAAX,CAAiBC,GAAjB,CAAqB,CAAC;AAAEC;AAAF,KAAD,KAAcA,IAAnC,CAAnB;AAEA,WAAON,UAAP;AACD,GAbM;AAAA","sourcesContent":["import { connectionFromArray, connectionFromPromisedArray } from \"graphql-relay\";\n\nexport async function xformArrayToConnection(connectionArgs, result) {\n  let connection;\n  if (Array.isArray(result)) {\n    connection = connectionFromArray(result, connectionArgs);\n  } else {\n    connection = await connectionFromPromisedArray(result, connectionArgs);\n  }\n\n  // XXX An optimization would be to do this map only if the client\n  // actually asked for the `nodes` array.\n  connection.nodes = connection.edges.map(({ node }) => node);\n\n  return connection;\n}\n"]},"sourceType":"script","hash":"f12ac2e84b1d82d35a31805aa9403af8c423475d"}
