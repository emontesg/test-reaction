{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/core/accounts/server/no-meteor/hasPermission.js","filename":"imports/plugins/core/accounts/server/no-meteor/hasPermission.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/core/accounts/server/no-meteor/hasPermission.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/core/accounts/server/no-meteor/hasPermission.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/core/accounts/server/no-meteor/hasPermission.js"}},"code":"module.export({\n  default: () => hasPermission\n});\nconst GLOBAL_GROUP = \"__global_roles__\";\n/**\n * @name hasPermission\n * @method\n * @memberof Core\n * @param {Object} user - The user object, with `roles` property, to check.\n * @param {String[]} permissions - Array of permission strings. The account must have at least one of them either globally or for the roleGroup.\n * @param {String} [roleGroup] - The shop ID for which the permissions are needed, or a more specific roles group. If not set,\n *   only global roles will be checked.\n * @return {Promise<Boolean>} True if the account with ID accountId has at least one of the requested permissions in the roleGroup group\n */\n\nfunction hasPermission(user, permissions, roleGroup) {\n  if (!user || !user.roles) return false;\n  if (!Array.isArray(permissions)) throw new Error(\"permissions must be an array of strings\");\n\n  if (roleGroup !== undefined && roleGroup !== null && (typeof roleGroup !== \"string\" || roleGroup.length === 0)) {\n    throw new Error(\"roleGroup must be a non-empty string\");\n  }\n\n  const checkRoles = permissions.slice(0); // This should always return true for owners\n\n  if (checkRoles.indexOf(\"owner\") === -1) checkRoles.push(\"owner\");\n  const {\n    roles\n  } = user; // always check GLOBAL_GROUP\n\n  const globalRoles = roles[GLOBAL_GROUP];\n  if (Array.isArray(globalRoles) && checkRoles.some(role => globalRoles.indexOf(role) !== -1)) return true;\n\n  if (roleGroup) {\n    // convert any periods to underscores for MongoDB compatibility\n    const group = roleGroup.replace(/\\./g, \"_\");\n    const groupRoles = roles[group];\n    if (Array.isArray(groupRoles) && checkRoles.some(role => groupRoles.indexOf(role) !== -1)) return true;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["imports/plugins/core/accounts/server/no-meteor/hasPermission.js"],"names":["module","export","default","hasPermission","GLOBAL_GROUP","user","permissions","roleGroup","roles","Array","isArray","Error","undefined","length","checkRoles","slice","indexOf","push","globalRoles","some","role","group","replace","groupRoles"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,WAAQ,MAAIC;AAAb,CAAd;AAAA,MAAMC,eAAe,kBAArB;AAEA;;;;;;;;;;;AAUe,SAASD,aAAT,CAAuBE,IAAvB,EAA6BC,WAA7B,EAA0CC,SAA1C,EAAqD;AAClE,MAAI,CAACF,IAAD,IAAS,CAACA,KAAKG,KAAnB,EAA0B,OAAO,KAAP;AAE1B,MAAI,CAACC,MAAMC,OAAN,CAAcJ,WAAd,CAAL,EAAiC,MAAM,IAAIK,KAAJ,CAAU,yCAAV,CAAN;;AACjC,MAAIJ,cAAcK,SAAd,IAA2BL,cAAc,IAAzC,KAAkD,OAAOA,SAAP,KAAqB,QAArB,IAAiCA,UAAUM,MAAV,KAAqB,CAAxG,CAAJ,EAAgH;AAC9G,UAAM,IAAIF,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,QAAMG,aAAaR,YAAYS,KAAZ,CAAkB,CAAlB,CAAnB,CARkE,CAUlE;;AACA,MAAID,WAAWE,OAAX,CAAmB,OAAnB,MAAgC,CAAC,CAArC,EAAwCF,WAAWG,IAAX,CAAgB,OAAhB;AAExC,QAAM;AAAET;AAAF,MAAYH,IAAlB,CAbkE,CAelE;;AACA,QAAMa,cAAcV,MAAMJ,YAAN,CAApB;AACA,MAAIK,MAAMC,OAAN,CAAcQ,WAAd,KAA8BJ,WAAWK,IAAX,CAAiBC,IAAD,IAAUF,YAAYF,OAAZ,CAAoBI,IAApB,MAA8B,CAAC,CAAzD,CAAlC,EAA+F,OAAO,IAAP;;AAE/F,MAAIb,SAAJ,EAAe;AACb;AACA,UAAMc,QAAQd,UAAUe,OAAV,CAAkB,KAAlB,EAAyB,GAAzB,CAAd;AAEA,UAAMC,aAAaf,MAAMa,KAAN,CAAnB;AACA,QAAIZ,MAAMC,OAAN,CAAca,UAAd,KAA6BT,WAAWK,IAAX,CAAiBC,IAAD,IAAUG,WAAWP,OAAX,CAAmBI,IAAnB,MAA6B,CAAC,CAAxD,CAAjC,EAA6F,OAAO,IAAP;AAC9F;;AAED,SAAO,KAAP;AACD","sourcesContent":["const GLOBAL_GROUP = \"__global_roles__\";\n\n/**\n * @name hasPermission\n * @method\n * @memberof Core\n * @param {Object} user - The user object, with `roles` property, to check.\n * @param {String[]} permissions - Array of permission strings. The account must have at least one of them either globally or for the roleGroup.\n * @param {String} [roleGroup] - The shop ID for which the permissions are needed, or a more specific roles group. If not set,\n *   only global roles will be checked.\n * @return {Promise<Boolean>} True if the account with ID accountId has at least one of the requested permissions in the roleGroup group\n */\nexport default function hasPermission(user, permissions, roleGroup) {\n  if (!user || !user.roles) return false;\n\n  if (!Array.isArray(permissions)) throw new Error(\"permissions must be an array of strings\");\n  if (roleGroup !== undefined && roleGroup !== null && (typeof roleGroup !== \"string\" || roleGroup.length === 0)) {\n    throw new Error(\"roleGroup must be a non-empty string\");\n  }\n\n  const checkRoles = permissions.slice(0);\n\n  // This should always return true for owners\n  if (checkRoles.indexOf(\"owner\") === -1) checkRoles.push(\"owner\");\n\n  const { roles } = user;\n\n  // always check GLOBAL_GROUP\n  const globalRoles = roles[GLOBAL_GROUP];\n  if (Array.isArray(globalRoles) && checkRoles.some((role) => globalRoles.indexOf(role) !== -1)) return true;\n\n  if (roleGroup) {\n    // convert any periods to underscores for MongoDB compatibility\n    const group = roleGroup.replace(/\\./g, \"_\");\n\n    const groupRoles = roles[group];\n    if (Array.isArray(groupRoles) && checkRoles.some((role) => groupRoles.indexOf(role) !== -1)) return true;\n  }\n\n  return false;\n}\n"]},"sourceType":"script","hash":"5ee34e6e21188e04f78395a4f591bb4bc34e529e"}
