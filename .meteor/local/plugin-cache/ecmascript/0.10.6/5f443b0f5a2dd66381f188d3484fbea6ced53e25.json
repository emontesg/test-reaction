{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/included/shipping-rates/server/hooks/hooks.js","filename":"imports/plugins/included/shipping-rates/server/hooks/hooks.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/included/shipping-rates/server/hooks/hooks.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/included/shipping-rates/server/hooks/hooks.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/included/shipping-rates/server/hooks/hooks.js"}},"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Shipping, Packages;\nmodule.watch(require(\"../../../../../../lib/collections\"), {\n  Shipping(v) {\n    Shipping = v;\n  },\n\n  Packages(v) {\n    Packages = v;\n  }\n\n}, 1);\nlet Logger, Reaction, Hooks;\nmodule.watch(require(\"../../../../../../server/api\"), {\n  Logger(v) {\n    Logger = v;\n  },\n\n  Reaction(v) {\n    Reaction = v;\n  },\n\n  Hooks(v) {\n    Hooks = v;\n  }\n\n}, 2);\nlet CartSchema;\nmodule.watch(require(\"../../../../../../lib/collections/schemas\"), {\n  Cart(v) {\n    CartSchema = v;\n  }\n\n}, 3);\n\n/**\n * getShippingRates - Returns a list of shipping rates based on the\n * items in a cart.\n * @param {Array} previousQueryResults - an array of shipping rates and\n * info about failed calls to the APIs of some shipping methods providers\n * e.g Shippo.\n * @param {Object} cart - details about the purchase a user wants to make.\n * @return {Array} - an array that contains two arrays: the first array will\n * be an updated list of shipping rates, and the second will contain info for\n * retrying this specific package if any errors occurred while retrieving the\n * shipping rates.\n */\nfunction getShippingRates(previousQueryResults, cart) {\n  CartSchema.validate(cart);\n  const [rates, retrialTargets] = previousQueryResults;\n  const shops = [];\n  const products = cart.items;\n  const currentMethodInfo = {\n    packageName: \"flat-rate-shipping\",\n    fileName: \"hooks.js\"\n  };\n\n  if (retrialTargets.length > 0) {\n    const isNotAmongFailedRequests = retrialTargets.every(target => target.packageName !== currentMethodInfo.packageName && target.fileName !== currentMethodInfo.fileName);\n\n    if (isNotAmongFailedRequests) {\n      return previousQueryResults;\n    }\n  } // Verify that we have shipping records\n\n\n  if (!cart.shipping || !cart.shipping.length) {\n    const errorDetails = {\n      requestStatus: \"error\",\n      shippingProvider: \"flat-rate-shipping\",\n      message: \"this cart is missing shipping records\"\n    };\n    return [[errorDetails], []];\n  } // Verify that we have a valid address to work with\n\n\n  let shippingErrorDetails;\n\n  if (cart.shipping.find(shippingRecord => !shippingRecord.address)) {\n    shippingErrorDetails = {\n      requestStatus: \"error\",\n      shippingProvider: \"flat-rate-shipping\",\n      message: \"The address property on one or more shipping records are incomplete\"\n    };\n    return [[shippingErrorDetails], []];\n  } // Validate that we have valid items to work with. We should never get here since we filter for this\n  // at the cart level\n\n\n  if (!cart.items || !cart.items.length) {\n    const errorDetails = {\n      requestStatus: \"error\",\n      shippingProvider: \"flat-rate-shipping\",\n      message: \"this cart has no items\"\n    };\n    return [[errorDetails], []];\n  }\n\n  let merchantShippingRates = false;\n  const marketplaceSettings = Reaction.getMarketplaceSettings();\n\n  if (marketplaceSettings && marketplaceSettings.enabled) {\n    ({\n      merchantShippingRates\n    } = marketplaceSettings.public);\n  }\n\n  let pkgData;\n\n  if (merchantShippingRates) {\n    // TODO this needs to be rewritten to handle getting rates from each shops that's represented on the order\n    Logger.fatal(\"Multiple shipping providers is currently not supported\");\n    throw new Meteor.Error(\"not-implemented\", \"Multiple shipping providers is currently not supported\");\n  } else {\n    pkgData = Packages.findOne({\n      name: \"reaction-shipping-rates\",\n      shopId: Reaction.getPrimaryShopId()\n    });\n  }\n\n  if (!pkgData || !cart.items || pkgData.settings.flatRates.enabled !== true) {\n    return [rates, retrialTargets];\n  } // default selector is primary shop\n\n\n  let selector = {\n    \"shopId\": Reaction.getPrimaryShopId(),\n    \"provider.enabled\": true\n  }; // Get rates from shops if merchantShippingRates is enabled\n  // Otherwise just get them from the primaryShop\n\n  if (merchantShippingRates) {\n    // create an array of shops, allowing\n    // the cart to have products from multiple shops\n    for (const product of products) {\n      if (product.shopId) {\n        shops.push(product.shopId);\n      }\n    } // if we have multiple shops in cart\n\n\n    if ((shops !== null ? shops.length : undefined) > 0) {\n      selector = {\n        \"shopId\": {\n          $in: shops\n        },\n        \"provider.enabled\": true\n      };\n    }\n  }\n\n  const shippingCollection = Shipping.find(selector);\n  const initialNumOfRates = rates.length;\n  shippingCollection.forEach(doc => {\n    const _results = [];\n\n    for (const method of doc.methods) {\n      if (!method.enabled) {\n        continue;\n      }\n\n      if (!method.rate) {\n        method.rate = 0;\n      }\n\n      if (!method.handling) {\n        method.handling = 0;\n      } // Store shipping provider here in order to have it available in shipmentMethod\n      // for cart and order usage\n\n\n      if (!method.carrier) {\n        method.carrier = doc.provider.label;\n      }\n\n      const rate = method.rate + method.handling;\n\n      _results.push(rates.push({\n        carrier: doc.provider.label,\n        method,\n        rate,\n        shopId: doc.shopId\n      }));\n    }\n\n    return _results;\n  });\n\n  if (rates.length === initialNumOfRates) {\n    const errorDetails = {\n      requestStatus: \"error\",\n      shippingProvider: \"flat-rate-shipping\",\n      message: \"Flat rate shipping did not return any shipping methods.\"\n    };\n    rates.push(errorDetails);\n    retrialTargets.push(currentMethodInfo);\n    return [rates, retrialTargets];\n  }\n\n  Logger.debug(\"Flat rate onGetShippingRates\", rates);\n  return [rates, retrialTargets];\n} // run getShippingRates when the onGetShippingRates event runs\n\n\nHooks.Events.add(\"onGetShippingRates\", getShippingRates);","map":{"version":3,"sources":["imports/plugins/included/shipping-rates/server/hooks/hooks.js"],"names":["Meteor","module","watch","require","v","Shipping","Packages","Logger","Reaction","Hooks","CartSchema","Cart","getShippingRates","previousQueryResults","cart","validate","rates","retrialTargets","shops","products","items","currentMethodInfo","packageName","fileName","length","isNotAmongFailedRequests","every","target","shipping","errorDetails","requestStatus","shippingProvider","message","shippingErrorDetails","find","shippingRecord","address","merchantShippingRates","marketplaceSettings","getMarketplaceSettings","enabled","public","pkgData","fatal","Error","findOne","name","shopId","getPrimaryShopId","settings","flatRates","selector","product","push","undefined","$in","shippingCollection","initialNumOfRates","forEach","doc","_results","method","methods","rate","handling","carrier","provider","label","debug","Events","add"],"mappings":"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","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Shipping, Packages } from \"/lib/collections\";\nimport { Logger, Reaction, Hooks } from \"/server/api\";\nimport { Cart as CartSchema } from \"/lib/collections/schemas\";\n\n/**\n * getShippingRates - Returns a list of shipping rates based on the\n * items in a cart.\n * @param {Array} previousQueryResults - an array of shipping rates and\n * info about failed calls to the APIs of some shipping methods providers\n * e.g Shippo.\n * @param {Object} cart - details about the purchase a user wants to make.\n * @return {Array} - an array that contains two arrays: the first array will\n * be an updated list of shipping rates, and the second will contain info for\n * retrying this specific package if any errors occurred while retrieving the\n * shipping rates.\n */\nfunction getShippingRates(previousQueryResults, cart) {\n  CartSchema.validate(cart);\n  const [rates, retrialTargets] = previousQueryResults;\n  const shops = [];\n  const products = cart.items;\n\n  const currentMethodInfo = {\n    packageName: \"flat-rate-shipping\",\n    fileName: \"hooks.js\"\n  };\n  if (retrialTargets.length > 0) {\n    const isNotAmongFailedRequests = retrialTargets.every((target) =>\n      target.packageName !== currentMethodInfo.packageName &&\n      target.fileName !== currentMethodInfo.fileName);\n    if (isNotAmongFailedRequests) {\n      return previousQueryResults;\n    }\n  }\n\n  // Verify that we have shipping records\n  if (!cart.shipping || !cart.shipping.length) {\n    const errorDetails = {\n      requestStatus: \"error\",\n      shippingProvider: \"flat-rate-shipping\",\n      message: \"this cart is missing shipping records\"\n    };\n    return [[errorDetails], []];\n  }\n\n  // Verify that we have a valid address to work with\n  let shippingErrorDetails;\n  if (cart.shipping.find((shippingRecord) => !shippingRecord.address)) {\n    shippingErrorDetails = {\n      requestStatus: \"error\",\n      shippingProvider: \"flat-rate-shipping\",\n      message: \"The address property on one or more shipping records are incomplete\"\n    };\n    return [[shippingErrorDetails], []];\n  }\n\n  // Validate that we have valid items to work with. We should never get here since we filter for this\n  // at the cart level\n  if (!cart.items || !cart.items.length) {\n    const errorDetails = {\n      requestStatus: \"error\",\n      shippingProvider: \"flat-rate-shipping\",\n      message: \"this cart has no items\"\n    };\n    return [[errorDetails], []];\n  }\n\n  let merchantShippingRates = false;\n  const marketplaceSettings = Reaction.getMarketplaceSettings();\n  if (marketplaceSettings && marketplaceSettings.enabled) {\n    ({ merchantShippingRates } = marketplaceSettings.public);\n  }\n\n  let pkgData;\n  if (merchantShippingRates) {\n    // TODO this needs to be rewritten to handle getting rates from each shops that's represented on the order\n    Logger.fatal(\"Multiple shipping providers is currently not supported\");\n    throw new Meteor.Error(\"not-implemented\", \"Multiple shipping providers is currently not supported\");\n  } else {\n    pkgData = Packages.findOne({\n      name: \"reaction-shipping-rates\",\n      shopId: Reaction.getPrimaryShopId()\n    });\n  }\n\n\n  if (!pkgData || !cart.items || pkgData.settings.flatRates.enabled !== true) {\n    return [rates, retrialTargets];\n  }\n\n  // default selector is primary shop\n  let selector = {\n    \"shopId\": Reaction.getPrimaryShopId(),\n    \"provider.enabled\": true\n  };\n\n  // Get rates from shops if merchantShippingRates is enabled\n  // Otherwise just get them from the primaryShop\n  if (merchantShippingRates) {\n    // create an array of shops, allowing\n    // the cart to have products from multiple shops\n    for (const product of products) {\n      if (product.shopId) {\n        shops.push(product.shopId);\n      }\n    }\n    // if we have multiple shops in cart\n    if ((shops !== null ? shops.length : undefined) > 0) {\n      selector = {\n        \"shopId\": {\n          $in: shops\n        },\n        \"provider.enabled\": true\n      };\n    }\n  }\n\n  const shippingCollection = Shipping.find(selector);\n  const initialNumOfRates = rates.length;\n  shippingCollection.forEach((doc) => {\n    const _results = [];\n    for (const method of doc.methods) {\n      if (!method.enabled) {\n        continue;\n      }\n      if (!method.rate) {\n        method.rate = 0;\n      }\n      if (!method.handling) {\n        method.handling = 0;\n      }\n      // Store shipping provider here in order to have it available in shipmentMethod\n      // for cart and order usage\n      if (!method.carrier) {\n        method.carrier = doc.provider.label;\n      }\n      const rate = method.rate + method.handling;\n      _results.push(rates.push({\n        carrier: doc.provider.label,\n        method,\n        rate,\n        shopId: doc.shopId\n      }));\n    }\n    return _results;\n  });\n\n  if (rates.length === initialNumOfRates) {\n    const errorDetails = {\n      requestStatus: \"error\",\n      shippingProvider: \"flat-rate-shipping\",\n      message: \"Flat rate shipping did not return any shipping methods.\"\n    };\n    rates.push(errorDetails);\n    retrialTargets.push(currentMethodInfo);\n    return [rates, retrialTargets];\n  }\n\n  Logger.debug(\"Flat rate onGetShippingRates\", rates);\n  return [rates, retrialTargets];\n}\n// run getShippingRates when the onGetShippingRates event runs\nHooks.Events.add(\"onGetShippingRates\", getShippingRates);\n"]},"sourceType":"script","hash":"5f443b0f5a2dd66381f188d3484fbea6ced53e25"}
