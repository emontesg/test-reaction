{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/core/accounts/client/components/addressBook.js","filename":"imports/plugins/core/accounts/client/components/addressBook.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/core/accounts/client/components/addressBook.js","plugins":["dynamicImport","classProperties","jsx","jsx","flow","asyncGenerators","objectRestSpread","objectRestSpread","flow","asyncGenerators"]},"generatorOpts":{"filename":"imports/plugins/core/accounts/client/components/addressBook.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/core/accounts/client/components/addressBook.js"}},"code":"var _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React, Component;\nmodule.watch(require(\"react\"), {\n  \"default\": function (v) {\n    React = v;\n  },\n  Component: function (v) {\n    Component = v;\n  }\n}, 0);\nvar PropTypes;\nmodule.watch(require(\"prop-types\"), {\n  \"default\": function (v) {\n    PropTypes = v;\n  }\n}, 1);\nvar Components, registerComponent;\nmodule.watch(require(\"../../../components/lib\"), {\n  Components: function (v) {\n    Components = v;\n  },\n  registerComponent: function (v) {\n    registerComponent = v;\n  }\n}, 2);\n\nvar AddressBook =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inheritsLoose2.default)(AddressBook, _Component);\n\n  function AddressBook(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n\n    _this.setEntryMode = function () {\n      _this.mode = \"entry\";\n    };\n\n    _this.switchMode = function (newMode, editAddress) {\n      _this.setState({\n        mode: newMode,\n        editAddress: editAddress\n      });\n    };\n\n    _this.onSelect = function (_id, usage) {\n      var _this$props = _this.props,\n          onError = _this$props.onError,\n          updateAddress = _this$props.updateAddress;\n\n      var address = _this.findAddress(_id);\n\n      switch (usage) {\n        case \"shipping\":\n          updateAddress(address, \"isShippingDefault\").catch(onError);\n          break;\n\n        case \"billing\":\n          updateAddress(address, \"isBillingDefault\").catch(onError);\n          break;\n\n        default:\n          return;\n      }\n    };\n\n    _this.onRemove = function (_id) {\n      var _this$props2 = _this.props,\n          onError = _this$props2.onError,\n          removeAddress = _this$props2.removeAddress;\n      removeAddress(_id).catch(onError);\n    };\n\n    _this.onAdd = function (address) {\n      var validateAddress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var _this$props3 = _this.props,\n          addAddress = _this$props3.addAddress,\n          onError = _this$props3.onError,\n          updateAddress = _this$props3.updateAddress; // if edit address is in the address book form\n\n      if (_this.hasEditAddress || address._id) {\n        var editAddress = _this.state.editAddress; // new object with editAddress _id and the param addess data\n\n        _this.clearForm();\n\n        return updateAddress((0, _objectSpread2.default)({\n          _id: editAddress._id\n        }, address), null, validateAddress).then(function (result) {\n          if (result && result.validated === false) {\n            _this.setState({\n              mode: \"review\",\n              validationResults: result\n            });\n          } else {\n            _this.setState({\n              mode: \"grid\"\n            });\n          }\n        }).catch(onError);\n      }\n\n      return addAddress(address, validateAddress).then(function (result) {\n        if (result && result.validated === false) {\n          _this.setState({\n            mode: \"review\",\n            validationResults: result\n          });\n        }\n      }).catch(onError);\n    };\n\n    _this.onCancel = function () {\n      _this.mode = \"grid\";\n\n      _this.clearForm();\n    };\n\n    _this.onEdit = function (_id) {\n      var editAddress = _this.findAddress(_id);\n\n      _this.setState({\n        editAddress: editAddress\n      });\n\n      _this.mode = \"entry\";\n    };\n\n    var mode = !props.addressBook || props.addressBook.length === 0 ? \"entry\" : \"grid\"; // initMode overrired everything\n\n    if (props.initMode) {\n      mode = props.initMode;\n    }\n\n    _this.state = {\n      // No address, enable the form\n      mode: mode,\n      // Address to be edited\n      editAddress: {},\n      // Address returned after validation check\n      validationResults: null\n    };\n    return _this;\n  }\n\n  var _proto = AddressBook.prototype;\n\n  _proto.componentWillReceiveProps = function () {\n    function componentWillReceiveProps(nextProps) {\n      var addressBook = nextProps.addressBook;\n      var mode = this.state.mode;\n      if (!Array.isArray(addressBook)) addressBook = [];\n\n      if (mode === \"review\") {\n        return;\n      } // if the new addressBook array is empty and\n      // the address book form is not active\n\n\n      if (addressBook.length === 0 && mode !== \"entry\") {\n        mode = \"entry\";\n      } // if the new addressBook array is not empty but\n      // the address book form is active\n\n\n      if (addressBook.length !== 0 && mode !== \"grid\") {\n        mode = \"grid\";\n      }\n\n      if (!this.props.initMode && nextProps.initMode) {\n        mode = nextProps.initMode;\n      }\n\n      this.mode = mode;\n    }\n\n    return componentWillReceiveProps;\n  }(); // State change helpers\n\n  /**\n   * @method mode\n   * @summary setter for mode in state\n   * @since 2.0.0\n   * @param {String} mode - the mode to be set.\n   */\n\n\n  // Address Book helpers\n\n  /**\n   * @method findAddress\n   * @summary using the provided _id finds an address object from the addressBook array.\n   * @since 2.0.0\n   * @param {String} _id - address object _id.\n   * @return {Object} - address object.\n   */\n  _proto.findAddress = function () {\n    function findAddress(_id) {\n      var addressBook = this.addressBook;\n      return addressBook.find(function (addy) {\n        return addy._id === _id;\n      });\n    }\n\n    return findAddress;\n  }();\n  /**\n   * @method clearForm\n   * @summary removes the editAddress from state this will clear the address book form.\n   * @since 2.0.0\n   */\n\n\n  _proto.clearForm = function () {\n    function clearForm() {\n      if (this.hasEditAddress) this.setState({\n        editAddress: {}\n      });\n    }\n\n    return clearForm;\n  }();\n  /**\n   * @method addressBook\n   * @summary getter that returns the addressBook array if avalible on the props or an empty array.\n   * @since 2.0.0\n   * @return {Array} addressBook - array of address object or an empty array.\n   */\n\n\n  // Address Book JSX\n\n  /**\n   * @method renderCheckoutIcon\n   * @summary renders address book heading checkout step icon when\n   * the address book is being called from checkout\n   * @since 2.0.0\n   * @return {Object} - JSX\n   */\n  _proto.renderCheckoutIcon = function () {\n    function renderCheckoutIcon() {\n      var _props$heading$checko = this.props.heading.checkout,\n          icon = _props$heading$checko.icon,\n          position = _props$heading$checko.position;\n      return React.createElement(\"i\", {\n        className: \"checkout-step-badge \" + icon\n      }, position);\n    }\n\n    return renderCheckoutIcon;\n  }();\n  /**\n   * @method renderHeading\n   * @summary renders address book heading content, this content will change\n   * based on where in the app this component is being used\n   * @since 2.0.0\n   * @return {Object} - JSX\n   */\n\n\n  _proto.renderHeading = function () {\n    function renderHeading() {\n      var heading = this.props.heading;\n      return React.createElement(\"div\", {\n        className: \"panel-heading\"\n      }, heading.checkout ? this.renderCheckoutIcon() : \"\", React.createElement(\"h2\", {\n        className: \"panel-title\"\n      }, React.createElement(Components.Translation, heading)));\n    }\n\n    return renderHeading;\n  }();\n  /**\n   * @method renderControlBar\n   * @summary renders adding or editing address message if the form is showing\n   * renders an add address button if the grid is showiing.\n   * @since 2.0.0\n   * @return {Object} - JSX\n   */\n\n\n  _proto.renderControlBar = function () {\n    function renderControlBar() {\n      var mode = this.state.mode;\n      var controlBarContent;\n\n      if (mode === \"entry\" && !this.hasEditAddress) {\n        // active form with no edit address\n        var translationContent;\n\n        if (this.hasAddress) {\n          // has address in addressBook array, adding a new entry\n          translationContent = {\n            defaultValue: \"Add a new address entry\",\n            i18nKey: \"addressBookAdd.addAddress\"\n          };\n        } else {\n          // first address to be created is default address\n          translationContent = {\n            defaultValue: \"Create your default address\",\n            i18nKey: \"addressBookAdd.createAddress\"\n          };\n        }\n\n        controlBarContent = React.createElement(Components.Translation, translationContent);\n      } else if (mode === \"entry\" && this.hasEditAddress) {\n        // active form with an edit address\n        // show editing address message\n        controlBarContent = React.createElement(Components.Translation, {\n          defaultValue: \"Editing this address entry\",\n          i18nKey: \"addressBookEdit.editAddress\"\n        });\n      } else if (mode === \"grid\") {\n        controlBarContent = React.createElement(\"button\", {\n          className: \"btn btn-default\",\n          onClick: this.setEntryMode\n        }, React.createElement(\"i\", {\n          className: \"fa fa-plus fa-lg address-icons\"\n        }), React.createElement(Components.Translation, {\n          defaultValue: \"Add Address\",\n          i18nKey: \"addressBookGrid.addAddress\"\n        }));\n      } else if (mode === \"review\") {\n        controlBarContent = React.createElement(Components.Translation, {\n          defaultValue: \"Review address\",\n          i18nKey: \"addressBookEdit.reviewAddress\"\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"panel-control-bar\"\n      }, controlBarContent);\n    }\n\n    return renderControlBar;\n  }();\n  /**\n   * @method renderContent\n   * @summary renders the AddressBookForm, AddressBookGrid, AddressBookReview components\n   * based on mode.\n   * @since 2.0.0\n   * @return {Object} - JSX and child component.\n   */\n\n\n  _proto.renderContent = function () {\n    function renderContent() {\n      var addressBook = this.addressBook;\n      var _props = this.props,\n          countries = _props.countries,\n          regionsByCountry = _props.regionsByCountry,\n          markCart = _props.markCart;\n      var _state = this.state,\n          editAddress = _state.editAddress,\n          mode = _state.mode;\n      var content;\n\n      if (mode === \"entry\") {\n        content = React.createElement(Components.AddressBookForm, {\n          add: this.onAdd,\n          cancel: this.onCancel,\n          countries: countries,\n          editAddress: editAddress,\n          hasAddress: this.hasAddress,\n          regionsByCountry: regionsByCountry\n        });\n      } else if (mode === \"grid\") {\n        content = React.createElement(Components.AddressBookGrid, {\n          addressBook: addressBook,\n          edit: this.onEdit,\n          remove: this.onRemove,\n          select: this.onSelect\n        });\n      } else {\n        content = React.createElement(Components.AddressBookReview, {\n          addressBook: addressBook,\n          add: this.onAdd,\n          validationResults: this.state.validationResults,\n          switchMode: this.switchMode,\n          markCart: markCart\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"panel-body panel-content\"\n      }, content);\n    }\n\n    return renderContent;\n  }();\n\n  _proto.render = function () {\n    function render() {\n      return React.createElement(\"div\", {\n        className: \"panel panel-default panel-address-book\"\n      }, this.renderHeading(), React.createElement(\"div\", {\n        className: \"address-book\"\n      }, this.renderControlBar(), this.renderContent()));\n    }\n\n    return render;\n  }();\n\n  (0, _createClass2.default)(AddressBook, [{\n    key: \"mode\",\n    set: function (mode) {\n      this.setState({\n        mode: mode\n      });\n    }\n    /**\n     * @method setEntryMode\n     * @summary changes the mode to \"entry\"\n     * @since 2.0.0\n     */\n\n  }, {\n    key: \"addressBook\",\n    get: function () {\n      var addressBook = this.props.addressBook;\n      if (!Array.isArray(addressBook)) addressBook = [];\n      return addressBook;\n    }\n    /**\n     * @method hasEditaddress\n     * @summary getter that returns true if there is an editAddress in state.\n     * @since 2.0.0\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"hasEditAddress\",\n    get: function () {\n      var editAddress = this.state.editAddress;\n      return Object.keys(editAddress).length !== 0;\n    }\n    /**\n     * @method hasAddress\n     * @summary getter that returns true if there is at least 1 address in the addressBook array.\n     * @since 2.0.0\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"hasAddress\",\n    get: function () {\n      var addressBook = this.addressBook;\n      return addressBook && addressBook.length !== 0;\n    } // Address Actions\n\n    /**\n     * @method onSelect\n     * @summary updating an address if it's been selected as the default shipping or billing address.\n     * @since 2.0.0\n     * @param {String} _id - address object _id.\n     * @param {String} usage - the address usage \"shipping\" or \"billing\".\n     */\n\n  }]);\n  return AddressBook;\n}(Component);\n\nAddressBook.propTypes = {\n  // Add address reducer calls meteor method\n  addAddress: PropTypes.func,\n  // array of address objects\n  addressBook: PropTypes.arrayOf(PropTypes.shape({\n    _id: PropTypes.string,\n    fullName: PropTypes.string,\n    address1: PropTypes.string,\n    address2: PropTypes.string,\n    postal: PropTypes.string,\n    city: PropTypes.string,\n    region: PropTypes.string,\n    country: PropTypes.string,\n    phone: PropTypes.string,\n    isBillingDefault: PropTypes.bool,\n    isShippingDefault: PropTypes.bool,\n    isCommercal: PropTypes.bool\n  })),\n  // country options for select\n  countries: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string,\n    value: PropTypes.string\n  })),\n  //  Heading content for address book\n  heading: PropTypes.shape({\n    // Heading title\n    defaultValue: PropTypes.string,\n    // i18nKey for heading title\n    i18nKey: PropTypes.string,\n    // If in checkout view, addressbook checkout step position and icon className\n    checkout: PropTypes.shape({\n      icon: PropTypes.string,\n      position: PropTypes.Number\n    })\n  }),\n  // the initial mode of the AddressBook(used only in constructor)\n  initMode: PropTypes.oneOf([\"grid\", \"entry\", \"review\"]),\n  // function to mark tax calculation on cart.\n  markCart: PropTypes.func,\n  // handles error by calling Alerts.toast with the error meesage\n  onError: PropTypes.func,\n  // regions by county\n  regionsByCountry: PropTypes.object,\n  // Remove address reducer calls meteor method\n  removeAddress: PropTypes.func,\n  // Update address reducer calls meteor method\n  updateAddress: PropTypes.func\n};\nAddressBook.defaultProps = {\n  addAddress: function () {},\n  removeAddress: function () {},\n  updateAddress: function () {},\n  onError: function () {}\n};\nregisterComponent(\"AddressBook\", AddressBook);\nmodule.exportDefault(AddressBook);","map":{"version":3,"sources":["imports/plugins/core/accounts/client/components/addressBook.js"],"names":["React","Component","module","watch","require","v","PropTypes","Components","registerComponent","AddressBook","props","setEntryMode","mode","switchMode","newMode","editAddress","setState","onSelect","_id","usage","onError","updateAddress","address","findAddress","catch","onRemove","removeAddress","onAdd","validateAddress","addAddress","hasEditAddress","state","clearForm","then","result","validated","validationResults","onCancel","onEdit","addressBook","length","initMode","componentWillReceiveProps","nextProps","Array","isArray","find","addy","renderCheckoutIcon","heading","checkout","icon","position","renderHeading","renderControlBar","controlBarContent","translationContent","hasAddress","defaultValue","i18nKey","renderContent","countries","regionsByCountry","markCart","content","render","Object","keys","propTypes","func","arrayOf","shape","string","fullName","address1","address2","postal","city","region","country","phone","isBillingDefault","bool","isShippingDefault","isCommercal","label","value","Number","oneOf","object","defaultProps","exportDefault"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Components, registerComponent } from \"@reactioncommerce/reaction-components\";\n\nclass AddressBook extends Component {\n  static propTypes = {\n    // Add address reducer calls meteor method\n    addAddress: PropTypes.func,\n    // array of address objects\n    addressBook: PropTypes.arrayOf(PropTypes.shape({\n      _id: PropTypes.string,\n      fullName: PropTypes.string,\n      address1: PropTypes.string,\n      address2: PropTypes.string,\n      postal: PropTypes.string,\n      city: PropTypes.string,\n      region: PropTypes.string,\n      country: PropTypes.string,\n      phone: PropTypes.string,\n      isBillingDefault: PropTypes.bool,\n      isShippingDefault: PropTypes.bool,\n      isCommercal: PropTypes.bool\n    })),\n    // country options for select\n    countries: PropTypes.arrayOf(PropTypes.shape({\n      label: PropTypes.string,\n      value: PropTypes.string\n    })),\n    //  Heading content for address book\n    heading: PropTypes.shape({\n      // Heading title\n      defaultValue: PropTypes.string,\n      // i18nKey for heading title\n      i18nKey: PropTypes.string,\n      // If in checkout view, addressbook checkout step position and icon className\n      checkout: PropTypes.shape({\n        icon: PropTypes.string,\n        position: PropTypes.Number\n      })\n    }),\n    // the initial mode of the AddressBook(used only in constructor)\n    initMode: PropTypes.oneOf([\"grid\", \"entry\", \"review\"]),\n    // function to mark tax calculation on cart.\n    markCart: PropTypes.func,\n    // handles error by calling Alerts.toast with the error meesage\n    onError: PropTypes.func,\n    // regions by county\n    regionsByCountry: PropTypes.object,\n    // Remove address reducer calls meteor method\n    removeAddress: PropTypes.func,\n    // Update address reducer calls meteor method\n    updateAddress: PropTypes.func\n  }\n\n  static defaultProps = {\n    addAddress() {},\n    removeAddress() {},\n    updateAddress() {},\n    onError() {}\n  }\n\n  constructor(props) {\n    super(props);\n\n    let mode = (!props.addressBook || props.addressBook.length === 0) ? \"entry\" : \"grid\";\n    // initMode overrired everything\n    if (props.initMode) {\n      mode = props.initMode;\n    }\n\n    this.state = {\n      // No address, enable the form\n      mode,\n      // Address to be edited\n      editAddress: {},\n      // Address returned after validation check\n      validationResults: null\n    };\n  }\n\n\n  componentWillReceiveProps(nextProps) {\n    let { addressBook } = nextProps;\n    let { mode } = this.state;\n    if (!Array.isArray(addressBook)) addressBook = [];\n\n    if (mode === \"review\") {\n      return;\n    }\n\n    // if the new addressBook array is empty and\n    // the address book form is not active\n    if (addressBook.length === 0 && mode !== \"entry\") {\n      mode = \"entry\";\n    }\n\n    // if the new addressBook array is not empty but\n    // the address book form is active\n    if (addressBook.length !== 0 && mode !== \"grid\") {\n      mode = \"grid\";\n    }\n\n    if (!this.props.initMode && nextProps.initMode) {\n      mode = nextProps.initMode;\n    }\n\n    this.mode = mode;\n  }\n\n  // State change helpers\n\n  /**\n   * @method mode\n   * @summary setter for mode in state\n   * @since 2.0.0\n   * @param {String} mode - the mode to be set.\n   */\n  set mode(mode) {\n    this.setState({\n      mode\n    });\n  }\n\n  /**\n   * @method setEntryMode\n   * @summary changes the mode to \"entry\"\n   * @since 2.0.0\n   */\n  setEntryMode = () => {\n    this.mode = \"entry\";\n  }\n\n  /**\n   * @method switchMode\n   * @summary changes the address to newMode and editAddress to the value passed.\n   * @since 2.0.0\n   * @param {String} newMode - new mode to be set\n   * @param {String} editAddress - the address to be set for the form.\n   * @return {Object} - address object.\n   */\n  switchMode = (newMode, editAddress) => {\n    this.setState({\n      mode: newMode,\n      editAddress\n    });\n  }\n\n  // Address Book helpers\n\n  /**\n   * @method findAddress\n   * @summary using the provided _id finds an address object from the addressBook array.\n   * @since 2.0.0\n   * @param {String} _id - address object _id.\n   * @return {Object} - address object.\n   */\n  findAddress(_id) {\n    const { addressBook } = this;\n    return addressBook.find((addy) => addy._id === _id);\n  }\n\n  /**\n   * @method clearForm\n   * @summary removes the editAddress from state this will clear the address book form.\n   * @since 2.0.0\n   */\n  clearForm() {\n    if (this.hasEditAddress) this.setState({ editAddress: {} });\n  }\n\n  /**\n   * @method addressBook\n   * @summary getter that returns the addressBook array if avalible on the props or an empty array.\n   * @since 2.0.0\n   * @return {Array} addressBook - array of address object or an empty array.\n   */\n  get addressBook() {\n    let { addressBook } = this.props;\n    if (!Array.isArray(addressBook)) addressBook = [];\n    return addressBook;\n  }\n\n  /**\n   * @method hasEditaddress\n   * @summary getter that returns true if there is an editAddress in state.\n   * @since 2.0.0\n   * @return {Boolean}\n   */\n  get hasEditAddress() {\n    const { editAddress } = this.state;\n    return (Object.keys(editAddress).length !== 0);\n  }\n\n  /**\n   * @method hasAddress\n   * @summary getter that returns true if there is at least 1 address in the addressBook array.\n   * @since 2.0.0\n   * @return {Boolean}\n   */\n  get hasAddress() {\n    const { addressBook } = this;\n    return (addressBook && addressBook.length !== 0);\n  }\n\n  // Address Actions\n\n  /**\n   * @method onSelect\n   * @summary updating an address if it's been selected as the default shipping or billing address.\n   * @since 2.0.0\n   * @param {String} _id - address object _id.\n   * @param {String} usage - the address usage \"shipping\" or \"billing\".\n   */\n  onSelect = (_id, usage) => {\n    const { onError, updateAddress } = this.props;\n    const address = this.findAddress(_id);\n    switch (usage) {\n      case \"shipping\":\n        updateAddress(address, \"isShippingDefault\").catch(onError);\n        break;\n      case \"billing\":\n        updateAddress(address, \"isBillingDefault\").catch(onError);\n        break;\n      default:\n        return;\n    }\n  }\n\n  /**\n   * @method onRemove\n   * @summary using the provided _id to call the removeAddress reducer that removes an address.\n   * @since 2.0.0\n   * @param {String} _id - address object _id.\n   */\n  onRemove = (_id) => {\n    const { onError, removeAddress } = this.props;\n    removeAddress(_id).catch(onError);\n  }\n\n  /**\n   * @method onAdd\n   * @summary adds or updates an address in the addressBook.\n   * @since 2.0.0\n   * @param {Object} address - new or updated address object.\n   */\n  onAdd = (address, validateAddress = true) => {\n    const { addAddress, onError, updateAddress } = this.props;\n    // if edit address is in the address book form\n    if (this.hasEditAddress || address._id) {\n      const { editAddress } = this.state;\n      // new object with editAddress _id and the param addess data\n      this.clearForm();\n      return updateAddress({ _id: editAddress._id, ...address }, null, validateAddress)\n        .then((result) => {\n          if (result && result.validated === false) {\n            this.setState({\n              mode: \"review\",\n              validationResults: result\n            });\n          } else {\n            this.setState({\n              mode: \"grid\"\n            });\n          }\n        })\n        .catch(onError);\n    }\n    return addAddress(address, validateAddress)\n      .then((result) => {\n        if (result && result.validated === false) {\n          this.setState({\n            mode: \"review\",\n            validationResults: result\n          });\n        }\n      })\n      .catch(onError);\n  }\n\n  // Address Book Actions\n\n  /**\n   * @method onCancel\n   * @summary sets mode to \"grid\" and clears the address book form.\n   * this will only be called from the address book form.\n   * @since 2.0.0\n   */\n  onCancel = () => {\n    this.mode = \"grid\";\n    this.clearForm();\n  }\n\n  /**\n   * @method onEdit\n   * @summary sets the address to be edited and makes the mode as \"entry\".\n   * this will only be called form the address book grid.\n   * @since 2.0.0\n   */\n  onEdit = (_id) => {\n    const editAddress = this.findAddress(_id);\n    this.setState({ editAddress });\n    this.mode = \"entry\";\n  }\n\n  // Address Book JSX\n\n  /**\n   * @method renderCheckoutIcon\n   * @summary renders address book heading checkout step icon when\n   * the address book is being called from checkout\n   * @since 2.0.0\n   * @return {Object} - JSX\n   */\n  renderCheckoutIcon() {\n    const { checkout: { icon, position } } = this.props.heading;\n    return <i className={`checkout-step-badge ${icon}`} >{position}</i>;\n  }\n\n  /**\n   * @method renderHeading\n   * @summary renders address book heading content, this content will change\n   * based on where in the app this component is being used\n   * @since 2.0.0\n   * @return {Object} - JSX\n   */\n  renderHeading() {\n    const { heading } = this.props;\n    return (\n      <div className=\"panel-heading\">\n        {heading.checkout ? this.renderCheckoutIcon() : \"\"}\n        <h2 className=\"panel-title\">\n          <Components.Translation {...heading} />\n        </h2>\n      </div>\n    );\n  }\n\n  /**\n   * @method renderControlBar\n   * @summary renders adding or editing address message if the form is showing\n   * renders an add address button if the grid is showiing.\n   * @since 2.0.0\n   * @return {Object} - JSX\n   */\n  renderControlBar() {\n    const { mode } = this.state;\n\n    let controlBarContent;\n    if (mode === \"entry\" && !this.hasEditAddress) {\n      // active form with no edit address\n      let translationContent;\n      if (this.hasAddress) {\n        // has address in addressBook array, adding a new entry\n        translationContent = { defaultValue: \"Add a new address entry\", i18nKey: \"addressBookAdd.addAddress\" };\n      } else {\n        // first address to be created is default address\n        translationContent = { defaultValue: \"Create your default address\", i18nKey: \"addressBookAdd.createAddress\" };\n      }\n\n      controlBarContent = (\n        <Components.Translation {...translationContent} />\n      );\n    } else if (mode === \"entry\" && this.hasEditAddress) {\n      // active form with an edit address\n      // show editing address message\n      controlBarContent = (\n        <Components.Translation defaultValue=\"Editing this address entry\" i18nKey=\"addressBookEdit.editAddress\" />\n      );\n    } else if (mode === \"grid\") {\n      controlBarContent = (\n        <button className=\"btn btn-default\" onClick={this.setEntryMode}>\n          <i className=\"fa fa-plus fa-lg address-icons\" />\n          <Components.Translation defaultValue=\"Add Address\" i18nKey=\"addressBookGrid.addAddress\"/>\n        </button>\n      );\n    } else if (mode === \"review\") {\n      controlBarContent = (\n        <Components.Translation defaultValue=\"Review address\" i18nKey=\"addressBookEdit.reviewAddress\" />\n      );\n    }\n\n    return (\n      <div className=\"panel-control-bar\">\n        {controlBarContent}\n      </div>\n    );\n  }\n\n  /**\n   * @method renderContent\n   * @summary renders the AddressBookForm, AddressBookGrid, AddressBookReview components\n   * based on mode.\n   * @since 2.0.0\n   * @return {Object} - JSX and child component.\n   */\n  renderContent() {\n    const { addressBook } = this;\n    const { countries, regionsByCountry, markCart } = this.props;\n    const { editAddress, mode } = this.state;\n\n    let content;\n    if (mode === \"entry\") {\n      content = (\n        <Components.AddressBookForm\n          add={this.onAdd}\n          cancel={this.onCancel}\n          countries={countries}\n          editAddress={editAddress}\n          hasAddress={this.hasAddress}\n          regionsByCountry={regionsByCountry}\n        />\n      );\n    } else if (mode === \"grid\") {\n      content = (\n        <Components.AddressBookGrid\n          addressBook={addressBook}\n          edit={this.onEdit}\n          remove={this.onRemove}\n          select={this.onSelect}\n        />\n      );\n    } else {\n      content = (\n        <Components.AddressBookReview\n          addressBook={addressBook}\n          add={this.onAdd}\n          validationResults={this.state.validationResults}\n          switchMode={this.switchMode}\n          markCart={markCart}\n        />\n      );\n    }\n\n    return (\n      <div className=\"panel-body panel-content\">\n        {content}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"panel panel-default panel-address-book\">\n        {this.renderHeading()}\n        <div className=\"address-book\">\n          {this.renderControlBar()}\n          {this.renderContent()}\n        </div>\n      </div>\n    );\n  }\n}\n\nregisterComponent(\"AddressBook\", AddressBook);\n\nexport default AddressBook;\n"]},"sourceType":"script","hash":"9aaf90f39f23d77908cfe179ce340a79a7553d02"}
