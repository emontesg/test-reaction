{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"server/methods/core/hooks/cart.js","filename":"server/methods/core/hooks/cart.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"server/methods/core/hooks/cart.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"server/methods/core/hooks/cart.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/methods/core/hooks/cart.js"}},"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Cart;\nmodule.watch(require(\"../../../../lib/collections\"), {\n  Cart(v) {\n    Cart = v;\n  }\n\n}, 1);\nlet Logger, MethodHooks;\nmodule.watch(require(\"../../../api\"), {\n  Logger(v) {\n    Logger = v;\n  },\n\n  MethodHooks(v) {\n    MethodHooks = v;\n  }\n\n}, 2);\nmodule.watch(require(\"../cart\"));\n// // Meteor.after to call after\nMethodHooks.after(\"cart/submitPayment\", options => {\n  // TODO: REVIEW WITH AARON - this is too late to fail. We need to copy cart to order either way at this point\n  // if cart/submit had an error we won't copy cart to Order\n  // and we'll throw an error.\n  Logger.debug(\"MethodHooks after cart/submitPayment\", options); // Default return value is the return value of previous call in method chain\n  // or an empty object if there's no result yet.\n\n  const result = options.result || {};\n\n  if (typeof options.error === \"undefined\") {\n    const cart = Cart.findOne({\n      userId: Meteor.userId()\n    }); // update workflow\n\n    Meteor.call(\"workflow/pushCartWorkflow\", \"coreCartWorkflow\", \"paymentSubmitted\"); // create order\n\n    if (cart) {\n      if (!cart.billing) {\n        Logger.debug(\"MethodHooks after cart/submitPayment. No billing address after payment! userId:\", Meteor.userId(), \"options:\", options);\n      }\n\n      if (cart.items && cart.billing && cart.billing[0].paymentMethod) {\n        const orderId = Meteor.call(\"cart/copyCartToOrder\", cart._id); // Return orderId as result from this after hook call.\n        // This is done by extending the existing result.\n\n        result.orderId = orderId;\n      } else {\n        throw new Meteor.Error(\"server-error\", \"An error occurred verifing payment method. Failed to save order.\");\n      }\n    }\n  } else {\n    throw new Meteor.Error(\"Error after submitting payment\", options.error);\n  }\n\n  return result;\n});","map":{"version":3,"sources":["server/methods/core/hooks/cart.js"],"names":["Meteor","module","watch","require","v","Cart","Logger","MethodHooks","after","options","debug","result","error","cart","findOne","userId","call","billing","items","paymentMethod","orderId","_id","Error"],"mappings":"AAAA,IAAIA,MAAJ;AAAWC,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACH,SAAOI,CAAP,EAAS;AAACJ,aAAOI,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIC,IAAJ;AAASJ,OAAOC,KAAP,CAAaC,QAAQ,6BAAR,CAAb,EAAoD;AAACE,OAAKD,CAAL,EAAO;AAACC,WAAKD,CAAL;AAAO;;AAAhB,CAApD,EAAsE,CAAtE;AAAyE,IAAIE,MAAJ,EAAWC,WAAX;AAAuBN,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACG,SAAOF,CAAP,EAAS;AAACE,aAAOF,CAAP;AAAS,GAApB;;AAAqBG,cAAYH,CAAZ,EAAc;AAACG,kBAAYH,CAAZ;AAAc;;AAAlD,CAArC,EAAyF,CAAzF;AAA4FH,OAAOC,KAAP,CAAaC,QAAQ,SAAR,CAAb;AAM/Q;AACAI,YAAYC,KAAZ,CAAkB,oBAAlB,EAAyCC,OAAD,IAAa;AACnD;AACA;AACA;AACAH,SAAOI,KAAP,CAAa,sCAAb,EAAqDD,OAArD,EAJmD,CAKnD;AACA;;AACA,QAAME,SAASF,QAAQE,MAAR,IAAkB,EAAjC;;AACA,MAAI,OAAOF,QAAQG,KAAf,KAAyB,WAA7B,EAA0C;AACxC,UAAMC,OAAOR,KAAKS,OAAL,CAAa;AACxBC,cAAQf,OAAOe,MAAP;AADgB,KAAb,CAAb,CADwC,CAKxC;;AACAf,WAAOgB,IAAP,CAAY,2BAAZ,EAAyC,kBAAzC,EAA6D,kBAA7D,EANwC,CAQxC;;AACA,QAAIH,IAAJ,EAAU;AACR,UAAI,CAACA,KAAKI,OAAV,EAAmB;AACjBX,eAAOI,KAAP,CAAa,iFAAb,EAAgGV,OAAOe,MAAP,EAAhG,EAAiH,UAAjH,EAA6HN,OAA7H;AACD;;AAED,UAAII,KAAKK,KAAL,IAAcL,KAAKI,OAAnB,IAA8BJ,KAAKI,OAAL,CAAa,CAAb,EAAgBE,aAAlD,EAAiE;AAC/D,cAAMC,UAAUpB,OAAOgB,IAAP,CAAY,sBAAZ,EAAoCH,KAAKQ,GAAzC,CAAhB,CAD+D,CAE/D;AACA;;AACAV,eAAOS,OAAP,GAAiBA,OAAjB;AACD,OALD,MAKO;AACL,cAAM,IAAIpB,OAAOsB,KAAX,CACJ,cADI,EAEJ,kEAFI,CAAN;AAID;AACF;AACF,GA1BD,MA0BO;AACL,UAAM,IAAItB,OAAOsB,KAAX,CAAiB,gCAAjB,EAAmDb,QAAQG,KAA3D,CAAN;AACD;;AACD,SAAOD,MAAP;AACD,CAtCD","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Cart } from \"/lib/collections\";\nimport { Logger, MethodHooks } from \"/server/api\";\n// this needed to keep correct loading order. Methods should be loaded before hooks\nimport \"../cart\";\n\n// // Meteor.after to call after\nMethodHooks.after(\"cart/submitPayment\", (options) => {\n  // TODO: REVIEW WITH AARON - this is too late to fail. We need to copy cart to order either way at this point\n  // if cart/submit had an error we won't copy cart to Order\n  // and we'll throw an error.\n  Logger.debug(\"MethodHooks after cart/submitPayment\", options);\n  // Default return value is the return value of previous call in method chain\n  // or an empty object if there's no result yet.\n  const result = options.result || {};\n  if (typeof options.error === \"undefined\") {\n    const cart = Cart.findOne({\n      userId: Meteor.userId()\n    });\n\n    // update workflow\n    Meteor.call(\"workflow/pushCartWorkflow\", \"coreCartWorkflow\", \"paymentSubmitted\");\n\n    // create order\n    if (cart) {\n      if (!cart.billing) {\n        Logger.debug(\"MethodHooks after cart/submitPayment. No billing address after payment! userId:\", Meteor.userId(), \"options:\", options);\n      }\n\n      if (cart.items && cart.billing && cart.billing[0].paymentMethod) {\n        const orderId = Meteor.call(\"cart/copyCartToOrder\", cart._id);\n        // Return orderId as result from this after hook call.\n        // This is done by extending the existing result.\n        result.orderId = orderId;\n      } else {\n        throw new Meteor.Error(\n          \"server-error\",\n          \"An error occurred verifing payment method. Failed to save order.\"\n        );\n      }\n    }\n  } else {\n    throw new Meteor.Error(\"Error after submitting payment\", options.error);\n  }\n  return result;\n});\n"]},"sourceType":"script","hash":"250d229d5f1009cedc7082b2b881f65327b3009a"}
