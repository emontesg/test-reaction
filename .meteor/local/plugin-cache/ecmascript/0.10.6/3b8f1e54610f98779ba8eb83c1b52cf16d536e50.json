{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/core/ui/client/components/table/sortableTable.js","filename":"imports/plugins/core/ui/client/components/table/sortableTable.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/core/ui/client/components/table/sortableTable.js","plugins":["dynamicImport","classProperties","jsx","jsx","flow","asyncGenerators","objectRestSpread","objectRestSpread","flow","asyncGenerators"]},"generatorOpts":{"filename":"imports/plugins/core/ui/client/components/table/sortableTable.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/core/ui/client/components/table/sortableTable.js"}},"code":"var _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar module1 = module;\nvar React, Component;\nmodule1.watch(require(\"react\"), {\n  \"default\": function (v) {\n    React = v;\n  },\n  Component: function (v) {\n    Component = v;\n  }\n}, 0);\nvar PropTypes;\nmodule1.watch(require(\"prop-types\"), {\n  \"default\": function (v) {\n    PropTypes = v;\n  }\n}, 1);\nvar matchSorter;\nmodule1.watch(require(\"match-sorter\"), {\n  \"default\": function (v) {\n    matchSorter = v;\n  }\n}, 2);\nvar ReactTable;\nmodule1.watch(require(\"react-table\"), {\n  \"default\": function (v) {\n    ReactTable = v;\n  }\n}, 3);\nvar Meteor;\nmodule1.watch(require(\"meteor/meteor\"), {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 4);\nvar Counts;\nmodule1.watch(require(\"meteor/tmeasday:publish-counts\"), {\n  Counts: function (v) {\n    Counts = v;\n  }\n}, 5);\nvar registerComponent;\nmodule1.watch(require(\"../../../../components/lib\"), {\n  registerComponent: function (v) {\n    registerComponent = v;\n  }\n}, 6);\nvar SortableTableFilter, SortableTablePagination;\nmodule1.watch(require(\"./sortableTableComponents\"), {\n  SortableTableFilter: function (v) {\n    SortableTableFilter = v;\n  },\n  SortableTablePagination: function (v) {\n    SortableTablePagination = v;\n  }\n}, 7);\n\n/**\n * @file SortableTable is a React Component wrapper around {@link https://react-table.js.org} ReactTable.\n * Any functionality from ReactTable should be available in SortableTable out of the box, but may require styling.\n * For more, see {@link https://react-table.js.org/#/story/readme ReactTable docs}\n *\n * @module SortableTable\n * @extends Component\n */\nvar SortableTable =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inheritsLoose2.default)(SortableTable, _Component);\n\n  function SortableTable(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n\n    _this.customFilter = function (filter, row) {\n      var id = filter.pivotId || filter.id;\n\n      if (row[id] !== null && typeof row[id] === \"string\") {\n        return row[id] !== undefined ? String(row[id].toLowerCase()).includes(filter.value.toLowerCase()) : true;\n      }\n    };\n\n    _this.handleFilterInput = function (event, value, field) {\n      var _this$setState;\n\n      _this.setState((_this$setState = {}, _this$setState[field] = value, _this$setState));\n    };\n\n    _this.renderPaginationBottom = function () {\n      if (_this.getTableData() === 0) {\n        return false;\n      }\n\n      return true;\n    };\n\n    _this.setMinRows = function () {\n      if (_this.getTableData() === 0) {\n        return 3;\n      }\n\n      return 0;\n    };\n\n    _this.state = {\n      currentPage: 0,\n      filterInput: \"\",\n      maxPages: 0,\n      query: props.query || {}\n    };\n    _this.handleFilterInput = _this.handleFilterInput.bind((0, _assertThisInitialized2.default)(_this));\n    return _this;\n  }\n\n  var _proto = SortableTable.prototype;\n\n  _proto.componentWillReceiveProps = function () {\n    function componentWillReceiveProps(nextProps) {\n      if (nextProps.query !== this.props.query) {\n        this.setState({\n          query: nextProps.query\n        });\n      }\n    }\n\n    return componentWillReceiveProps;\n  }();\n  /**\n   * @name getMeteorData()\n   * @method\n   * @summary Absorb publication / collection information from props, output data from subscription.\n   * Use props to get collection, use that information to call Meteor to get subscription and output data for table.\n   * @prop {String} matchingResultsCount - Send to Counts collection to get results count of sub\n   * @prop {String} publication - publication to subscribe to\n   * @prop {Object} collection - collection to get data from\n   * @returns {Object} loading status (bool), results (object), and matchingResults (number)\n   */\n\n\n  _proto.getMeteorData = function () {\n    function getMeteorData() {\n      var _props = this.props,\n          collection = _props.collection,\n          matchingResultsCount = _props.matchingResultsCount,\n          publication = _props.publication; // Get a count of the number of items matching the current filter.\n      // If no filter is set it will return the total number of items in the collection.\n\n      var matchingResults = Counts.get(matchingResultsCount);\n      var options = {};\n      var pubHandle = Meteor.subscribe(publication, this.state.query, Object.assign({}, options)); // optional transform of collection for grid results\n\n      var results = collection.find(this.state.query, options).fetch();\n\n      if (this.props.transform) {\n        results = this.props.transform(results);\n      }\n\n      return {\n        loading: !pubHandle.ready(),\n        results: results,\n        matchingResults: matchingResults\n      };\n    }\n\n    return getMeteorData;\n  }();\n  /**\n   * @name customFilter()\n   * @method\n   * @summary Replace default filter with customized filter, custom filter is case insensitive\n   * custom filter searches entire string, not just from string start\n   * @param {Object} filter user-typed data\n   * @param {Object} row row info for associated filter\n   * @returns {String|Boolean} replacement filter\n   */\n\n\n  /**\n   * @name handleClick()\n   * @summary Handle click on table row\n   * @param {object} rowInfo row data passed in from ReactTable\n   * @return {function} return onRowClick function prop, or undefined if not supplied\n   */\n  _proto.handleClick = function () {\n    function handleClick(rowInfo) {\n      var onRowClick = this.props.onRowClick;\n\n      if (typeof onRowClick === \"function\") {\n        return onRowClick({\n          className: \"sortable-table-row\",\n          props: {\n            data: {\n              _id: rowInfo.original._id,\n              type: rowInfo.original.type\n            }\n          }\n        });\n      }\n    }\n\n    return handleClick;\n  }();\n  /**\n   * @name renderColumns()\n   * @method\n   * @summary Absorb columnMetadata information from props, output columns to display\n   * @prop {String} columnMetadata - Object of data field, column header\n   * @returns {Object} data filed (string), translated header (string), and minWidth (number / undefined)\n   */\n\n\n  _proto.renderColumns = function () {\n    function renderColumns() {\n      var columnMetadata = this.props.columnMetadata; // Add minWidth = undefined to override 100px default set by ReactTable\n\n      var displayColumns = columnMetadata.map(function (element) {\n        return Object.assign({}, element, {\n          minWidth: undefined\n        });\n      });\n      return displayColumns;\n    }\n\n    return renderColumns;\n  }();\n  /**\n   * @name renderData()\n   * @method\n   * @summary Take data from getMeteorData() and filter if needed, or spit out raw if no filter\n   * @returns {Object} data filed (string), translated header (string), and minWidth (number / undefined)\n   */\n\n\n  _proto.renderData = function () {\n    function renderData() {\n      var _props2 = this.props,\n          filteredFields = _props2.filteredFields,\n          filterType = _props2.filterType;\n      var filterInput = this.state.filterInput;\n      var originalData = [];\n\n      if (this.getMeteorData().results) {\n        originalData = this.getMeteorData().results;\n      }\n\n      if (filterType === \"both\" || filterType === \"table\") {\n        var filteredData = matchSorter(originalData, filterInput, {\n          keys: filteredFields\n        });\n        return filteredData;\n      }\n\n      return originalData;\n    }\n\n    return renderData;\n  }();\n  /**\n   * @name renderColumnFilter()\n   * @summary Uses props to determine if Column Filters should be shown\n   * @returns {Bool} returns true or false for column filters\n   */\n\n\n  _proto.renderColumnFilter = function () {\n    function renderColumnFilter() {\n      var filterType = this.props.filterType;\n\n      if (filterType === \"both\" || filterType === \"column\") {\n        return true;\n      }\n\n      return false;\n    }\n\n    return renderColumnFilter;\n  }();\n  /**\n   * @name getTableData()\n   * @method\n   * @summary Checks if JSON data is passed vs publication data\n   * @returns {Number} returns number of available data\n   */\n\n\n  _proto.getTableData = function () {\n    function getTableData() {\n      if (this.props.data) {\n        return this.props.data.length;\n      }\n\n      return this.getMeteorData().matchingResults;\n    }\n\n    return getTableData;\n  }();\n  /**\n   * @name renderTableFilter()\n   * @method\n   * @summary Uses props to determine if a Table Filter should be shown\n   * @returns {node} returns JSX node or null\n   */\n\n\n  _proto.renderTableFilter = function () {\n    function renderTableFilter() {\n      var filterType = this.props.filterType;\n\n      if (this.getTableData() !== 0) {\n        if (filterType === \"both\" || filterType === \"table\") {\n          return React.createElement(SortableTableFilter, {\n            onChange: this.handleFilterInput,\n            value: this.state.filterInput,\n            name: \"filterInput\"\n          });\n        }\n      }\n\n      return null;\n    }\n\n    return renderTableFilter;\n  }();\n  /**\n   * @name selectedRowsClassName()\n   * @method\n   * @summary If any rows are selected, give them a className of \"selected-row\"\n   * @param {object} rowInfo row data passed in from ReactTable\n   * @returns {String} className to apply to row that is selected, or empty string if no row is selected\n   */\n\n\n  _proto.selectedRowsClassName = function () {\n    function selectedRowsClassName(rowInfo) {\n      var selectedRows = this.props.selectedRows;\n      var className = \"\";\n\n      if (selectedRows && selectedRows.length) {\n        if (rowInfo !== undefined && selectedRows.includes(rowInfo.row._id)) {\n          className = \"selected-row\";\n        }\n      }\n\n      return className;\n    }\n\n    return selectedRowsClassName;\n  }();\n  /**\n   * @name displayNoResultsFound()\n   * @method\n   * @summary This function displays a 'No Results Found' when there is no data to populate the table\n   * @return {node} returns a JSX node or empty string\n   */\n\n\n  _proto.displayNoResultsFound = function () {\n    function displayNoResultsFound() {\n      var displayText = \"\";\n\n      if (this.getTableData() === 0) {\n        displayText = React.createElement(\"span\", {\n          className: \"sortableTable-noDataText\"\n        }, this.props.noDataMessage);\n      }\n\n      return displayText;\n    }\n\n    return displayNoResultsFound;\n  }();\n\n  _proto.render = function () {\n    function render() {\n      var _this2 = this;\n\n      var otherProps = (0, _extends2.default)({}, this.props);\n      var defaultClassName = \"-striped -highlight\"; // All available props: https://github.com/tannerlinsley/react-table#props\n\n      return React.createElement(\"div\", null, this.renderTableFilter(), React.createElement(ReactTable, {\n        className: otherProps.tableClassName || defaultClassName,\n        columns: this.renderColumns(),\n        data: otherProps.data || this.renderData(),\n        defaultFilterMethod: this.customFilter,\n        defaultPageSize: otherProps.defaultPageSize,\n        filterable: this.renderColumnFilter(),\n        minRows: this.setMinRows(),\n        previousText: otherProps.previousText,\n        nextText: otherProps.nextText,\n        loadingText: otherProps.loadingText,\n        noDataText: this.displayNoResultsFound(),\n        pageText: otherProps.pageText,\n        ofText: otherProps.ofText,\n        rowsText: otherProps.rowsText,\n        showPaginationTop: otherProps.showPaginationTop,\n        sortable: otherProps.isSortable,\n        PaginationComponent: SortableTablePagination,\n        showPaginationBottom: this.renderPaginationBottom(),\n        getTrProps: function (state, rowInfo, column, instance) {\n          // eslint-disable-line no-unused-vars\n          if (otherProps.getTrProps) {\n            return otherProps.getTrProps();\n          }\n\n          return {\n            onClick: function (e) {\n              // eslint-disable-line no-unused-vars\n              _this2.handleClick(rowInfo);\n            },\n            className: _this2.selectedRowsClassName(rowInfo)\n          };\n        },\n        getTableProps: otherProps.getTableProps,\n        getTrGroupProps: otherProps.getTrGroupProps,\n        getTheadProps: otherProps.getTheadProps,\n        getPaginationProps: otherProps.getPaginationProps,\n        pages: otherProps.pages,\n        onPageChange: otherProps.onPageChange,\n        onPageSizeChange: otherProps.onPageSizeChange,\n        page: otherProps.page,\n        manual: otherProps.manual\n      }));\n    }\n\n    return render;\n  }();\n\n  return SortableTable;\n}(Component);\n/**\n  * @name SortableTable propTypes\n  * @type {propTypes}\n  * @param {Object} props - React PropTypes\n  * @property {Object} collection collection to get data from\n  * @property {Array} columnMetadata provides filtered columns with i18n headers\n  * @property {Array} data provides array of objects to be used in place of publication data\n  * @property {Number} defaultPageSize how many results per page\n  * @property {Boolean} filterType filter by table, column, or both\n  * @property {Array} filteredFields provides filtered columns, use columnMetadata instead\n  * @property {Boolean} isFilterable show / hide column filter\n  * @property {Boolean} isResizeable allow resizing of table columns\n  * @property {Boolean} isSortable allow column sorting\n  * @property {String} matchingResultsCount provides Count publication to get count from\n  * @property {Number} minRows minimum amount of rows to display in table\n  * @property {String} noDataMessage text to display when no data is available\n  * @property {Function} onRowClick provides function / action when clicking on row\n  * @property {String} publication provides publication to get Meteor data from\n  * @property {object} query provides query for publication filtering\n  * @property {Array} selectedRows provides selected rows in the table\n  * @property {Function} transform transform of collection for grid results\n  * @return {Array} React propTypes\n  */\n\n\nSortableTable.propTypes = {\n  collection: PropTypes.object,\n  columnMetadata: PropTypes.array,\n  data: PropTypes.array,\n  defaultPageSize: PropTypes.number,\n  filterType: PropTypes.string,\n  filteredFields: PropTypes.array,\n  isFilterable: PropTypes.bool,\n  isResizeable: PropTypes.bool,\n  isSortable: PropTypes.bool,\n  matchingResultsCount: PropTypes.string,\n  minRows: PropTypes.number,\n  noDataMessage: PropTypes.string,\n  onRowClick: PropTypes.func,\n  publication: PropTypes.string,\n  query: PropTypes.object,\n  selectedRows: PropTypes.array,\n  transform: PropTypes.func\n};\nSortableTable.defaultProps = {\n  defaultPageSize: 10,\n  filterType: \"table\",\n  isFilterable: false,\n  isResizeable: true,\n  isSortable: true,\n  minRows: 0,\n  noDataMessage: \"No results found\",\n  previousText: \"Previous\",\n  nextText: \"Next\",\n  loadingText: \"Loading...\",\n  noDataText: \"No results found\",\n  pageText: \"Page\",\n  ofText: \"of\",\n  rowsText: \"rows\" // noDataMessage: <Translation defaultValue=\"No results found\" i18nKey={\"reactionUI.components.sortableTable.tableText.noDataMessage\"} />,\n  // previousText: <Translation defaultValue=\"Previous\" i18nKey={\"reactionUI.components.sortableTable.tableText.previousText\"} />,\n  // nextText: <Translation defaultValue=\"Next\" i18nKey={\"reactionUI.components.sortableTable.tableText.nextText\"} />,\n  // loadingText: <Translation defaultValue=\"Loading...\" i18nKey={\"reactionUI.components.sortableTable.tableText.loadingText\"} />,\n  // noDataText: <Translation defaultValue=\"No results found\" i18nKey={\"reactionUI.components.sortableTable.tableText.noDataText\"} />,\n  // pageText: <Translation defaultValue=\"Page\" i18nKey={\"reactionUI.components.sortableTable.tableText.pageText\"} />,\n  // ofText: <Translation defaultValue=\"of\" i18nKey={\"reactionUI.components.sortableTable.tableText.ofText\"} />,\n  // rowsText: <Translation defaultValue=\"rows\" i18nKey={\"reactionUI.components.sortableTable.tableText.rowsText\"} />\n\n};\nregisterComponent(\"SortableTable\", SortableTable);\nmodule1.exportDefault(SortableTable);","map":{"version":3,"sources":["imports/plugins/core/ui/client/components/table/sortableTable.js"],"names":["module1","module","React","Component","watch","require","v","PropTypes","matchSorter","ReactTable","Meteor","Counts","registerComponent","SortableTableFilter","SortableTablePagination","SortableTable","props","customFilter","filter","row","id","pivotId","undefined","String","toLowerCase","includes","value","handleFilterInput","event","field","setState","renderPaginationBottom","getTableData","setMinRows","state","currentPage","filterInput","maxPages","query","bind","componentWillReceiveProps","nextProps","getMeteorData","collection","matchingResultsCount","publication","matchingResults","get","options","pubHandle","subscribe","Object","assign","results","find","fetch","transform","loading","ready","handleClick","rowInfo","onRowClick","className","data","_id","original","type","renderColumns","columnMetadata","displayColumns","map","element","minWidth","renderData","filteredFields","filterType","originalData","filteredData","keys","renderColumnFilter","length","renderTableFilter","selectedRowsClassName","selectedRows","displayNoResultsFound","displayText","noDataMessage","render","otherProps","defaultClassName","tableClassName","defaultPageSize","previousText","nextText","loadingText","pageText","ofText","rowsText","showPaginationTop","isSortable","column","instance","getTrProps","onClick","e","getTableProps","getTrGroupProps","getTheadProps","getPaginationProps","pages","onPageChange","onPageSizeChange","page","manual","propTypes","object","array","number","string","isFilterable","bool","isResizeable","minRows","func","defaultProps","noDataText","exportDefault"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport matchSorter from \"match-sorter\";\nimport ReactTable from \"react-table\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Counts } from \"meteor/tmeasday:publish-counts\";\nimport { registerComponent } from \"@reactioncommerce/reaction-components\";\nimport { SortableTableFilter, SortableTablePagination } from \"./sortableTableComponents\";\n\n/**\n * @file SortableTable is a React Component wrapper around {@link https://react-table.js.org} ReactTable.\n * Any functionality from ReactTable should be available in SortableTable out of the box, but may require styling.\n * For more, see {@link https://react-table.js.org/#/story/readme ReactTable docs}\n *\n * @module SortableTable\n * @extends Component\n */\n\nclass SortableTable extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentPage: 0,\n      filterInput: \"\",\n      maxPages: 0,\n      query: props.query || {}\n    };\n\n    this.handleFilterInput = this.handleFilterInput.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.query !== this.props.query) {\n      this.setState({\n        query: nextProps.query\n      });\n    }\n  }\n\n  /**\n   * @name getMeteorData()\n   * @method\n   * @summary Absorb publication / collection information from props, output data from subscription.\n   * Use props to get collection, use that information to call Meteor to get subscription and output data for table.\n   * @prop {String} matchingResultsCount - Send to Counts collection to get results count of sub\n   * @prop {String} publication - publication to subscribe to\n   * @prop {Object} collection - collection to get data from\n   * @returns {Object} loading status (bool), results (object), and matchingResults (number)\n   */\n  getMeteorData() {\n    const { collection, matchingResultsCount, publication } = this.props;\n\n    // Get a count of the number of items matching the current filter.\n    // If no filter is set it will return the total number of items in the collection.\n    const matchingResults = Counts.get(matchingResultsCount);\n\n    const options = {};\n\n    const pubHandle = Meteor.subscribe(publication, this.state.query, Object.assign({}, options));\n\n    // optional transform of collection for grid results\n    let results = collection.find(this.state.query, options).fetch();\n    if (this.props.transform) {\n      results = this.props.transform(results);\n    }\n\n    return {\n      loading: !pubHandle.ready(),\n      results,\n      matchingResults\n    };\n  }\n\n\n  /**\n   * @name customFilter()\n   * @method\n   * @summary Replace default filter with customized filter, custom filter is case insensitive\n   * custom filter searches entire string, not just from string start\n   * @param {Object} filter user-typed data\n   * @param {Object} row row info for associated filter\n   * @returns {String|Boolean} replacement filter\n   */\n  customFilter = (filter, row) => {\n    const id = filter.pivotId || filter.id;\n    if (row[id] !== null && typeof row[id] === \"string\") {\n      return (row[id] !== undefined\n        ? String(row[id].toLowerCase()).includes(filter.value.toLowerCase())\n        : true);\n    }\n  }\n\n\n  /**\n   * @name handleFilterInput()\n   * @summary Update state when filter is changed\n   * @param {script} event onChange event when typing in filter field\n   * @param {string} value text field input\n   * @param {string} field input field name to watch\n   * @return {function} state for field value\n   */\n  handleFilterInput = (event, value, field) => {\n    this.setState({\n      [field]: value\n    });\n  }\n\n\n  /**\n   * @name handleClick()\n   * @summary Handle click on table row\n   * @param {object} rowInfo row data passed in from ReactTable\n   * @return {function} return onRowClick function prop, or undefined if not supplied\n   */\n  handleClick(rowInfo) {\n    const { onRowClick } = this.props;\n\n    if (typeof onRowClick === \"function\") {\n      return (\n        onRowClick({\n          className: \"sortable-table-row\",\n          props: {\n            data: {\n              _id: rowInfo.original._id,\n              type: rowInfo.original.type\n            }\n          }\n        })\n      );\n    }\n  }\n\n\n  /**\n   * @name renderColumns()\n   * @method\n   * @summary Absorb columnMetadata information from props, output columns to display\n   * @prop {String} columnMetadata - Object of data field, column header\n   * @returns {Object} data filed (string), translated header (string), and minWidth (number / undefined)\n   */\n  renderColumns() {\n    const { columnMetadata } = this.props;\n\n    // Add minWidth = undefined to override 100px default set by ReactTable\n    const displayColumns = columnMetadata.map((element) => Object.assign({}, element, {\n      minWidth: undefined\n    }));\n\n    return displayColumns;\n  }\n\n\n  /**\n   * @name renderData()\n   * @method\n   * @summary Take data from getMeteorData() and filter if needed, or spit out raw if no filter\n   * @returns {Object} data filed (string), translated header (string), and minWidth (number / undefined)\n   */\n  renderData() {\n    const { filteredFields, filterType } = this.props;\n    const { filterInput } = this.state;\n\n    let originalData = [];\n\n    if (this.getMeteorData().results) {\n      originalData = this.getMeteorData().results;\n    }\n\n    if (filterType === \"both\" || filterType === \"table\") {\n      const filteredData = matchSorter(originalData, filterInput, { keys: filteredFields });\n      return filteredData;\n    }\n\n    return originalData;\n  }\n\n\n  /**\n   * @name renderColumnFilter()\n   * @summary Uses props to determine if Column Filters should be shown\n   * @returns {Bool} returns true or false for column filters\n   */\n  renderColumnFilter() {\n    const { filterType } = this.props;\n\n    if (filterType === \"both\" || filterType === \"column\") {\n      return true;\n    }\n\n    return false;\n  }\n\n\n  /**\n   * @name getTableData()\n   * @method\n   * @summary Checks if JSON data is passed vs publication data\n   * @returns {Number} returns number of available data\n   */\n  getTableData() {\n    if (this.props.data) {\n      return this.props.data.length;\n    }\n\n    return this.getMeteorData().matchingResults;\n  }\n\n  /**\n   * @name renderTableFilter()\n   * @method\n   * @summary Uses props to determine if a Table Filter should be shown\n   * @returns {node} returns JSX node or null\n   */\n  renderTableFilter() {\n    const { filterType } = this.props;\n\n    if (this.getTableData() !== 0) {\n      if (filterType === \"both\" || filterType === \"table\") {\n        return (\n          <SortableTableFilter\n            onChange={this.handleFilterInput}\n            value={this.state.filterInput}\n            name=\"filterInput\"\n          />\n        );\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * @name selectedRowsClassName()\n   * @method\n   * @summary If any rows are selected, give them a className of \"selected-row\"\n   * @param {object} rowInfo row data passed in from ReactTable\n   * @returns {String} className to apply to row that is selected, or empty string if no row is selected\n   */\n  selectedRowsClassName(rowInfo) {\n    const { selectedRows } = this.props;\n    let className = \"\";\n\n    if (selectedRows && selectedRows.length) {\n      if (rowInfo !== undefined && selectedRows.includes(rowInfo.row._id)) {\n        className = \"selected-row\";\n      }\n    }\n\n    return className;\n  }\n\n  /**\n   * @name displayNoResultsFound()\n   * @method\n   * @summary This function displays a 'No Results Found' when there is no data to populate the table\n   * @return {node} returns a JSX node or empty string\n   */\n  displayNoResultsFound() {\n    let displayText = \"\";\n    if (this.getTableData() === 0) {\n      displayText = <span className=\"sortableTable-noDataText\">{this.props.noDataMessage}</span>;\n    }\n    return displayText;\n  }\n\n  renderPaginationBottom = () => {\n    if (this.getTableData() === 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  setMinRows = () => {\n    if (this.getTableData() === 0) {\n      return 3;\n    }\n\n    return 0;\n  }\n\n  render() {\n    const { ...otherProps } = this.props;\n    const defaultClassName = \"-striped -highlight\";\n\n    // All available props: https://github.com/tannerlinsley/react-table#props\n    return (\n      <div>\n        {this.renderTableFilter()}\n        <ReactTable\n          className={otherProps.tableClassName || defaultClassName}\n          columns={this.renderColumns()}\n          data={otherProps.data || this.renderData()}\n          defaultFilterMethod={this.customFilter}\n          defaultPageSize={otherProps.defaultPageSize}\n          filterable={this.renderColumnFilter()}\n          minRows={this.setMinRows()}\n          previousText={otherProps.previousText}\n          nextText={otherProps.nextText}\n          loadingText={otherProps.loadingText}\n          noDataText={this.displayNoResultsFound()}\n          pageText={otherProps.pageText}\n          ofText={otherProps.ofText}\n          rowsText={otherProps.rowsText}\n          showPaginationTop={otherProps.showPaginationTop}\n          sortable={otherProps.isSortable}\n          PaginationComponent={SortableTablePagination}\n          showPaginationBottom={this.renderPaginationBottom()}\n          getTrProps={(state, rowInfo, column, instance) => { // eslint-disable-line no-unused-vars\n            if (otherProps.getTrProps) {\n              return otherProps.getTrProps();\n            }\n\n            return {\n              onClick: (e) => { // eslint-disable-line no-unused-vars\n                this.handleClick(rowInfo);\n              },\n              className: this.selectedRowsClassName(rowInfo)\n            };\n          }}\n          getTableProps={otherProps.getTableProps}\n          getTrGroupProps={otherProps.getTrGroupProps}\n          getTheadProps={otherProps.getTheadProps}\n          getPaginationProps={otherProps.getPaginationProps}\n          pages={otherProps.pages}\n          onPageChange={otherProps.onPageChange}\n          onPageSizeChange={otherProps.onPageSizeChange}\n          page={otherProps.page}\n          manual={otherProps.manual}\n        />\n      </div>\n    );\n  }\n}\n\n/**\n  * @name SortableTable propTypes\n  * @type {propTypes}\n  * @param {Object} props - React PropTypes\n  * @property {Object} collection collection to get data from\n  * @property {Array} columnMetadata provides filtered columns with i18n headers\n  * @property {Array} data provides array of objects to be used in place of publication data\n  * @property {Number} defaultPageSize how many results per page\n  * @property {Boolean} filterType filter by table, column, or both\n  * @property {Array} filteredFields provides filtered columns, use columnMetadata instead\n  * @property {Boolean} isFilterable show / hide column filter\n  * @property {Boolean} isResizeable allow resizing of table columns\n  * @property {Boolean} isSortable allow column sorting\n  * @property {String} matchingResultsCount provides Count publication to get count from\n  * @property {Number} minRows minimum amount of rows to display in table\n  * @property {String} noDataMessage text to display when no data is available\n  * @property {Function} onRowClick provides function / action when clicking on row\n  * @property {String} publication provides publication to get Meteor data from\n  * @property {object} query provides query for publication filtering\n  * @property {Array} selectedRows provides selected rows in the table\n  * @property {Function} transform transform of collection for grid results\n  * @return {Array} React propTypes\n  */\nSortableTable.propTypes = {\n  collection: PropTypes.object,\n  columnMetadata: PropTypes.array,\n  data: PropTypes.array,\n  defaultPageSize: PropTypes.number,\n  filterType: PropTypes.string,\n  filteredFields: PropTypes.array,\n  isFilterable: PropTypes.bool,\n  isResizeable: PropTypes.bool,\n  isSortable: PropTypes.bool,\n  matchingResultsCount: PropTypes.string,\n  minRows: PropTypes.number,\n  noDataMessage: PropTypes.string,\n  onRowClick: PropTypes.func,\n  publication: PropTypes.string,\n  query: PropTypes.object,\n  selectedRows: PropTypes.array,\n  transform: PropTypes.func\n};\n\nSortableTable.defaultProps = {\n  defaultPageSize: 10,\n  filterType: \"table\",\n  isFilterable: false,\n  isResizeable: true,\n  isSortable: true,\n  minRows: 0,\n  noDataMessage: \"No results found\",\n  previousText: \"Previous\",\n  nextText: \"Next\",\n  loadingText: \"Loading...\",\n  noDataText: \"No results found\",\n  pageText: \"Page\",\n  ofText: \"of\",\n  rowsText: \"rows\"\n  // noDataMessage: <Translation defaultValue=\"No results found\" i18nKey={\"reactionUI.components.sortableTable.tableText.noDataMessage\"} />,\n  // previousText: <Translation defaultValue=\"Previous\" i18nKey={\"reactionUI.components.sortableTable.tableText.previousText\"} />,\n  // nextText: <Translation defaultValue=\"Next\" i18nKey={\"reactionUI.components.sortableTable.tableText.nextText\"} />,\n  // loadingText: <Translation defaultValue=\"Loading...\" i18nKey={\"reactionUI.components.sortableTable.tableText.loadingText\"} />,\n  // noDataText: <Translation defaultValue=\"No results found\" i18nKey={\"reactionUI.components.sortableTable.tableText.noDataText\"} />,\n  // pageText: <Translation defaultValue=\"Page\" i18nKey={\"reactionUI.components.sortableTable.tableText.pageText\"} />,\n  // ofText: <Translation defaultValue=\"of\" i18nKey={\"reactionUI.components.sortableTable.tableText.ofText\"} />,\n  // rowsText: <Translation defaultValue=\"rows\" i18nKey={\"reactionUI.components.sortableTable.tableText.rowsText\"} />\n};\n\nregisterComponent(\"SortableTable\", SortableTable);\n\nexport default SortableTable;\n"]},"sourceType":"script","hash":"3b8f1e54610f98779ba8eb83c1b52cf16d536e50"}
