{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/core/layout/client/templates/layout/alerts/inlineAlerts.js","filename":"imports/plugins/core/layout/client/templates/layout/alerts/inlineAlerts.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/core/layout/client/templates/layout/alerts/inlineAlerts.js","plugins":["dynamicImport","classProperties","jsx","jsx","flow","asyncGenerators","objectRestSpread","objectRestSpread","flow","asyncGenerators"]},"generatorOpts":{"filename":"imports/plugins/core/layout/client/templates/layout/alerts/inlineAlerts.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/core/layout/client/templates/layout/alerts/inlineAlerts.js"}},"code":"var _defaults;\n\nmodule.watch(require(\"lodash/defaults\"), {\n  \"default\": function (v) {\n    _defaults = v;\n  }\n}, 0);\nvar i18next;\nmodule.watch(require(\"../../../../../../../../client/api\"), {\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 1);\nvar Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 2);\n\n/*\n * Forked and modifed from https://github.com/asktomsk/bootstrap-alerts/\n */\nvar Alerts = {\n  /*\n  Default options. Can be overridden for application\n   */\n  defaultOptions: {\n    /*\n    Button with cross icon to hide (close) alert\n     */\n    dismissable: true,\n\n    /*\n    CSS classes to be appended on each alert DIV (use space for separator)\n     */\n    classes: \"\",\n\n    /*\n    Hide alert after delay in ms or false to infinity\n     */\n    autoHide: false,\n\n    /*\n    Time in ms before alert fully appears\n     */\n    fadeIn: 200,\n\n    /*\n    If autoHide enabled then fadeOut is time in ms before alert disappears\n     */\n    fadeOut: 3000,\n\n    /*\n    Amount of alerts to be displayed\n     */\n    alertsLimit: 3,\n\n    /*\n    Allows use HTML in messages\n     */\n    html: false,\n\n    /*\n     * define placement to only show where matches\n     * use: {{inlineAlerts placement=\"cart\"}}\n     * Alerts.add \"message\",\"danger\", placement:\"cart\"\n     */\n    placement: \"\",\n\n    /*\n    Translation key for i18n (translations collection)\n     */\n    i18nKey: \"\",\n\n    /*\n    unique id (for multiple message placements)\n     */\n    id: \"\"\n  },\n\n  /*\n  Add an alert\n   @param message (String) Text to display.\n  @param mode (String) One of bootstrap alerts types: success, info, warning, danger\n  @param options (Object) Options if required to override some of default ones.\n  See Alerts.defaultOptions for all values.\n   */\n  add: function (alertMessage, mode, alertOptions) {\n    var a;\n    var message = alertMessage;\n    var options = alertOptions; // check options to see if we have translation\n\n    if (options && options.i18nKey && options.i18nKey !== i18next.t(options.i18nKey)) {\n      message = i18next.t(options.i18nKey);\n    } // get default options\n\n\n    options = _defaults(alertOptions || {}, Alerts.defaultOptions);\n\n    if (options.type) {\n      a = Alerts.collection_.findOne({\n        \"options.type\": options.type\n      });\n\n      if (a) {\n        Alerts.collection_.update(a._id, {\n          $set: {\n            message: message,\n            mode: mode,\n            options: options\n          }\n        });\n        return;\n      }\n    }\n\n    var count = Alerts.collection_.find({}).count();\n\n    if (count >= options.alertsLimit) {\n      Alerts.collection_.find({}, {\n        sort: {\n          created: -1\n        },\n        skip: options.alertsLimit - 1\n      }).forEach(function (row) {\n        Alerts.collection_.remove(row._id);\n      });\n    }\n\n    Alerts.collection_.insert({\n      message: message,\n      mode: mode,\n      options: options,\n      seen: false,\n      created: +new Date()\n    });\n  },\n\n  /*\n  Call this function before loading a new page to clear errors from previous page\n  Best way is using Router filtering feature to call this function\n   */\n  removeSeen: function () {\n    Alerts.collection_.remove({\n      \"seen\": true,\n      \"options.sticky\": {\n        $ne: true\n      }\n    });\n  },\n\n  /*\n  If you provide a `type` option when adding an alert, you can call this function\n  to later remove that alert.\n   */\n  removeType: function (type) {\n    Alerts.collection_.remove({\n      \"options.type\": type\n    });\n  },\n  collection_: new Mongo.Collection(null)\n};\nwindow.Alerts = Alerts;\nmodule.exportDefault(Alerts);","map":{"version":3,"sources":["imports/plugins/core/layout/client/templates/layout/alerts/inlineAlerts.js"],"names":["_defaults","module","watch","require","v","i18next","Mongo","Alerts","defaultOptions","dismissable","classes","autoHide","fadeIn","fadeOut","alertsLimit","html","placement","i18nKey","id","add","alertMessage","mode","alertOptions","a","message","options","t","type","collection_","findOne","update","_id","$set","count","find","sort","created","skip","forEach","row","remove","insert","seen","Date","removeSeen","$ne","removeType","Collection","window","exportDefault"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport { i18next } from \"/client/api\";\nimport { Mongo } from \"meteor/mongo\";\n\n/*\n * Forked and modifed from https://github.com/asktomsk/bootstrap-alerts/\n */\nconst Alerts = {\n\n  /*\n  Default options. Can be overridden for application\n   */\n  defaultOptions: {\n\n    /*\n    Button with cross icon to hide (close) alert\n     */\n    dismissable: true,\n\n    /*\n    CSS classes to be appended on each alert DIV (use space for separator)\n     */\n    classes: \"\",\n\n    /*\n    Hide alert after delay in ms or false to infinity\n     */\n    autoHide: false,\n\n    /*\n    Time in ms before alert fully appears\n     */\n    fadeIn: 200,\n\n    /*\n    If autoHide enabled then fadeOut is time in ms before alert disappears\n     */\n    fadeOut: 3000,\n\n    /*\n    Amount of alerts to be displayed\n     */\n    alertsLimit: 3,\n\n    /*\n    Allows use HTML in messages\n     */\n    html: false,\n\n    /*\n     * define placement to only show where matches\n     * use: {{inlineAlerts placement=\"cart\"}}\n     * Alerts.add \"message\",\"danger\", placement:\"cart\"\n     */\n    placement: \"\",\n\n    /*\n    Translation key for i18n (translations collection)\n     */\n    i18nKey: \"\",\n\n    /*\n    unique id (for multiple message placements)\n     */\n    id: \"\"\n  },\n\n  /*\n  Add an alert\n\n  @param message (String) Text to display.\n  @param mode (String) One of bootstrap alerts types: success, info, warning, danger\n  @param options (Object) Options if required to override some of default ones.\n  See Alerts.defaultOptions for all values.\n   */\n  add(alertMessage, mode, alertOptions) {\n    let a;\n    let message = alertMessage;\n    let options = alertOptions;\n    // check options to see if we have translation\n    if (options && options.i18nKey && options.i18nKey !== i18next.t(options.i18nKey)) {\n      message = i18next.t(options.i18nKey);\n    }\n    // get default options\n    options = _.defaults(alertOptions || {}, Alerts.defaultOptions);\n\n    if (options.type) {\n      a = Alerts.collection_.findOne({\n        \"options.type\": options.type\n      });\n      if (a) {\n        Alerts.collection_.update(a._id, {\n          $set: {\n            message,\n            mode,\n            options\n          }\n        });\n        return;\n      }\n    }\n\n    const count = Alerts.collection_.find({}).count();\n    if (count >= options.alertsLimit) {\n      Alerts.collection_.find({}, {\n        sort: {\n          created: -1\n        },\n        skip: options.alertsLimit - 1\n      }).forEach((row) => {\n        Alerts.collection_.remove(row._id);\n      });\n    }\n    Alerts.collection_.insert({\n      message,\n      mode,\n      options,\n      seen: false,\n      created: +new Date()\n    });\n  },\n\n  /*\n  Call this function before loading a new page to clear errors from previous page\n  Best way is using Router filtering feature to call this function\n   */\n  removeSeen() {\n    Alerts.collection_.remove({\n      \"seen\": true,\n      \"options.sticky\": {\n        $ne: true\n      }\n    });\n  },\n\n  /*\n  If you provide a `type` option when adding an alert, you can call this function\n  to later remove that alert.\n   */\n  removeType(type) {\n    Alerts.collection_.remove({\n      \"options.type\": type\n    });\n  },\n  collection_: new Mongo.Collection(null)\n};\n\nwindow.Alerts = Alerts;\nexport default Alerts;\n"]},"sourceType":"script","hash":"7958ef752087e742a315bf80f863d46527142181"}
