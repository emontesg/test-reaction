{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"server/startup/collection-security.js","filename":"server/startup/collection-security.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"server/startup/collection-security.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"server/startup/collection-security.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/startup/collection-security.js"}},"code":"let Security;\nmodule.watch(require(\"meteor/ongoworks:security\"), {\n  Security(v) {\n    Security = v;\n  }\n\n}, 0);\nlet Roles;\nmodule.watch(require(\"meteor/alanning:roles\"), {\n  Roles(v) {\n    Roles = v;\n  }\n\n}, 1);\nlet Collections;\nmodule.watch(require(\"../../lib/collections\"), {\n  \"*\"(v) {\n    Collections = v;\n  }\n\n}, 2);\nlet Reaction, Hooks;\nmodule.watch(require(\"../api\"), {\n  Reaction(v) {\n    Reaction = v;\n  },\n\n  Hooks(v) {\n    Hooks = v;\n  }\n\n}, 3);\nconst {\n  Accounts,\n  Cart,\n  Packages,\n  Emails,\n  Jobs,\n  MediaRecords,\n  Orders,\n  Products,\n  Shipping,\n  Shops,\n  Tags,\n  Templates,\n  Translations\n} = Collections;\n/**\n * security definitions\n *\n * The following security definitions use the ongoworks:security package.\n * Rules within a single chain stack with AND relationship. Multiple\n * chains for the same collection stack with OR relationship.\n * See https://github.com/ongoworks/meteor-security\n *\n * It\"s important to note that these security rules are for inserts,\n * updates, and removes initiated from untrusted (client) code.\n * Thus there may be other actions that certain roles are allowed to\n * take, but they do not necessarily need to be listed here if the\n * database operation is executed in a server method.\n */\n\nmodule.exportDefault(function () {\n  /*\n   * Define some additional rule chain methods\n   */\n  Security.defineMethod(\"ifHasRoleForActiveShop\", {\n    fetch: [],\n    transform: null,\n\n    allow(type, arg, userId) {\n      if (!arg) throw new Error(\"ifHasRole security rule method requires an argument\");\n\n      if (arg.role) {\n        // Note: userId is passed to getShopId to ensure that it returns the correct shop based on the User Preference\n        // if not passed, getShopId can default to primaryShopId if Meteor.userId is not available in the context the code is run\n        const shopId = Reaction.getUserShopId(userId) || Reaction.getShopId();\n        return Roles.userIsInRole(userId, arg.role, shopId);\n      }\n\n      return Roles.userIsInRole(userId, arg);\n    }\n\n  }); // use this rule for collections other than Shops\n  // matches this.shopId\n\n  Security.defineMethod(\"ifShopIdMatches\", {\n    fetch: [],\n\n    deny(type, arg, userId, doc) {\n      // Note: userId is passed to getShopId to ensure that it returns the correct shop based on the User Preference\n      // if not passed, getShopId can default to primaryShopId if Meteor.userId is not available in the context the code is run\n      const shopId = Reaction.getUserShopId(userId) || Reaction.getShopId();\n      return doc.shopId !== shopId;\n    }\n\n  }); // this rule is for the Shops collection\n  // use ifShopIdMatches for match on this._id\n\n  Security.defineMethod(\"ifShopIdMatchesThisId\", {\n    fetch: [],\n\n    deny(type, arg, userId, doc) {\n      // Note: userId is passed to getShopId to ensure that it returns the correct shop based on the User Preference\n      // if not passed, getShopId can default to primaryShopId if Meteor.userId is not available in the context the code is run\n      const shopId = Reaction.getUserShopId(userId) || Reaction.getShopId();\n      return doc._id !== shopId;\n    }\n\n  });\n  Security.defineMethod(\"ifFileBelongsToShop\", {\n    fetch: [],\n\n    deny(type, arg, userId, doc) {\n      // Note: userId is passed to getShopId to ensure that it returns the correct shop based on the User Preference\n      // if not passed, getShopId can default to primaryShopId if Meteor.userId is not available in the context the code is run\n      const shopId = Reaction.getUserShopId(userId) || Reaction.getShopId();\n      return doc.metadata.shopId !== shopId;\n    }\n\n  });\n  Security.defineMethod(\"ifUserIdMatches\", {\n    fetch: [],\n\n    deny(type, arg, userId, doc) {\n      return userId && doc.userId && doc.userId !== userId || doc.userId && !userId;\n    }\n\n  });\n  Security.defineMethod(\"ifUserIdMatchesProp\", {\n    fetch: [],\n\n    deny(type, arg, userId, doc) {\n      return doc[arg] !== userId;\n    }\n\n  }); // todo do we need this?\n\n  Security.defineMethod(\"ifSessionIdMatches\", {\n    fetch: [],\n\n    deny(type, arg, userId, doc) {\n      return doc.sessionId !== Reaction.sessionId;\n    }\n\n  });\n  /**\n   * Define all security rules\n   */\n\n  /**\n   * admin security\n   * Permissive security for users with the \"admin\" role\n   */\n\n  Security.permit([\"insert\", \"update\", \"remove\"]).collections([Accounts, Products, Tags, Translations, Shipping, Orders, Packages, Templates, Jobs]).ifHasRoleForActiveShop({\n    role: \"admin\"\n  }).ifShopIdMatches().exceptProps([\"shopId\"]).allowInClientCode();\n  /*\n   * Permissive security for users with the \"admin\" role for FS.Collections\n   */\n\n  Security.permit([\"insert\", \"update\", \"remove\"]).collections([MediaRecords]).ifHasRoleForActiveShop({\n    role: [\"admin\", \"owner\", \"createProduct\"]\n  }).ifFileBelongsToShop();\n  /*\n   * Users with the \"admin\" or \"owner\" role may update and\n   * remove their shop but may not insert one.\n   */\n\n  Shops.permit([\"update\", \"remove\"]).ifHasRoleForActiveShop({\n    role: [\"admin\", \"owner\", \"shopSettings\"]\n  }).ifShopIdMatchesThisId().allowInClientCode();\n  /*\n   * Users with the \"admin\" or \"owner\" role may update and\n   * remove products, but createProduct allows just for just a product editor\n   */\n\n  Products.permit([\"insert\", \"update\", \"remove\"]).ifHasRoleForActiveShop({\n    role: [\"createProduct\"]\n  }).ifShopIdMatches().allowInClientCode();\n  /*\n   * Users with the \"owner\" role may remove orders for their shop\n   */\n\n  Orders.permit(\"remove\").ifHasRoleForActiveShop({\n    role: [\"admin\", \"owner\"]\n  }).ifShopIdMatches().exceptProps([\"shopId\"]).allowInClientCode();\n  /*\n   * Can update cart from client. Must insert/remove carts using\n   * server methods.\n   * Can update all session carts if not logged in or user cart if logged in as that user\n   * XXX should verify session match, but doesn't seem possible? Might have to move all cart updates to server methods, too?\n   */\n\n  Cart.permit([\"insert\", \"update\", \"remove\"]).ifHasRoleForActiveShop({\n    role: [\"anonymous\", \"guest\"]\n  }).ifShopIdMatches().ifUserIdMatches().ifSessionIdMatches().allowInClientCode();\n  /*\n   * Users may update their own account\n   */\n\n  Collections.Accounts.permit([\"insert\", \"update\"]).ifHasRoleForActiveShop({\n    role: [\"anonymous\", \"guest\"]\n  }).ifUserIdMatches().allowInClientCode();\n  /**\n   * Emails - Deny all client side ops\n   */\n\n  Emails.deny({\n    insert: () => true,\n    update: () => true,\n    remove: () => true\n  }); // As the above security Rules definitions happen after all known Core Initialization Event hooks,\n  // Event hook to run after security rules are initialized. Use this hook to add security via a plugin\n\n  Hooks.Events.run(\"afterSecurityInit\");\n});","map":{"version":3,"sources":["server/startup/collection-security.js"],"names":["Security","module","watch","require","v","Roles","Collections","Reaction","Hooks","Accounts","Cart","Packages","Emails","Jobs","MediaRecords","Orders","Products","Shipping","Shops","Tags","Templates","Translations","exportDefault","defineMethod","fetch","transform","allow","type","arg","userId","Error","role","shopId","getUserShopId","getShopId","userIsInRole","deny","doc","_id","metadata","sessionId","permit","collections","ifHasRoleForActiveShop","ifShopIdMatches","exceptProps","allowInClientCode","ifFileBelongsToShop","ifShopIdMatchesThisId","ifUserIdMatches","ifSessionIdMatches","insert","update","remove","Events","run"],"mappings":"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","sourcesContent":["import { Security } from \"meteor/ongoworks:security\";\nimport { Roles } from \"meteor/alanning:roles\";\nimport * as Collections from \"/lib/collections\";\nimport { Reaction, Hooks } from \"/server/api\";\n\nconst {\n  Accounts,\n  Cart,\n  Packages,\n  Emails,\n  Jobs,\n  MediaRecords,\n  Orders,\n  Products,\n  Shipping,\n  Shops,\n  Tags,\n  Templates,\n  Translations\n} = Collections;\n\n/**\n * security definitions\n *\n * The following security definitions use the ongoworks:security package.\n * Rules within a single chain stack with AND relationship. Multiple\n * chains for the same collection stack with OR relationship.\n * See https://github.com/ongoworks/meteor-security\n *\n * It\"s important to note that these security rules are for inserts,\n * updates, and removes initiated from untrusted (client) code.\n * Thus there may be other actions that certain roles are allowed to\n * take, but they do not necessarily need to be listed here if the\n * database operation is executed in a server method.\n */\n\nexport default function () {\n  /*\n   * Define some additional rule chain methods\n   */\n\n  Security.defineMethod(\"ifHasRoleForActiveShop\", {\n    fetch: [],\n    transform: null,\n    allow(type, arg, userId) {\n      if (!arg) throw new Error(\"ifHasRole security rule method requires an argument\");\n      if (arg.role) {\n        // Note: userId is passed to getShopId to ensure that it returns the correct shop based on the User Preference\n        // if not passed, getShopId can default to primaryShopId if Meteor.userId is not available in the context the code is run\n        const shopId = Reaction.getUserShopId(userId) || Reaction.getShopId();\n\n        return Roles.userIsInRole(userId, arg.role, shopId);\n      }\n      return Roles.userIsInRole(userId, arg);\n    }\n  });\n\n  // use this rule for collections other than Shops\n  // matches this.shopId\n  Security.defineMethod(\"ifShopIdMatches\", {\n    fetch: [],\n    deny(type, arg, userId, doc) {\n      // Note: userId is passed to getShopId to ensure that it returns the correct shop based on the User Preference\n      // if not passed, getShopId can default to primaryShopId if Meteor.userId is not available in the context the code is run\n      const shopId = Reaction.getUserShopId(userId) || Reaction.getShopId();\n\n      return doc.shopId !== shopId;\n    }\n  });\n  // this rule is for the Shops collection\n  // use ifShopIdMatches for match on this._id\n  Security.defineMethod(\"ifShopIdMatchesThisId\", {\n    fetch: [],\n    deny(type, arg, userId, doc) {\n      // Note: userId is passed to getShopId to ensure that it returns the correct shop based on the User Preference\n      // if not passed, getShopId can default to primaryShopId if Meteor.userId is not available in the context the code is run\n      const shopId = Reaction.getUserShopId(userId) || Reaction.getShopId();\n\n      return doc._id !== shopId;\n    }\n  });\n\n  Security.defineMethod(\"ifFileBelongsToShop\", {\n    fetch: [],\n    deny(type, arg, userId, doc) {\n      // Note: userId is passed to getShopId to ensure that it returns the correct shop based on the User Preference\n      // if not passed, getShopId can default to primaryShopId if Meteor.userId is not available in the context the code is run\n      const shopId = Reaction.getUserShopId(userId) || Reaction.getShopId();\n\n      return doc.metadata.shopId !== shopId;\n    }\n  });\n\n  Security.defineMethod(\"ifUserIdMatches\", {\n    fetch: [],\n    deny(type, arg, userId, doc) {\n      return (userId && doc.userId && doc.userId !== userId) || (doc.userId && !userId);\n    }\n  });\n\n  Security.defineMethod(\"ifUserIdMatchesProp\", {\n    fetch: [],\n    deny(type, arg, userId, doc) {\n      return doc[arg] !== userId;\n    }\n  });\n\n  // todo do we need this?\n  Security.defineMethod(\"ifSessionIdMatches\", {\n    fetch: [],\n    deny(type, arg, userId, doc) {\n      return doc.sessionId !== Reaction.sessionId;\n    }\n  });\n\n  /**\n   * Define all security rules\n   */\n\n  /**\n   * admin security\n   * Permissive security for users with the \"admin\" role\n   */\n\n  Security.permit([\"insert\", \"update\", \"remove\"])\n    .collections([Accounts, Products, Tags, Translations, Shipping, Orders, Packages, Templates, Jobs])\n    .ifHasRoleForActiveShop({ role: \"admin\" })\n    .ifShopIdMatches()\n    .exceptProps([\"shopId\"])\n    .allowInClientCode();\n\n  /*\n   * Permissive security for users with the \"admin\" role for FS.Collections\n   */\n\n  Security.permit([\"insert\", \"update\", \"remove\"])\n    .collections([MediaRecords])\n    .ifHasRoleForActiveShop({ role: [\"admin\", \"owner\", \"createProduct\"] })\n    .ifFileBelongsToShop();\n\n  /*\n   * Users with the \"admin\" or \"owner\" role may update and\n   * remove their shop but may not insert one.\n   */\n\n  Shops.permit([\"update\", \"remove\"])\n    .ifHasRoleForActiveShop({ role: [\"admin\", \"owner\", \"shopSettings\"] })\n    .ifShopIdMatchesThisId()\n    .allowInClientCode();\n\n  /*\n   * Users with the \"admin\" or \"owner\" role may update and\n   * remove products, but createProduct allows just for just a product editor\n   */\n\n  Products.permit([\"insert\", \"update\", \"remove\"])\n    .ifHasRoleForActiveShop({ role: [\"createProduct\"] })\n    .ifShopIdMatches()\n    .allowInClientCode();\n\n  /*\n   * Users with the \"owner\" role may remove orders for their shop\n   */\n\n  Orders.permit(\"remove\")\n    .ifHasRoleForActiveShop({ role: [\"admin\", \"owner\"] })\n    .ifShopIdMatches()\n    .exceptProps([\"shopId\"])\n    .allowInClientCode();\n\n  /*\n   * Can update cart from client. Must insert/remove carts using\n   * server methods.\n   * Can update all session carts if not logged in or user cart if logged in as that user\n   * XXX should verify session match, but doesn't seem possible? Might have to move all cart updates to server methods, too?\n   */\n\n  Cart.permit([\"insert\", \"update\", \"remove\"])\n    .ifHasRoleForActiveShop({ role: [\"anonymous\", \"guest\"] })\n    .ifShopIdMatches()\n    .ifUserIdMatches()\n    .ifSessionIdMatches()\n    .allowInClientCode();\n\n  /*\n   * Users may update their own account\n   */\n  Collections.Accounts.permit([\"insert\", \"update\"])\n    .ifHasRoleForActiveShop({ role: [\"anonymous\", \"guest\"] })\n    .ifUserIdMatches()\n    .allowInClientCode();\n\n  /**\n   * Emails - Deny all client side ops\n   */\n  Emails.deny({\n    insert: () => true,\n    update: () => true,\n    remove: () => true\n  });\n\n  // As the above security Rules definitions happen after all known Core Initialization Event hooks,\n  // Event hook to run after security rules are initialized. Use this hook to add security via a plugin\n  Hooks.Events.run(\"afterSecurityInit\");\n}\n"]},"sourceType":"script","hash":"5f93c19d0aab50daa67253d1a47dbc0b72468668"}
