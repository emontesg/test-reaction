{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/included/connectors-shopify/server/methods/import/customers.js","filename":"imports/plugins/included/connectors-shopify/server/methods/import/customers.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/included/connectors-shopify/server/methods/import/customers.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/included/connectors-shopify/server/methods/import/customers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/included/connectors-shopify/server/methods/import/customers.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/objectSpread\"));\n\nconst module1 = module;\nmodule1.export({\n  methods: () => methods\n});\nlet Shopify;\nmodule1.watch(require(\"shopify-api-node\"), {\n  default(v) {\n    Shopify = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule1.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Random;\nmodule1.watch(require(\"meteor/random\"), {\n  Random(v) {\n    Random = v;\n  }\n\n}, 2);\nlet check, Match;\nmodule1.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  },\n\n  Match(v) {\n    Match = v;\n  }\n\n}, 3);\nlet Hooks, Logger, Reaction;\nmodule1.watch(require(\"/server/api\"), {\n  Hooks(v) {\n    Hooks = v;\n  },\n\n  Logger(v) {\n    Logger = v;\n  },\n\n  Reaction(v) {\n    Reaction = v;\n  }\n\n}, 4);\nlet Accounts;\nmodule1.watch(require(\"/lib/collections\"), {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 5);\nlet getApiInfo;\nmodule1.watch(require(\"../api/api\"), {\n  getApiInfo(v) {\n    getApiInfo = v;\n  }\n\n}, 6);\nlet connectorsRoles;\nmodule1.watch(require(\"../../lib/roles\"), {\n  connectorsRoles(v) {\n    connectorsRoles = v;\n  }\n\n}, 7);\n\n/**\n * @file Shopify connector import customer method\n *       contains methods and helpers for setting up and removing synchronization between\n *       a Shopify store and a Reaction shop\n * @module connectors-shopify\n */\n\n/**\n * Transforms a Shopify customer into a Reaction customer.\n * @private\n * @method createReactionCustomerFromShopifyCustomer\n * @param  {object} options Options object\n * @param  {object} options.shopifyCustomer the Shopify customer object\n * @param  {string} options.shopId The shopId we're importing for\n * @return {object} An object that fits the `Account` schema\n *\n * @todo consider abstracting private Shopify import helpers into a helpers file\n */\nfunction createReactionCustomerFromShopifyCustomer(options) {\n  const {\n    shopifyCustomer,\n    shopId\n  } = options;\n  const userId = Random.id();\n  const reactionProfile = {\n    currency: Reaction.getPrimaryShopCurrency()\n  }; // shopify is very forgiving so expect plenty of nulls !!\n\n  const fakePhone = \"33888888888\";\n  const fakeZip = \"00000\";\n  const first_name = shopifyCustomer.first_name || \"no_first_name\";\n  const last_name = shopifyCustomer.last_name || \"no_last_name\";\n  const name = `${first_name} ${last_name}`;\n  const reactionCustomer = {\n    createdAt: shopifyCustomer.created_at,\n    name,\n    acceptsMarketing: shopifyCustomer.accepts_marketing,\n    note: shopifyCustomer.note,\n    metafields: [],\n    shopId,\n    // set shopId to active shopId;\n    userId,\n    shopifyId: shopifyCustomer.id.toString(),\n    // save it here to make sync lookups cheaper\n    tags: shopifyCustomer.tags,\n    orders_count: shopifyCustomer.orders_count,\n    updatedAt: new Date(),\n    workflow: {\n      status: \"new\",\n      workflow: [\"imported\"]\n    },\n    skipRevision: true\n  }; // shopify customer import will fail if we add a null email\n\n  if (shopifyCustomer.email !== null) {\n    // we make sure the email from shopify doesn't have typo like commas instead of dots\n    // which is a quite common typo\n    shopifyCustomer.email = shopifyCustomer.email.replace(/,/g, \".\"); // we remove any character that is not valid from email address.\n    // TODO use Reaction validate methods instead...\n\n    shopifyCustomer.email = shopifyCustomer.email.replace(/[^a-zA-Z0-9!#$%&'*+-/=?^_`{|}~@]/g, \"\");\n\n    try {\n      reactionCustomer.emails = [{\n        address: shopifyCustomer.email\n      }];\n    } catch (error) {\n      Logger.error(\"There was a problem importing your customers email from Shopify\", error);\n      throw new Meteor.Error(\"There was a problem importing your customers email from Shopify\", error);\n    }\n  } // if shopify customer has just registered chances are\n  // that's not even activated and there will no default_address field\n  // so I'll have to check against the length of addresses instead.\n\n\n  if (shopifyCustomer.addresses.length > 0) {\n    // some addresses are spammy and if address1 is empty\n    // high chances are that most fields will be missing\n    // so might stop here and forget about this addresses\n    if (shopifyCustomer.default_address.address1 !== \"\") {\n      // ok we have a default address, and does not look spammy\n      const shopifyCustomerAddress = shopifyCustomer.default_address; // Shopify has phone fields with null value\n      // let's add a fakePhone so reaction validator will not whine about it\n\n      if (shopifyCustomerAddress.phone === \"\" || shopifyCustomerAddress.phone === null) {\n        shopifyCustomerAddress.phone = fakePhone;\n      } // no province / state, np I'll stick the city in it\n\n\n      if (shopifyCustomerAddress.province === \"\" || shopifyCustomerAddress.province === null) {\n        shopifyCustomerAddress.province = shopifyCustomerAddress.city;\n      } // no postal code... lets put a fakeZip TODO auto zip finder\n\n\n      if (shopifyCustomerAddress.zip === \"\" || shopifyCustomerAddress.zip === null) {\n        shopifyCustomerAddress.zip = fakeZip;\n      }\n\n      const reactionAddress = {\n        fullName: name,\n        address1: shopifyCustomerAddress.address1,\n        address2: shopifyCustomerAddress.address2,\n        city: shopifyCustomerAddress.city,\n        company: shopifyCustomerAddress.company,\n        phone: shopifyCustomerAddress.phone,\n        region: shopifyCustomerAddress.province,\n        postal: shopifyCustomerAddress.zip,\n        country: shopifyCustomerAddress.country,\n        isCommercial: false,\n        isBillingDefault: shopifyCustomerAddress.default,\n        isShippingDefault: shopifyCustomerAddress.default\n      };\n      reactionProfile.addressBook = [reactionAddress];\n\n      try {\n        reactionCustomer.profile = reactionProfile;\n      } catch (error) {\n        Logger.error(\"There was a problem importing your customers addresses from Shopify\", error);\n        throw new Meteor.Error(\"There was a problem importing your customers addresses from Shopify\", error);\n      }\n    }\n  }\n\n  return reactionCustomer;\n}\n\nconst methods = {\n  /**\n   * Imports customers for the active Reaction Shop from Shopify with the API credentials setup for that shop.\n   *\n   * @async\n   * @method connectors/shopify/import/customers\n   * @param {object} options An object of options for the shopify API call. Available options here: https://help.shopify.com/api/reference/customer#index\n   * @returns {array} An array of the Reaction account _ids that were created.\n   */\n  \"connectors/shopify/import/customers\"(options) {\n    return Promise.asyncApply(() => {\n      check(options, Match.Maybe(Object));\n\n      if (!Reaction.hasPermission(connectorsRoles)) {\n        throw new Meteor.Error(403, \"Access Denied\");\n      }\n\n      const apiCreds = getApiInfo();\n      const shopify = new Shopify(apiCreds);\n      const shopId = Reaction.getShopId();\n      const limit = 250; // Shopify returns a maximum of 250 results per request\n\n      const ids = [];\n      const opts = Object.assign({}, {\n        published_status: \"published\",\n        limit\n      }, (0, _objectSpread2.default)({}, options));\n\n      try {\n        const customerCount = Promise.await(shopify.customer.count());\n        const numPages = Math.ceil(customerCount / limit);\n        const pages = [...Array(numPages).keys()];\n        Logger.info(`Shopify Connector is preparing to import ${customerCount} customers`);\n\n        for (const page of pages) {\n          Logger.debug(`Importing page ${page + 1} of ${numPages} - each page has ${limit} products`);\n          const shopifyCustomers = Promise.await(shopify.customer.list((0, _objectSpread2.default)({}, opts, {\n            page\n          }))); // eslint-disable-line no-await-in-loop\n\n          for (const shopifyCustomer of shopifyCustomers) {\n            if (!Accounts.findOne({\n              shopifyId: shopifyCustomer.id\n            }, {\n              fields: {\n                _id: 1\n              }\n            })) {\n              // Setup reaction customer\n              const reactionCustomer = createReactionCustomerFromShopifyCustomer({\n                shopifyCustomer,\n                shopId\n              }); // Insert customer, save id\n\n              const reactionCustomerId = Accounts.insert(reactionCustomer, {\n                publish: true\n              });\n              Hooks.Events.run(\"afterAccountsInsert\", Meteor.userId(), reactionCustomerId);\n              ids.push(reactionCustomerId);\n              Accounts.update({\n                _id: reactionCustomerId\n              }, {\n                publish: true\n              });\n              Hooks.Events.run(\"afterAccountsUpdate\", Meteor.userId(), {\n                accountId: reactionCustomerId,\n                updatedFields: [\"forceIndex\"]\n              });\n            } else {\n              // customer already exists check\n              Logger.info(`Customer ${shopifyCustomer.last_name} ${shopifyCustomer.id} already exists`);\n            }\n          } // End customer loop\n\n        } // End pages loop\n\n\n        Logger.info(`Reaction Shopify Connector has finished importing ${ids.length} customers`);\n        return ids;\n      } catch (error) {\n        Logger.error(\"There was a problem importing your customers from Shopify\", error);\n        throw new Meteor.Error(\"There was a problem importing your customers from Shopify\", error);\n      }\n    });\n  }\n\n};\nMeteor.methods(methods);","map":{"version":3,"sources":["imports/plugins/included/connectors-shopify/server/methods/import/customers.js"],"names":["module1","module","export","methods","Shopify","watch","require","default","v","Meteor","Random","check","Match","Hooks","Logger","Reaction","Accounts","getApiInfo","connectorsRoles","createReactionCustomerFromShopifyCustomer","options","shopifyCustomer","shopId","userId","id","reactionProfile","currency","getPrimaryShopCurrency","fakePhone","fakeZip","first_name","last_name","name","reactionCustomer","createdAt","created_at","acceptsMarketing","accepts_marketing","note","metafields","shopifyId","toString","tags","orders_count","updatedAt","Date","workflow","status","skipRevision","email","replace","emails","address","error","Error","addresses","length","default_address","address1","shopifyCustomerAddress","phone","province","city","zip","reactionAddress","fullName","address2","company","region","postal","country","isCommercial","isBillingDefault","isShippingDefault","addressBook","profile","Maybe","Object","hasPermission","apiCreds","shopify","getShopId","limit","ids","opts","assign","published_status","customerCount","customer","count","numPages","Math","ceil","pages","Array","keys","info","page","debug","shopifyCustomers","list","findOne","fields","_id","reactionCustomerId","insert","publish","Events","run","push","update","accountId","updatedFields"],"mappings":"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","sourcesContent":["/* eslint camelcase: 0 */\nimport Shopify from \"shopify-api-node\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Random } from \"meteor/random\";\nimport { check, Match } from \"meteor/check\";\nimport { Hooks, Logger, Reaction } from \"/server/api\";\nimport { Accounts } from \"/lib/collections\";\nimport { getApiInfo } from \"../api/api\";\nimport { connectorsRoles } from \"../../lib/roles\";\n\n/**\n * @file Shopify connector import customer method\n *       contains methods and helpers for setting up and removing synchronization between\n *       a Shopify store and a Reaction shop\n * @module connectors-shopify\n */\n\n/**\n * Transforms a Shopify customer into a Reaction customer.\n * @private\n * @method createReactionCustomerFromShopifyCustomer\n * @param  {object} options Options object\n * @param  {object} options.shopifyCustomer the Shopify customer object\n * @param  {string} options.shopId The shopId we're importing for\n * @return {object} An object that fits the `Account` schema\n *\n * @todo consider abstracting private Shopify import helpers into a helpers file\n */\nfunction createReactionCustomerFromShopifyCustomer(options) {\n  const { shopifyCustomer, shopId } = options;\n\n  const userId = Random.id();\n  const reactionProfile = { currency: Reaction.getPrimaryShopCurrency() };\n  // shopify is very forgiving so expect plenty of nulls !!\n  const fakePhone = \"33888888888\";\n  const fakeZip = \"00000\";\n  const first_name = shopifyCustomer.first_name || \"no_first_name\";\n  const last_name = shopifyCustomer.last_name || \"no_last_name\";\n  const name = `${first_name} ${last_name}`;\n\n  const reactionCustomer = {\n    createdAt: shopifyCustomer.created_at,\n    name,\n    acceptsMarketing: shopifyCustomer.accepts_marketing,\n    note: shopifyCustomer.note,\n    metafields: [],\n    shopId, // set shopId to active shopId;\n    userId,\n    shopifyId: shopifyCustomer.id.toString(), // save it here to make sync lookups cheaper\n    tags: shopifyCustomer.tags,\n    orders_count: shopifyCustomer.orders_count,\n    updatedAt: new Date(),\n    workflow: {\n      status: \"new\",\n      workflow: [\"imported\"]\n    },\n    skipRevision: true\n  };\n\n  // shopify customer import will fail if we add a null email\n  if (shopifyCustomer.email !== null) {\n    // we make sure the email from shopify doesn't have typo like commas instead of dots\n    // which is a quite common typo\n    shopifyCustomer.email = shopifyCustomer.email.replace(/,/g, \".\");\n    // we remove any character that is not valid from email address.\n    // TODO use Reaction validate methods instead...\n    shopifyCustomer.email = shopifyCustomer.email.replace(/[^a-zA-Z0-9!#$%&'*+-/=?^_`{|}~@]/g, \"\");\n    try {\n      reactionCustomer.emails = [{ address: shopifyCustomer.email }];\n    } catch (error) {\n      Logger.error(\"There was a problem importing your customers email from Shopify\", error);\n      throw new Meteor.Error(\"There was a problem importing your customers email from Shopify\", error);\n    }\n  }\n  // if shopify customer has just registered chances are\n  // that's not even activated and there will no default_address field\n  // so I'll have to check against the length of addresses instead.\n  if (shopifyCustomer.addresses.length > 0) {\n    // some addresses are spammy and if address1 is empty\n    // high chances are that most fields will be missing\n    // so might stop here and forget about this addresses\n    if (shopifyCustomer.default_address.address1 !== \"\") {\n      // ok we have a default address, and does not look spammy\n      const shopifyCustomerAddress = shopifyCustomer.default_address;\n      // Shopify has phone fields with null value\n      // let's add a fakePhone so reaction validator will not whine about it\n      if (shopifyCustomerAddress.phone === \"\" || shopifyCustomerAddress.phone === null) {\n        shopifyCustomerAddress.phone = fakePhone;\n      }\n      // no province / state, np I'll stick the city in it\n      if (shopifyCustomerAddress.province === \"\" || shopifyCustomerAddress.province === null) {\n        shopifyCustomerAddress.province = shopifyCustomerAddress.city;\n      }\n      // no postal code... lets put a fakeZip TODO auto zip finder\n      if (shopifyCustomerAddress.zip === \"\" || shopifyCustomerAddress.zip === null) {\n        shopifyCustomerAddress.zip = fakeZip;\n      }\n\n      const reactionAddress = {\n        fullName: name,\n        address1: shopifyCustomerAddress.address1,\n        address2: shopifyCustomerAddress.address2,\n        city: shopifyCustomerAddress.city,\n        company: shopifyCustomerAddress.company,\n        phone: shopifyCustomerAddress.phone,\n        region: shopifyCustomerAddress.province,\n        postal: shopifyCustomerAddress.zip,\n        country: shopifyCustomerAddress.country,\n        isCommercial: false,\n        isBillingDefault: shopifyCustomerAddress.default,\n        isShippingDefault: shopifyCustomerAddress.default\n      };\n\n      reactionProfile.addressBook = [reactionAddress];\n\n      try {\n        reactionCustomer.profile = reactionProfile;\n      } catch (error) {\n        Logger.error(\"There was a problem importing your customers addresses from Shopify\", error);\n        throw new Meteor.Error(\"There was a problem importing your customers addresses from Shopify\", error);\n      }\n    }\n  }\n\n  return reactionCustomer;\n}\n\nexport const methods = {\n  /**\n   * Imports customers for the active Reaction Shop from Shopify with the API credentials setup for that shop.\n   *\n   * @async\n   * @method connectors/shopify/import/customers\n   * @param {object} options An object of options for the shopify API call. Available options here: https://help.shopify.com/api/reference/customer#index\n   * @returns {array} An array of the Reaction account _ids that were created.\n   */\n  async \"connectors/shopify/import/customers\"(options) {\n    check(options, Match.Maybe(Object));\n    if (!Reaction.hasPermission(connectorsRoles)) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n\n    const apiCreds = getApiInfo();\n    const shopify = new Shopify(apiCreds);\n    const shopId = Reaction.getShopId();\n    const limit = 250; // Shopify returns a maximum of 250 results per request\n    const ids = [];\n    const opts = Object.assign({}, {\n      published_status: \"published\",\n      limit\n    }, { ...options });\n\n    try {\n      const customerCount = await shopify.customer.count();\n      const numPages = Math.ceil(customerCount / limit);\n      const pages = [...Array(numPages).keys()];\n      Logger.info(`Shopify Connector is preparing to import ${customerCount} customers`);\n\n      for (const page of pages) {\n        Logger.debug(`Importing page ${page + 1} of ${numPages} - each page has ${limit} products`);\n        const shopifyCustomers = await shopify.customer.list({ ...opts, page }); // eslint-disable-line no-await-in-loop\n        for (const shopifyCustomer of shopifyCustomers) {\n          if (!Accounts.findOne({ shopifyId: shopifyCustomer.id }, { fields: { _id: 1 } })) {\n            // Setup reaction customer\n            const reactionCustomer = createReactionCustomerFromShopifyCustomer({ shopifyCustomer, shopId });\n\n            // Insert customer, save id\n            const reactionCustomerId = Accounts.insert(reactionCustomer, { publish: true });\n            Hooks.Events.run(\"afterAccountsInsert\", Meteor.userId(), reactionCustomerId);\n            ids.push(reactionCustomerId);\n\n            Accounts.update({ _id: reactionCustomerId }, { publish: true });\n            Hooks.Events.run(\"afterAccountsUpdate\", Meteor.userId(), {\n              accountId: reactionCustomerId,\n              updatedFields: [\"forceIndex\"]\n            });\n          } else { // customer already exists check\n            Logger.info(`Customer ${shopifyCustomer.last_name} ${shopifyCustomer.id} already exists`);\n          }\n        } // End customer loop\n      } // End pages loop\n      Logger.info(`Reaction Shopify Connector has finished importing ${ids.length} customers`);\n\n      return ids;\n    } catch (error) {\n      Logger.error(\"There was a problem importing your customers from Shopify\", error);\n      throw new Meteor.Error(\"There was a problem importing your customers from Shopify\", error);\n    }\n  }\n};\n\nMeteor.methods(methods);\n"]},"sourceType":"script","hash":"7ef68a355099b3b657a830ccb197665882d4bd1d"}
