{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/included/taxes-avalara/client/components/avalaraSettingsForm.js","filename":"imports/plugins/included/taxes-avalara/client/components/avalaraSettingsForm.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/included/taxes-avalara/client/components/avalaraSettingsForm.js","plugins":["dynamicImport","classProperties","jsx","jsx","flow","asyncGenerators","objectRestSpread","objectRestSpread","flow","asyncGenerators"]},"generatorOpts":{"filename":"imports/plugins/included/taxes-avalara/client/components/avalaraSettingsForm.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/included/taxes-avalara/client/components/avalaraSettingsForm.js"}},"code":"var _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar module1 = module;\n\nvar _inRange;\n\nmodule1.watch(require(\"lodash/inRange\"), {\n  \"default\": function (v) {\n    _inRange = v;\n  }\n}, 0);\nvar React, Component;\nmodule1.watch(require(\"react\"), {\n  \"default\": function (v) {\n    React = v;\n  },\n  Component: function (v) {\n    Component = v;\n  }\n}, 1);\nvar PropTypes;\nmodule1.watch(require(\"prop-types\"), {\n  \"default\": function (v) {\n    PropTypes = v;\n  }\n}, 2);\nvar Meteor;\nmodule1.watch(require(\"meteor/meteor\"), {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 3);\nvar Form, Loading;\nmodule1.watch(require(\"../../../../core/ui/client/components\"), {\n  Form: function (v) {\n    Form = v;\n  },\n  Loading: function (v) {\n    Loading = v;\n  }\n}, 4);\nvar Components;\nmodule1.watch(require(\"../../../../core/components/lib\"), {\n  Components: function (v) {\n    Components = v;\n  }\n}, 5);\nvar AvalaraPackageConfig;\nmodule1.watch(require(\"../../lib/collections/schemas\"), {\n  AvalaraPackageConfig: function (v) {\n    AvalaraPackageConfig = v;\n  }\n}, 6);\nvar Logs;\nmodule1.watch(require(\"../../../../../../lib/collections\"), {\n  Logs: function (v) {\n    Logs = v;\n  }\n}, 7);\nvar LogSchema;\nmodule1.watch(require(\"../../../../../../lib/collections/schemas/logs\"), {\n  Logs: function (v) {\n    LogSchema = v;\n  }\n}, 8);\nvar i18next;\nmodule1.watch(require(\"../../../../../../client/api\"), {\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 9);\n\n/**\n * @file AvalaraSettingsForm is a React Component used to change Avalara\n * settings.\n * @module AvalaraSettingsForm\n */\n\n/**\n * @method AvalaraSettingsForm\n * @summary renders a form for updating Avalara settings.\n * @param {Object} props - some data for use by this component.\n * @property {Function} handleSubmit - a function for saving new Avalara settings.\n * @property {Array} hiddenFields - the fields (of the Avalara Package) to hide from the form.\n * @property {Object} settings - the value of the \"settings\" field in the Avalara Package.\n * @property {Object} shownFields - info about the fields the form is to show.\n * @return {Node} - a React node containing the Avalara settings form.\n */\nvar AvalaraSettingsForm =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inheritsLoose2.default)(AvalaraSettingsForm, _Component);\n\n  /**\n  * @name AvalaraSettingsForm propTypes\n  * @type {propTypes}\n  * @param {Object} props - React PropTypes\n  * @property {Object} fieldsProps - map of field specific properties for avalara settings.\n  * @property {Function} handleSubmit - a function that saves new Avalara settings.\n  * @property {Array} hiddenFields - an array of the Avalara Package's fields\n  * to hide from the settings form.\n  * @property {Object} logFieldsProps - map of field specific properties for logs.\n  * @property {Object} settings - the value of the \"settings\" field in the Avalara Package.\n  * @property {Object} shownFields - info about the fields of the Avalara Package\n  * that the settings form will allow users to change.\n  * @property {Object} shownLogFields - fields to show from Log schema\n  * @return {Array} React propTypes\n  */\n  // helper adds a class to every grid row\n  function AvalaraSettingsForm(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n\n    _this.handleLogToggle = function () {\n      _this.setState(function (prevState) {\n        return {\n          showLogs: !prevState.showLogs\n        };\n      });\n    };\n\n    _this.editRow = function (options) {\n      var currentId = _this.state.editingId;\n      var id = options.props.data._id;\n      var log = Logs.findOne(id) || {};\n      log.data = JSON.stringify(log.data, null, 4);\n\n      _this.setState({\n        editingId: id,\n        log: log\n      }); // toggle edit mode clicking on same row\n\n\n      if (currentId === options.props.data._id) {\n        _this.setState({\n          editingId: undefined,\n          log: undefined\n        });\n      }\n    };\n\n    _this.handleTestCredentials = _this.handleTestCredentials.bind((0, _assertThisInitialized2.default)(_this));\n    _this.state = {\n      showLogs: props.settings.avalara.enableLogging,\n      fieldsProp: (0, _objectSpread2.default)({}, props.fieldsProp, {\n        \"settings.avalara.enableLogging\": {\n          handleChange: _this.handleLogToggle\n        }\n      })\n    };\n    return _this;\n  }\n  /**\n    * handleSubmit\n    * @method\n    * @summary event handler for when new Avalara settings are submitted.\n    * @param {Object} event - event info.\n    * @param {Object} changedInfo - info about the new Avalara settings.\n    * @param {String} targetField - where to save the new settings in the Avalara Package.\n    * @return {null} - returns nothing\n    */\n\n\n  var _proto = AvalaraSettingsForm.prototype;\n\n  _proto.handleSubmit = function () {\n    function handleSubmit(event, changedInfo, targetField) {\n      // eslint-disable-line no-unused-vars\n      if (!changedInfo.isValid) {\n        return;\n      }\n\n      Meteor.call(\"package/update\", \"taxes-avalara\", \"settings\", changedInfo.doc.settings, function (error) {\n        if (error) {\n          Alerts.toast(i18next.t(\"admin.update.avalaraUpdateFailed\", {\n            defaultValue: \"Failed to update Avalara settings.\"\n          }), \"error\");\n          return;\n        }\n\n        Alerts.toast(i18next.t(\"admin.update.avalaraUpdateSucceeded\", {\n          defaultValue: \"Avalara settings updated.\"\n        }), \"success\");\n      });\n    }\n\n    return handleSubmit;\n  }();\n\n  _proto.handleTestCredentials = function () {\n    function handleTestCredentials() {\n      Meteor.call(\"avalara/testCredentials\", this.props.settings.avalara, function (error, result) {\n        if (error && error.message) {\n          return Alerts.toast(i18next.t(\"settings.testCredentialsFailed\") + \" \" + error.message, \"error\");\n        }\n\n        try {\n          var statusCode = result.statusCode;\n\n          var connectionValid = _inRange(statusCode, 400);\n\n          if (connectionValid) {\n            return Alerts.toast(i18next.t(\"settings.testCredentialsSuccess\"), \"success\");\n          }\n\n          return Alerts.toast(i18next.t(\"settings.testCredentialsFailed\"), \"error\");\n        } catch (err) {\n          return Alerts.toast(i18next.t(\"settings.testCredentialsFailed\"), \"error\");\n        }\n      });\n    }\n\n    return handleTestCredentials;\n  }();\n\n  _proto.render = function () {\n    function render() {\n      var _props = this.props,\n          hiddenFields = _props.hiddenFields,\n          settings = _props.settings,\n          shownFields = _props.shownFields,\n          shownLogFields = _props.shownLogFields; // add i18n handling to headers\n\n      var customColumnMetadata = AvalaraSettingsForm.filteredFields.reduce(function (arr, field) {\n        arr.push({\n          accessor: field,\n          Header: i18next.t(\"logGrid.columns.\" + field)\n        });\n        return arr;\n      }, []);\n      return React.createElement(\"div\", {\n        className: \"rui avalara-update-form\"\n      }, !settings.avalara.apiLoginId && React.createElement(\"div\", {\n        className: \"alert alert-info\"\n      }, React.createElement(Components.Translation, {\n        defaultValue: \"Add API Login ID to enable\",\n        i18nKey: \"admin.taxSettings.avalaraCredentials\"\n      }), React.createElement(\"a\", {\n        href: \"https://admin-development.avalara.net\",\n        target: \"_blank\"\n      }, \"Avalara\")), React.createElement(Form, {\n        schema: AvalaraPackageConfig,\n        doc: {\n          settings: settings\n        },\n        renderFromFields: true,\n        fieldsProp: this.state.fieldsProp,\n        docPath: \"settings.avalara\",\n        name: \"settings.avalara\",\n        fields: shownFields,\n        hideFields: hiddenFields,\n        onSubmit: this.handleSubmit\n      }), React.createElement(\"div\", {\n        id: \"testAvalaraCredentialsContainer\"\n      }, React.createElement(Components.Button, {\n        id: \"testAvalaraCredentials\",\n        label: \"Test Credentials\",\n        buttonType: \"button\",\n        className: \"btn btn-default\",\n        i18nKeyLabel: \"admin.dashboard.avalaraTestCredentials\",\n        bezelStyle: \"outline\",\n        onClick: this.handleTestCredentials\n      })), React.createElement(\"div\", {\n        className: \"panel-body text-center avalara-login-box\"\n      }, React.createElement(\"a\", {\n        href: \"https://admin-development.avalara.net\",\n        target: \"_blank\"\n      }, \"Avalara Admin Console Login\")), !!this.state.showLogs && React.createElement(Components.SortableTable, {\n        publication: \"Logs\",\n        collection: Logs,\n        query: {\n          logType: \"avalara\"\n        },\n        matchingResultsCount: \"logs-count\",\n        showFilter: true,\n        rowMetadata: AvalaraSettingsForm.customRowMetaData,\n        filteredFields: AvalaraSettingsForm.filteredFields,\n        columns: AvalaraSettingsForm.filteredFields,\n        noDataMessage: AvalaraSettingsForm.noDataMessage,\n        onRowClick: this.editRow,\n        columnMetadata: customColumnMetadata,\n        externalLoadingComponent: Loading\n      }), React.createElement(\"div\", null, !!this.state.log && React.createElement(Form, {\n        schema: LogSchema,\n        doc: this.state.log,\n        fields: shownLogFields,\n        fieldsProp: this.props.logFieldsProp,\n        autoSave: true\n      })));\n    }\n\n    return render;\n  }();\n\n  return AvalaraSettingsForm;\n}(Component);\n\nAvalaraSettingsForm.propTypes = {\n  fieldsProp: PropTypes.object,\n  hiddenFields: PropTypes.arrayOf(PropTypes.string),\n  logFieldsProp: PropTypes.object,\n  settings: PropTypes.object,\n  shownFields: PropTypes.object,\n  shownLogFields: PropTypes.object\n};\nAvalaraSettingsForm.filteredFields = [\"data.request.data.date\", \"data.request.data.type\"];\nAvalaraSettingsForm.noDataMessage = i18next.t(\"logGrid.noLogsFound\");\nAvalaraSettingsForm.customRowMetaData = {\n  bodyCssClassName: function () {\n    return \"log-grid-row\";\n  }\n};\nmodule1.exportDefault(AvalaraSettingsForm);","map":{"version":3,"sources":["imports/plugins/included/taxes-avalara/client/components/avalaraSettingsForm.js"],"names":["module1","module","_inRange","watch","require","v","React","Component","PropTypes","Meteor","Form","Loading","Components","AvalaraPackageConfig","Logs","LogSchema","i18next","AvalaraSettingsForm","props","handleLogToggle","setState","prevState","showLogs","editRow","options","currentId","state","editingId","id","data","_id","log","findOne","JSON","stringify","undefined","handleTestCredentials","bind","settings","avalara","enableLogging","fieldsProp","handleChange","handleSubmit","event","changedInfo","targetField","isValid","call","doc","error","Alerts","toast","t","defaultValue","result","message","statusCode","connectionValid","err","render","hiddenFields","shownFields","shownLogFields","customColumnMetadata","filteredFields","reduce","arr","field","push","accessor","Header","apiLoginId","logType","customRowMetaData","noDataMessage","logFieldsProp","propTypes","object","arrayOf","string","bodyCssClassName","exportDefault"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { inRange } from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Form, Loading } from \"/imports/plugins/core/ui/client/components\";\nimport { Components } from \"@reactioncommerce/reaction-components\";\nimport { AvalaraPackageConfig } from \"../../lib/collections/schemas\";\nimport { Logs } from \"/lib/collections\";\nimport { Logs as LogSchema } from \"/lib/collections/schemas/logs\";\nimport { i18next } from \"/client/api\";\n\n/**\n * @file AvalaraSettingsForm is a React Component used to change Avalara\n * settings.\n * @module AvalaraSettingsForm\n */\n\n\n/**\n * @method AvalaraSettingsForm\n * @summary renders a form for updating Avalara settings.\n * @param {Object} props - some data for use by this component.\n * @property {Function} handleSubmit - a function for saving new Avalara settings.\n * @property {Array} hiddenFields - the fields (of the Avalara Package) to hide from the form.\n * @property {Object} settings - the value of the \"settings\" field in the Avalara Package.\n * @property {Object} shownFields - info about the fields the form is to show.\n * @return {Node} - a React node containing the Avalara settings form.\n */\nclass AvalaraSettingsForm extends Component {\n  /**\n  * @name AvalaraSettingsForm propTypes\n  * @type {propTypes}\n  * @param {Object} props - React PropTypes\n  * @property {Object} fieldsProps - map of field specific properties for avalara settings.\n  * @property {Function} handleSubmit - a function that saves new Avalara settings.\n  * @property {Array} hiddenFields - an array of the Avalara Package's fields\n  * to hide from the settings form.\n  * @property {Object} logFieldsProps - map of field specific properties for logs.\n  * @property {Object} settings - the value of the \"settings\" field in the Avalara Package.\n  * @property {Object} shownFields - info about the fields of the Avalara Package\n  * that the settings form will allow users to change.\n  * @property {Object} shownLogFields - fields to show from Log schema\n  * @return {Array} React propTypes\n  */\n  static propTypes = {\n    fieldsProp: PropTypes.object,\n    hiddenFields: PropTypes.arrayOf(PropTypes.string),\n    logFieldsProp: PropTypes.object,\n    settings: PropTypes.object,\n    shownFields: PropTypes.object,\n    shownLogFields: PropTypes.object\n  };\n  static filteredFields = [\"data.request.data.date\", \"data.request.data.type\"];\n  static noDataMessage = i18next.t(\"logGrid.noLogsFound\");\n\n  // helper adds a class to every grid row\n  static customRowMetaData = {\n    bodyCssClassName: () => \"log-grid-row\"\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.handleTestCredentials = this.handleTestCredentials.bind(this);\n\n    this.state = {\n      showLogs: props.settings.avalara.enableLogging,\n      fieldsProp: {\n        ...props.fieldsProp,\n        \"settings.avalara.enableLogging\": {\n          handleChange: this.handleLogToggle\n        }\n      }\n    };\n  }\n\n  /**\n    * handleSubmit\n    * @method\n    * @summary event handler for when new Avalara settings are submitted.\n    * @param {Object} event - event info.\n    * @param {Object} changedInfo - info about the new Avalara settings.\n    * @param {String} targetField - where to save the new settings in the Avalara Package.\n    * @return {null} - returns nothing\n    */\n  handleSubmit(event, changedInfo, targetField) { // eslint-disable-line no-unused-vars\n    if (!changedInfo.isValid) {\n      return;\n    }\n    Meteor.call(\"package/update\", \"taxes-avalara\", \"settings\", changedInfo.doc.settings, (error) => {\n      if (error) {\n        Alerts.toast(\n          i18next.t(\"admin.update.avalaraUpdateFailed\", { defaultValue: \"Failed to update Avalara settings.\" }),\n          \"error\"\n        );\n        return;\n      }\n      Alerts.toast(\n        i18next.t(\"admin.update.avalaraUpdateSucceeded\", { defaultValue: \"Avalara settings updated.\" }),\n        \"success\"\n      );\n    });\n  }\n\n  handleTestCredentials() {\n    Meteor.call(\"avalara/testCredentials\", this.props.settings.avalara, (error, result) => {\n      if (error && error.message) {\n        return Alerts.toast(`${i18next.t(\"settings.testCredentialsFailed\")} ${error.message}`, \"error\");\n      }\n      try {\n        const { statusCode } = result;\n        const connectionValid = inRange(statusCode, 400);\n        if (connectionValid) {\n          return Alerts.toast(i18next.t(\"settings.testCredentialsSuccess\"), \"success\");\n        }\n        return Alerts.toast(i18next.t(\"settings.testCredentialsFailed\"), \"error\");\n      } catch (err) {\n        return Alerts.toast(i18next.t(\"settings.testCredentialsFailed\"), \"error\");\n      }\n    });\n  }\n\n  handleLogToggle = () => {\n    this.setState((prevState) => ({ showLogs: !prevState.showLogs }));\n  }\n\n  /**\n  * Shows the selected log in detail.\n  * @param  {Object} options\n  * @memberof AvalaraSettingsForm\n  */\n  editRow = (options) => {\n    const currentId = this.state.editingId;\n    const id = options.props.data._id;\n    const log = Logs.findOne(id) || {};\n    log.data = JSON.stringify(log.data, null, 4);\n    this.setState({\n      editingId: id,\n      log\n    });\n    // toggle edit mode clicking on same row\n    if (currentId === options.props.data._id) {\n      this.setState({\n        editingId: undefined,\n        log: undefined\n      });\n    }\n  }\n\n  render() {\n    const { hiddenFields, settings, shownFields, shownLogFields } = this.props;\n\n    // add i18n handling to headers\n    const customColumnMetadata = AvalaraSettingsForm.filteredFields.reduce((arr, field) => {\n      arr.push({\n        accessor: field,\n        Header: i18next.t(`logGrid.columns.${field}`)\n      });\n      return arr;\n    }, []);\n\n\n    return (\n      <div className=\"rui avalara-update-form\">\n        {!(settings.avalara.apiLoginId) &&\n          <div className=\"alert alert-info\">\n            <Components.Translation defaultValue=\"Add API Login ID to enable\" i18nKey=\"admin.taxSettings.avalaraCredentials\" />\n            <a href=\"https://admin-development.avalara.net\" target=\"_blank\">Avalara</a>\n          </div>\n        }\n        <Form\n          schema={AvalaraPackageConfig}\n          doc={{ settings }}\n          renderFromFields\n          fieldsProp={this.state.fieldsProp}\n          docPath=\"settings.avalara\"\n          name=\"settings.avalara\"\n          fields={shownFields}\n          hideFields={hiddenFields}\n          onSubmit={this.handleSubmit}\n        />\n        <div id=\"testAvalaraCredentialsContainer\">\n          <Components.Button id=\"testAvalaraCredentials\" label=\"Test Credentials\" buttonType=\"button\"\n            className=\"btn btn-default\" i18nKeyLabel=\"admin.dashboard.avalaraTestCredentials\"\n            bezelStyle=\"outline\" onClick={this.handleTestCredentials}\n          />\n        </div>\n        <div className=\"panel-body text-center avalara-login-box\">\n          <a href=\"https://admin-development.avalara.net\" target=\"_blank\">Avalara Admin Console Login</a>\n        </div>\n        {!!this.state.showLogs &&\n        (\n          <Components.SortableTable\n            publication=\"Logs\"\n            collection= {Logs}\n            query= {{ logType: \"avalara\" }}\n            matchingResultsCount=\"logs-count\"\n            showFilter\n            rowMetadata= {AvalaraSettingsForm.customRowMetaData}\n            filteredFields= {AvalaraSettingsForm.filteredFields}\n            columns= {AvalaraSettingsForm.filteredFields}\n            noDataMessage= {AvalaraSettingsForm.noDataMessage}\n            onRowClick= {this.editRow}\n            columnMetadata= {customColumnMetadata}\n            externalLoadingComponent= {Loading}\n          />\n        )}\n        <div>\n          {!!this.state.log &&\n          (\n            <Form\n              schema={LogSchema}\n              doc={this.state.log}\n              fields={shownLogFields}\n              fieldsProp={this.props.logFieldsProp}\n              autoSave\n            />\n          )}\n        </div>\n      </div>);\n  }\n}\n\nexport default AvalaraSettingsForm;\n"]},"sourceType":"script","hash":"f0447437dc524a5fa012c0bfdf6a0d2ee7305649"}
