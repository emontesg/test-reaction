{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"lib/collections/schemas/shipping.js","filename":"lib/collections/schemas/shipping.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"parserOpts":{"sourceType":"module","sourceFileName":"lib/collections/schemas/shipping.js","plugins":["dynamicImport","classProperties","jsx","jsx","flow","asyncGenerators","objectRestSpread","objectRestSpread","flow","asyncGenerators"]},"generatorOpts":{"filename":"lib/collections/schemas/shipping.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"lib/collections/schemas/shipping.js"}},"code":"var module1 = module;\nmodule1.export({\n  ShippoShippingMethod: function () {\n    return ShippoShippingMethod;\n  },\n  ShippingMethod: function () {\n    return ShippingMethod;\n  },\n  ShipmentQuote: function () {\n    return ShipmentQuote;\n  },\n  ShipmentItem: function () {\n    return ShipmentItem;\n  },\n  ShippingParcel: function () {\n    return ShippingParcel;\n  },\n  ShippoShipment: function () {\n    return ShippoShipment;\n  },\n  ShipmentQuotesQueryStatus: function () {\n    return ShipmentQuotesQueryStatus;\n  },\n  Shipment: function () {\n    return Shipment;\n  },\n  ShippoShippingProvider: function () {\n    return ShippoShippingProvider;\n  },\n  ShippingProvider: function () {\n    return ShippingProvider;\n  },\n  Shipping: function () {\n    return Shipping;\n  },\n  ShippingPackageConfig: function () {\n    return ShippingPackageConfig;\n  }\n});\nvar SimpleSchema;\nmodule1.watch(require(\"simpl-schema\"), {\n  \"default\": function (v) {\n    SimpleSchema = v;\n  }\n}, 0);\nvar check;\nmodule1.watch(require(\"meteor/check\"), {\n  check: function (v) {\n    check = v;\n  }\n}, 1);\nvar Tracker;\nmodule1.watch(require(\"meteor/tracker\"), {\n  Tracker: function (v) {\n    Tracker = v;\n  }\n}, 2);\nvar registerSchema;\nmodule1.watch(require(\"@reactioncommerce/schemas\"), {\n  registerSchema: function (v) {\n    registerSchema = v;\n  }\n}, 3);\nvar shopIdAutoValue, schemaIdAutoValue;\nmodule1.watch(require(\"./helpers\"), {\n  shopIdAutoValue: function (v) {\n    shopIdAutoValue = v;\n  },\n  schemaIdAutoValue: function (v) {\n    schemaIdAutoValue = v;\n  }\n}, 4);\nvar Address;\nmodule1.watch(require(\"./address\"), {\n  Address: function (v) {\n    Address = v;\n  }\n}, 5);\nvar Invoice;\nmodule1.watch(require(\"./payments\"), {\n  Invoice: function (v) {\n    Invoice = v;\n  }\n}, 6);\nvar PackageConfig;\nmodule1.watch(require(\"./registry\"), {\n  PackageConfig: function (v) {\n    PackageConfig = v;\n  }\n}, 7);\nvar Workflow;\nmodule1.watch(require(\"./workflow\"), {\n  Workflow: function (v) {\n    Workflow = v;\n  }\n}, 8);\nvar ShippoShippingMethod = new SimpleSchema({\n  serviceLevelToken: {\n    type: String,\n    optional: true\n  },\n  rateId: {\n    type: String,\n    optional: true\n  }\n}, {\n  check: check,\n  tracker: Tracker\n});\nregisterSchema(\"ShippoShippingMethod\", ShippoShippingMethod);\n/**\n * @name ShippingMethod\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} _id Shipment method Id\n * @property {String} name Method name\n * @property {String} label Public label\n * @property {String} group Group, allowed values: `Ground`, `Priority`, `One Day`, `Free`\n * @property {Number} cost optional\n * @property {Number} handling optional, default value: `0`\n * @property {Number} rate Rate\n * @property {Boolean} enabled default value: `false`\n * @property {Array} validRanges optional, Matching cart ranges\n * @property {Object} validRanges.$ optional\n * @property {Number} validRanges.begin optional\n * @property {Number} validRanges.end optional\n * @property {Array} validLocales optional\n * @property {Object} validLocales.$ optional\n * @property {String} validLocales.$.origination optional\n * @property {String} validLocales.$.destination optional\n * @property {Number} validLocales.$.deliveryBegin optional\n * @property {Number} validLocales.$.deliveryEnd optional\n * @property {String} carrier optional\n * @property {ShippoShippingMethod} settings optional\n */\n\nvar ShippingMethod = new SimpleSchema({\n  \"_id\": {\n    type: String,\n    label: \"Shipment Method Id\",\n    autoValue: schemaIdAutoValue\n  },\n  \"name\": {\n    type: String,\n    label: \"Method Name\",\n    optional: true\n  },\n  \"label\": {\n    type: String,\n    label: \"Public Label\"\n  },\n  \"group\": {\n    type: String,\n    label: \"Group\",\n    allowedValues: [\"Ground\", \"Priority\", \"One Day\", \"Free\"],\n    optional: true\n  },\n  \"cost\": {\n    type: Number,\n    label: \"Cost\",\n    optional: true\n  },\n  \"handling\": {\n    type: Number,\n    label: \"Handling\",\n    optional: true,\n    defaultValue: 0,\n    min: 0\n  },\n  \"rate\": {\n    type: Number,\n    label: \"Rate\",\n    min: 0\n  },\n  \"enabled\": {\n    type: Boolean,\n    label: \"Enabled\",\n    defaultValue: false\n  },\n  \"validRanges\": {\n    type: Array,\n    optional: true,\n    label: \"Matching Cart Ranges\"\n  },\n  \"validRanges.$\": {\n    type: Object,\n    optional: true\n  },\n  \"validRanges.$.begin\": {\n    type: Number,\n    label: \"Begin\",\n    optional: true\n  },\n  \"validRanges.$.end\": {\n    type: Number,\n    label: \"End\",\n    optional: true\n  },\n  \"validLocales\": {\n    type: Array,\n    optional: true,\n    label: \"Matching Locales\"\n  },\n  \"validLocales.$\": {\n    type: Object,\n    optional: true\n  },\n  \"validLocales.$.origination\": {\n    type: String,\n    label: \"From\",\n    optional: true\n  },\n  \"validLocales.$.destination\": {\n    type: String,\n    label: \"To\",\n    optional: true\n  },\n  \"validLocales.$.deliveryBegin\": {\n    type: SimpleSchema.Integer,\n    label: \"Shipping Est.\",\n    optional: true\n  },\n  \"validLocales.$.deliveryEnd\": {\n    type: SimpleSchema.Integer,\n    label: \"Delivery Est.\",\n    optional: true\n  },\n  \"carrier\": {\n    // kind of denormalizing, useful for having it in shipmentMethod( cart & order)\n    type: String,\n    // Alternatively we can make an extra Schema:ShipmentMethod, that inherits\n    optional: true // ShippingMethod and add the optional carrier field\n\n  },\n  \"settings\": {\n    type: ShippoShippingMethod,\n    optional: true\n  }\n}, {\n  check: check,\n  tracker: Tracker\n});\nregisterSchema(\"ShippingMethod\", ShippingMethod);\n/**\n * @name ShipmentQuote\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} carrier Name of carrier\n * @property {ShippingMethod} method ShippingMethod\n * @property {Number} rate default value: `0.00`\n */\n\nvar ShipmentQuote = new SimpleSchema({\n  carrier: {\n    type: String\n  },\n  method: {\n    type: ShippingMethod\n  },\n  rate: {\n    type: Number,\n    defaultValue: 0.00\n  },\n  shopId: {\n    type: String,\n    optional: true\n  }\n}, {\n  check: check,\n  tracker: Tracker\n});\nregisterSchema(\"ShipmentQuote\", ShipmentQuote);\n/**\n * @name ShipmentItem\n * @memberof schemas\n * @type {SimpleSchema}\n * @summary Populate with order.items that are added to a shipment\n * @property {String} _id Shipment Line Item optional\n * @property {String} productId required\n * @property {String} shopId Shipment Item ShopId optional\n * @property {Number} quantity required\n * @property {String} variantId required\n */\n\nvar ShipmentItem = new SimpleSchema({\n  _id: {\n    type: String,\n    label: \"Shipment Line Item\",\n    optional: true,\n    autoValue: schemaIdAutoValue\n  },\n  productId: {\n    type: String,\n    index: 1\n  },\n  shopId: {\n    type: String,\n    index: 1,\n    label: \"Shipment Item ShopId\",\n    optional: true\n  },\n  quantity: {\n    label: \"Quantity\",\n    type: SimpleSchema.Integer,\n    min: 0\n  },\n  variantId: {\n    type: String\n  }\n}, {\n  check: check,\n  tracker: Tracker\n});\nregisterSchema(\"ShipmentItem\", ShipmentItem);\n/**\n * @name ShippingParcel\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} containers optional\n * @property {Number} length optional\n * @property {Number} width optional\n * @property {Number} height optional\n * @property {Number} weight optional\n */\n\nvar ShippingParcel = new SimpleSchema({\n  containers: {\n    type: String,\n    optional: true\n  },\n  length: {\n    type: Number,\n    optional: true\n  },\n  width: {\n    type: Number,\n    optional: true\n  },\n  height: {\n    type: Number,\n    optional: true\n  },\n  weight: {\n    type: Number,\n    optional: true\n  }\n}, {\n  check: check,\n  tracker: Tracker\n});\nregisterSchema(\"ShippingParcel\", ShippingParcel);\n/**\n * @name ShippoShipment\n * @summary Specific properties of Shipment for use with Shippo. We don't use\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} transactionId optional\n * @property {String} trackingStatusStatus optional Tracking Status's status\n * @property {String} trackingStatusDate optional\n */\n\nvar ShippoShipment = new SimpleSchema({\n  transactionId: {\n    type: String,\n    optional: true\n  },\n  trackingStatusStatus: {\n    // cause tracking_status.status\n    type: String,\n    optional: true\n  },\n  trackingStatusDate: {\n    type: String,\n    optional: true\n  }\n}, {\n  check: check,\n  tracker: Tracker\n});\nregisterSchema(\"ShippoShipment\", ShippoShipment);\n/**\n * @name ShipmentQuotesQueryStatusUsed\n * @todo Should requestStatus be required or not?\n * @memberof schemas\n * @type {SimpleSchema}\n * @summary Status of a query/consumption of a shipping provider's API (e.g Shippo) for shipping quotations.\n * @description Shipping quotations are the costs from different shipping methods like Fedex, DHL etc of\n * shipping one or more items to a particular place in a given amount of time.)\n * @property {String} requestStatus optional, default value: `noRequestsYet`\n * @property {String} shippingProvider optional\n * @property {Number} numOfShippingMethodsFound optional\n * @property {String} message optional\n */\n\nvar ShipmentQuotesQueryStatus = new SimpleSchema({\n  requestStatus: {\n    type: String,\n    optional: true,\n    defaultValue: \"noRequestsYet\"\n  },\n  shippingProvider: {\n    type: String,\n    optional: true\n  },\n  numOfShippingMethodsFound: {\n    type: SimpleSchema.Integer,\n    optional: true\n  },\n  message: {\n    type: String,\n    optional: true\n  }\n}, {\n  check: check,\n  tracker: Tracker\n});\nregisterSchema(\"ShipmentQuotesQueryStatus\", ShipmentQuotesQueryStatus);\n/**\n * @name Shipment\n * @summary Used for cart/order shipment tracking\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} _id Shipment ID\n * @property {String} shopId required\n * @property {String} paymentId Payment ID\n * @property {Address} address optional\n * @property {ShippingMethod} shipmentMethod optional\n * @property {ShipmentQuote[]} shipmentQuotes optional\n * @property {ShipmentQuotesQueryStatus} shipmentQuotesQueryStatus optional\n * @property {String} tracking optional\n * @property {ShippingParcel} parcel optional\n * @property {ShipmentItem[]} items optional\n * @property {Workflow} workflow optional\n * @property {Invoice} invoice optional\n * @property {Object[]} transactions optional\n * @property {String} shippingLabelUrl For printable Shipping label\n * @property {String} customsLabelUrl For customs printable label\n * @property {ShippoShipment} shippo For Shippo specific properties\n */\n\nvar Shipment = new SimpleSchema({\n  \"_id\": {\n    type: String,\n    label: \"Shipment Id\",\n    autoValue: schemaIdAutoValue\n  },\n  \"shopId\": {\n    type: String\n  },\n  \"paymentId\": {\n    type: String,\n    label: \"Payment Id\",\n    optional: true\n  },\n  \"address\": {\n    type: Address,\n    optional: true\n  },\n  \"shipmentMethod\": {\n    type: ShippingMethod,\n    optional: true\n  },\n  \"shipmentQuotes\": {\n    type: Array,\n    optional: true\n  },\n  \"shipmentQuotes.$\": {\n    type: ShipmentQuote,\n    optional: true\n  },\n  \"shipmentQuotesQueryStatus\": {\n    type: ShipmentQuotesQueryStatus,\n    optional: true,\n    defaultValue: {}\n  },\n  \"tracking\": {\n    type: String,\n    optional: true\n  },\n  \"parcel\": {\n    type: ShippingParcel,\n    optional: true\n  },\n  \"items\": {\n    type: Array,\n    optional: true\n  },\n  \"items.$\": {\n    type: ShipmentItem,\n    optional: true\n  },\n  \"workflow\": {\n    type: Workflow,\n    optional: true,\n    defaultValue: {}\n  },\n  \"invoice\": {\n    type: Invoice,\n    optional: true\n  },\n  \"transactions\": {\n    type: Array,\n    optional: true\n  },\n  \"transactions.$\": {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  \"shippingLabelUrl\": {\n    type: String,\n    optional: true\n  },\n  \"customsLabelUrl\": {\n    type: String,\n    optional: true\n  },\n  \"shippo\": {\n    type: ShippoShipment,\n    optional: true\n  }\n}, {\n  check: check,\n  tracker: Tracker\n});\nregisterSchema(\"Shipment\", Shipment);\n/**\n * @name ShippoShippingProvider Schema\n * @summary Specific properties for use with Shippo.\n * @description We don't use ShippingProvider service* fields because\n * Shippo is on level higher service than simple carrier's ,e.g Fedex api.\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} carrierAccountId optional\n */\n\nvar ShippoShippingProvider = new SimpleSchema({\n  carrierAccountId: {\n    type: String,\n    optional: true\n  }\n}, {\n  check: check,\n  tracker: Tracker\n});\nregisterSchema(\"ShippoShippingProvider\", ShippoShippingProvider);\n/**\n * @name ShippingProvider\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} _id optional\n * @property {String} name optional\n * @property {String} label optional\n * @property {Boolean} enabled optional, default value: `true`\n * @property {String} serviceAuth optional\n * @property {String} serviceSecret optional\n * @property {String} serviceUrl optional\n * @property {ShippoShippingProvider} shippoProvider optional\n */\n\nvar ShippingProvider = new SimpleSchema({\n  _id: {\n    type: String,\n    label: \"Provider Id\",\n    optional: true,\n    autoValue: schemaIdAutoValue\n  },\n  name: {\n    type: String,\n    label: \"Service Code\",\n    optional: true\n  },\n  label: {\n    type: String,\n    label: \"Public Label\"\n  },\n  enabled: {\n    type: Boolean,\n    defaultValue: true\n  },\n  serviceAuth: {\n    type: String,\n    label: \"Auth\",\n    optional: true\n  },\n  serviceSecret: {\n    type: String,\n    label: \"Secret\",\n    optional: true\n  },\n  serviceUrl: {\n    type: String,\n    label: \"Service URL\",\n    optional: true\n  },\n  shippoProvider: {\n    type: ShippoShippingProvider,\n    optional: true\n  }\n}, {\n  check: check,\n  tracker: Tracker\n});\nregisterSchema(\"ShippingProvider\", ShippingProvider);\n/**\n * @name Shipping\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} _id optional\n * @property {String} shopId required\n * @property {String} name optional\n * @property {ShippingProvider} provider optional\n * @property {ShippingMethod[]} methods optional\n * @property {ShipmentQuote[]} shipmentQuotes optional\n */\n\nvar Shipping = new SimpleSchema({\n  \"_id\": {\n    type: String,\n    label: \"Service Id\",\n    optional: true\n  },\n  \"shopId\": {\n    type: String,\n    index: 1,\n    autoValue: shopIdAutoValue,\n    label: \"Shipping ShopId\"\n  },\n  \"name\": {\n    type: String,\n    label: \"Service Name\",\n    optional: true,\n    index: 1\n  },\n  \"provider\": {\n    type: ShippingProvider,\n    label: \"Shipping Provider\"\n  },\n  \"methods\": {\n    type: Array,\n    optional: true,\n    label: \"Shipping Methods\"\n  },\n  \"methods.$\": {\n    type: ShippingMethod\n  },\n  \"shipmentQuotes\": {\n    type: Array,\n    optional: true,\n    label: \"Quoted Methods\"\n  },\n  \"shipmentQuotes.$\": {\n    type: ShipmentQuote\n  }\n}, {\n  check: check,\n  tracker: Tracker\n});\nregisterSchema(\"Shipping\", Shipping);\n/**\n * @name ShippingPackage\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} settings.name default value: `Flat Rate Service`\n */\n\nvar ShippingPackageConfig = PackageConfig.clone().extend({\n  // Remove blackbox: true from settings obj\n  \"settings\": {\n    type: Object,\n    optional: true,\n    blackbox: false,\n    defaultValue: {}\n  },\n  \"settings.name\": {\n    type: String,\n    defaultValue: \"Flat Rate Service\"\n  }\n});\nregisterSchema(\"ShippingPackageConfig\", ShippingPackageConfig);","map":{"version":3,"sources":["lib/collections/schemas/shipping.js"],"names":["module1","module","export","ShippoShippingMethod","ShippingMethod","ShipmentQuote","ShipmentItem","ShippingParcel","ShippoShipment","ShipmentQuotesQueryStatus","Shipment","ShippoShippingProvider","ShippingProvider","Shipping","ShippingPackageConfig","SimpleSchema","watch","require","v","check","Tracker","registerSchema","shopIdAutoValue","schemaIdAutoValue","Address","Invoice","PackageConfig","Workflow","serviceLevelToken","type","String","optional","rateId","tracker","label","autoValue","allowedValues","Number","defaultValue","min","Boolean","Array","Object","Integer","carrier","method","rate","shopId","_id","productId","index","quantity","variantId","containers","length","width","height","weight","transactionId","trackingStatusStatus","trackingStatusDate","requestStatus","shippingProvider","numOfShippingMethodsFound","message","blackbox","carrierAccountId","name","enabled","serviceAuth","serviceSecret","serviceUrl","shippoProvider","clone","extend"],"mappings":"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","sourcesContent":["import SimpleSchema from \"simpl-schema\";\nimport { check } from \"meteor/check\";\nimport { Tracker } from \"meteor/tracker\";\nimport { registerSchema } from \"@reactioncommerce/schemas\";\nimport { shopIdAutoValue, schemaIdAutoValue } from \"./helpers\";\nimport { Address } from \"./address\";\nimport { Invoice } from \"./payments\";\nimport { PackageConfig } from \"./registry\";\nimport { Workflow } from \"./workflow\";\n\n/**\n * @name ShippoShippingMethod\n * @memberof schemas\n * @type {SimpleSchema}\n * @todo Move Shippo-related schema to Shippo module\n * @summary This will only exist in ShippingMethods Inside Cart/Order.\n * This does not exist in DB Shipping Collection as Shippo Methods are Dynamic.\n * @property {String} serviceLevelToken optional\n * @property {String} rateId optional\n */\nexport const ShippoShippingMethod = new SimpleSchema({\n  serviceLevelToken: {\n    type: String,\n    optional: true\n  },\n  rateId: {\n    type: String,\n    optional: true\n  }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"ShippoShippingMethod\", ShippoShippingMethod);\n\n/**\n * @name ShippingMethod\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} _id Shipment method Id\n * @property {String} name Method name\n * @property {String} label Public label\n * @property {String} group Group, allowed values: `Ground`, `Priority`, `One Day`, `Free`\n * @property {Number} cost optional\n * @property {Number} handling optional, default value: `0`\n * @property {Number} rate Rate\n * @property {Boolean} enabled default value: `false`\n * @property {Array} validRanges optional, Matching cart ranges\n * @property {Object} validRanges.$ optional\n * @property {Number} validRanges.begin optional\n * @property {Number} validRanges.end optional\n * @property {Array} validLocales optional\n * @property {Object} validLocales.$ optional\n * @property {String} validLocales.$.origination optional\n * @property {String} validLocales.$.destination optional\n * @property {Number} validLocales.$.deliveryBegin optional\n * @property {Number} validLocales.$.deliveryEnd optional\n * @property {String} carrier optional\n * @property {ShippoShippingMethod} settings optional\n */\nexport const ShippingMethod = new SimpleSchema({\n  \"_id\": {\n    type: String,\n    label: \"Shipment Method Id\",\n    autoValue: schemaIdAutoValue\n  },\n  \"name\": {\n    type: String,\n    label: \"Method Name\",\n    optional: true\n  },\n  \"label\": {\n    type: String,\n    label: \"Public Label\"\n  },\n  \"group\": {\n    type: String,\n    label: \"Group\",\n    allowedValues: [\"Ground\", \"Priority\", \"One Day\", \"Free\"],\n    optional: true\n  },\n  \"cost\": {\n    type: Number,\n    label: \"Cost\",\n    optional: true\n  },\n  \"handling\": {\n    type: Number,\n    label: \"Handling\",\n    optional: true,\n    defaultValue: 0,\n    min: 0\n  },\n  \"rate\": {\n    type: Number,\n    label: \"Rate\",\n    min: 0\n  },\n  \"enabled\": {\n    type: Boolean,\n    label: \"Enabled\",\n    defaultValue: false\n  },\n  \"validRanges\": {\n    type: Array,\n    optional: true,\n    label: \"Matching Cart Ranges\"\n  },\n  \"validRanges.$\": {\n    type: Object,\n    optional: true\n  },\n  \"validRanges.$.begin\": {\n    type: Number,\n    label: \"Begin\",\n    optional: true\n  },\n  \"validRanges.$.end\": {\n    type: Number,\n    label: \"End\",\n    optional: true\n  },\n  \"validLocales\": {\n    type: Array,\n    optional: true,\n    label: \"Matching Locales\"\n  },\n  \"validLocales.$\": {\n    type: Object,\n    optional: true\n  },\n  \"validLocales.$.origination\": {\n    type: String,\n    label: \"From\",\n    optional: true\n  },\n  \"validLocales.$.destination\": {\n    type: String,\n    label: \"To\",\n    optional: true\n  },\n  \"validLocales.$.deliveryBegin\": {\n    type: SimpleSchema.Integer,\n    label: \"Shipping Est.\",\n    optional: true\n  },\n  \"validLocales.$.deliveryEnd\": {\n    type: SimpleSchema.Integer,\n    label: \"Delivery Est.\",\n    optional: true\n  },\n  \"carrier\": { // kind of denormalizing, useful for having it in shipmentMethod( cart & order)\n    type: String, // Alternatively we can make an extra Schema:ShipmentMethod, that inherits\n    optional: true // ShippingMethod and add the optional carrier field\n  },\n  \"settings\": {\n    type: ShippoShippingMethod,\n    optional: true\n  }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"ShippingMethod\", ShippingMethod);\n\n/**\n * @name ShipmentQuote\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} carrier Name of carrier\n * @property {ShippingMethod} method ShippingMethod\n * @property {Number} rate default value: `0.00`\n */\nexport const ShipmentQuote = new SimpleSchema({\n  carrier: {\n    type: String\n  },\n  method: {\n    type: ShippingMethod\n  },\n  rate: {\n    type: Number,\n    defaultValue: 0.00\n  },\n  shopId: {\n    type: String,\n    optional: true\n  }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"ShipmentQuote\", ShipmentQuote);\n\n/**\n * @name ShipmentItem\n * @memberof schemas\n * @type {SimpleSchema}\n * @summary Populate with order.items that are added to a shipment\n * @property {String} _id Shipment Line Item optional\n * @property {String} productId required\n * @property {String} shopId Shipment Item ShopId optional\n * @property {Number} quantity required\n * @property {String} variantId required\n */\nexport const ShipmentItem = new SimpleSchema({\n  _id: {\n    type: String,\n    label: \"Shipment Line Item\",\n    optional: true,\n    autoValue: schemaIdAutoValue\n  },\n  productId: {\n    type: String,\n    index: 1\n  },\n  shopId: {\n    type: String,\n    index: 1,\n    label: \"Shipment Item ShopId\",\n    optional: true\n  },\n  quantity: {\n    label: \"Quantity\",\n    type: SimpleSchema.Integer,\n    min: 0\n  },\n  variantId: {\n    type: String\n  }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"ShipmentItem\", ShipmentItem);\n\n/**\n * @name ShippingParcel\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} containers optional\n * @property {Number} length optional\n * @property {Number} width optional\n * @property {Number} height optional\n * @property {Number} weight optional\n */\nexport const ShippingParcel = new SimpleSchema({\n  containers: {\n    type: String,\n    optional: true\n  },\n  length: {\n    type: Number,\n    optional: true\n  },\n  width: {\n    type: Number,\n    optional: true\n  },\n  height: {\n    type: Number,\n    optional: true\n  },\n  weight: {\n    type: Number,\n    optional: true\n  }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"ShippingParcel\", ShippingParcel);\n\n/**\n * @name ShippoShipment\n * @summary Specific properties of Shipment for use with Shippo. We don't use\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} transactionId optional\n * @property {String} trackingStatusStatus optional Tracking Status's status\n * @property {String} trackingStatusDate optional\n */\nexport const ShippoShipment = new SimpleSchema({\n  transactionId: {\n    type: String,\n    optional: true\n  },\n  trackingStatusStatus: { // cause tracking_status.status\n    type: String,\n    optional: true\n  },\n  trackingStatusDate: {\n    type: String,\n    optional: true\n  }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"ShippoShipment\", ShippoShipment);\n\n/**\n * @name ShipmentQuotesQueryStatusUsed\n * @todo Should requestStatus be required or not?\n * @memberof schemas\n * @type {SimpleSchema}\n * @summary Status of a query/consumption of a shipping provider's API (e.g Shippo) for shipping quotations.\n * @description Shipping quotations are the costs from different shipping methods like Fedex, DHL etc of\n * shipping one or more items to a particular place in a given amount of time.)\n * @property {String} requestStatus optional, default value: `noRequestsYet`\n * @property {String} shippingProvider optional\n * @property {Number} numOfShippingMethodsFound optional\n * @property {String} message optional\n */\nexport const ShipmentQuotesQueryStatus = new SimpleSchema({\n  requestStatus: {\n    type: String,\n    optional: true,\n    defaultValue: \"noRequestsYet\"\n  },\n  shippingProvider: {\n    type: String,\n    optional: true\n  },\n  numOfShippingMethodsFound: {\n    type: SimpleSchema.Integer,\n    optional: true\n  },\n  message: {\n    type: String,\n    optional: true\n  }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"ShipmentQuotesQueryStatus\", ShipmentQuotesQueryStatus);\n\n/**\n * @name Shipment\n * @summary Used for cart/order shipment tracking\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} _id Shipment ID\n * @property {String} shopId required\n * @property {String} paymentId Payment ID\n * @property {Address} address optional\n * @property {ShippingMethod} shipmentMethod optional\n * @property {ShipmentQuote[]} shipmentQuotes optional\n * @property {ShipmentQuotesQueryStatus} shipmentQuotesQueryStatus optional\n * @property {String} tracking optional\n * @property {ShippingParcel} parcel optional\n * @property {ShipmentItem[]} items optional\n * @property {Workflow} workflow optional\n * @property {Invoice} invoice optional\n * @property {Object[]} transactions optional\n * @property {String} shippingLabelUrl For printable Shipping label\n * @property {String} customsLabelUrl For customs printable label\n * @property {ShippoShipment} shippo For Shippo specific properties\n */\nexport const Shipment = new SimpleSchema({\n  \"_id\": {\n    type: String,\n    label: \"Shipment Id\",\n    autoValue: schemaIdAutoValue\n  },\n  \"shopId\": {\n    type: String\n  },\n  \"paymentId\": {\n    type: String,\n    label: \"Payment Id\",\n    optional: true\n  },\n  \"address\": {\n    type: Address,\n    optional: true\n  },\n  \"shipmentMethod\": {\n    type: ShippingMethod,\n    optional: true\n  },\n  \"shipmentQuotes\": {\n    type: Array,\n    optional: true\n  },\n  \"shipmentQuotes.$\": {\n    type: ShipmentQuote,\n    optional: true\n  },\n  \"shipmentQuotesQueryStatus\": {\n    type: ShipmentQuotesQueryStatus,\n    optional: true,\n    defaultValue: {}\n  },\n  \"tracking\": {\n    type: String,\n    optional: true\n  },\n  \"parcel\": {\n    type: ShippingParcel,\n    optional: true\n  },\n  \"items\": {\n    type: Array,\n    optional: true\n  },\n  \"items.$\": {\n    type: ShipmentItem,\n    optional: true\n  },\n  \"workflow\": {\n    type: Workflow,\n    optional: true,\n    defaultValue: {}\n  },\n  \"invoice\": {\n    type: Invoice,\n    optional: true\n  },\n  \"transactions\": {\n    type: Array,\n    optional: true\n  },\n  \"transactions.$\": {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  \"shippingLabelUrl\": {\n    type: String,\n    optional: true\n  },\n  \"customsLabelUrl\": {\n    type: String,\n    optional: true\n  },\n  \"shippo\": {\n    type: ShippoShipment,\n    optional: true\n  }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"Shipment\", Shipment);\n\n/**\n * @name ShippoShippingProvider Schema\n * @summary Specific properties for use with Shippo.\n * @description We don't use ShippingProvider service* fields because\n * Shippo is on level higher service than simple carrier's ,e.g Fedex api.\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} carrierAccountId optional\n */\nexport const ShippoShippingProvider = new SimpleSchema({\n  carrierAccountId: {\n    type: String,\n    optional: true\n  }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"ShippoShippingProvider\", ShippoShippingProvider);\n\n/**\n * @name ShippingProvider\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} _id optional\n * @property {String} name optional\n * @property {String} label optional\n * @property {Boolean} enabled optional, default value: `true`\n * @property {String} serviceAuth optional\n * @property {String} serviceSecret optional\n * @property {String} serviceUrl optional\n * @property {ShippoShippingProvider} shippoProvider optional\n */\nexport const ShippingProvider = new SimpleSchema({\n  _id: {\n    type: String,\n    label: \"Provider Id\",\n    optional: true,\n    autoValue: schemaIdAutoValue\n  },\n  name: {\n    type: String,\n    label: \"Service Code\",\n    optional: true\n  },\n  label: {\n    type: String,\n    label: \"Public Label\"\n  },\n  enabled: {\n    type: Boolean,\n    defaultValue: true\n  },\n  serviceAuth: {\n    type: String,\n    label: \"Auth\",\n    optional: true\n  },\n  serviceSecret: {\n    type: String,\n    label: \"Secret\",\n    optional: true\n  },\n  serviceUrl: {\n    type: String,\n    label: \"Service URL\",\n    optional: true\n  },\n  shippoProvider: {\n    type: ShippoShippingProvider,\n    optional: true\n  }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"ShippingProvider\", ShippingProvider);\n\n/**\n * @name Shipping\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} _id optional\n * @property {String} shopId required\n * @property {String} name optional\n * @property {ShippingProvider} provider optional\n * @property {ShippingMethod[]} methods optional\n * @property {ShipmentQuote[]} shipmentQuotes optional\n */\nexport const Shipping = new SimpleSchema({\n  \"_id\": {\n    type: String,\n    label: \"Service Id\",\n    optional: true\n  },\n  \"shopId\": {\n    type: String,\n    index: 1,\n    autoValue: shopIdAutoValue,\n    label: \"Shipping ShopId\"\n  },\n  \"name\": {\n    type: String,\n    label: \"Service Name\",\n    optional: true,\n    index: 1\n  },\n  \"provider\": {\n    type: ShippingProvider,\n    label: \"Shipping Provider\"\n  },\n  \"methods\": {\n    type: Array,\n    optional: true,\n    label: \"Shipping Methods\"\n  },\n  \"methods.$\": {\n    type: ShippingMethod\n  },\n  \"shipmentQuotes\": {\n    type: Array,\n    optional: true,\n    label: \"Quoted Methods\"\n  },\n  \"shipmentQuotes.$\": {\n    type: ShipmentQuote\n  }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"Shipping\", Shipping);\n\n/**\n * @name ShippingPackage\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} settings.name default value: `Flat Rate Service`\n */\nexport const ShippingPackageConfig = PackageConfig.clone().extend({\n  // Remove blackbox: true from settings obj\n  \"settings\": {\n    type: Object,\n    optional: true,\n    blackbox: false,\n    defaultValue: {}\n  },\n  \"settings.name\": {\n    type: String,\n    defaultValue: \"Flat Rate Service\"\n  }\n});\n\nregisterSchema(\"ShippingPackageConfig\", ShippingPackageConfig);\n"]},"sourceType":"script","hash":"42b96b19c71bb743ba04847a8408d496f348a1b4"}
