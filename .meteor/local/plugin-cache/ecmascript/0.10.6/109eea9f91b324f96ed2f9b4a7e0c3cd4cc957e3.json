{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/included/search-mongo/server/jobs/buildSearchCollections.js","filename":"imports/plugins/included/search-mongo/server/jobs/buildSearchCollections.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/included/search-mongo/server/jobs/buildSearchCollections.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/included/search-mongo/server/jobs/buildSearchCollections.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/included/search-mongo/server/jobs/buildSearchCollections.js"}},"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Job;\nmodule.watch(require(\"../../../../core/job-collection/lib\"), {\n  Job(v) {\n    Job = v;\n  }\n\n}, 1);\nlet Jobs, ProductSearch, Orders, OrderSearch, AccountSearch;\nmodule.watch(require(\"../../../../../../lib/collections\"), {\n  Jobs(v) {\n    Jobs = v;\n  },\n\n  ProductSearch(v) {\n    ProductSearch = v;\n  },\n\n  Orders(v) {\n    Orders = v;\n  },\n\n  OrderSearch(v) {\n    OrderSearch = v;\n  },\n\n  AccountSearch(v) {\n    AccountSearch = v;\n  }\n\n}, 2);\nlet Hooks, Logger;\nmodule.watch(require(\"../../../../../../server/api\"), {\n  Hooks(v) {\n    Hooks = v;\n  },\n\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 3);\nlet buildAccountSearch, buildEmptyProductSearch, buildOrderSearch, buildProductSearch, rebuildProductSearchIndex;\nmodule.watch(require(\"../methods/\"), {\n  buildAccountSearch(v) {\n    buildAccountSearch = v;\n  },\n\n  buildEmptyProductSearch(v) {\n    buildEmptyProductSearch = v;\n  },\n\n  buildOrderSearch(v) {\n    buildOrderSearch = v;\n  },\n\n  buildProductSearch(v) {\n    buildProductSearch = v;\n  },\n\n  rebuildProductSearchIndex(v) {\n    rebuildProductSearchIndex = v;\n  }\n\n}, 4);\n\nfunction addBuildProductSearchCollection() {\n  const productSearchCount = ProductSearch.find({}).count();\n\n  if (!productSearchCount) {\n    Logger.debug(\"No ProductSearch records found. Adding build ProductSearch Collection to jobs\");\n    new Job(Jobs, \"product/buildSearchCollection\", {}).priority(\"normal\").retry({\n      retries: 5,\n      wait: 60000,\n      backoff: \"exponential\"\n    }).save({\n      cancelRepeats: true\n    });\n  } else {\n    Logger.debug(\"ProductSearch collection already exists, not building\");\n  }\n}\n\nfunction addBuildOrderSearchCollection() {\n  const orderSearchCount = OrderSearch.find({}).count();\n  const orderCount = Orders.find({}).count();\n\n  if (!orderSearchCount && orderCount) {\n    Logger.debug(\"No OrderSearch records found. Adding build OrderSearch Collection to jobs\");\n    new Job(Jobs, \"order/buildSearchCollection\", {}).priority(\"normal\").retry({\n      retries: 5,\n      wait: 60000,\n      backoff: \"exponential\"\n    }).save({\n      cancelRepeats: true\n    });\n  } else {\n    Logger.debug(\"OrderSearch collection already exists (or no orders), not building\");\n  }\n}\n\nfunction addBuildAccountSearchCollection() {\n  const accountSearchCount = AccountSearch.find({}).count();\n\n  if (!accountSearchCount) {\n    Logger.debug(\"No AccountSearch records found. Adding build AccountSearch Collection to jobs\");\n    new Job(Jobs, \"account/buildSearchCollection\", {}).priority(\"normal\").retry({\n      retries: 5,\n      wait: 60000,\n      backoff: \"exponential\"\n    }).save({\n      cancelRepeats: true\n    });\n  } else {\n    Logger.debug(\"AccountSearch collection already exists, not building\");\n  }\n}\n\nHooks.Events.add(\"afterCoreInit\", () => {\n  if (!Meteor.isAppTest) {\n    buildEmptyProductSearch();\n    addBuildProductSearchCollection();\n    addBuildOrderSearchCollection();\n    addBuildAccountSearchCollection();\n  }\n});\nmodule.exportDefault(function () {\n  Jobs.processJobs(\"product/buildSearchCollection\", {\n    pollInterval: 30 * 1000,\n    workTimeout: 180 * 1000\n  }, (job, callback) => {\n    Logger.debug(\"(re)build ProductSearch collection running\");\n    buildProductSearch(error => {\n      if (error) {\n        job.done(error.toString(), {\n          repeatId: true\n        });\n        callback();\n      } else {\n        const success = \"ProductSearch collection (re)built successfully.\";\n        Logger.debug(success);\n        job.done(success, {\n          repeatId: true\n        });\n        callback();\n      }\n    });\n  });\n  Jobs.processJobs(\"product/buildSearchIndex\", {\n    pollInterval: 30 * 1000,\n    workTimeout: 180 * 1000\n  }, (job, callback) => {\n    Logger.debug(\"(re)build ProductSearch index running\");\n    rebuildProductSearchIndex(error => {\n      if (error) {\n        job.done(error.toString(), {\n          repeatId: true\n        });\n        callback();\n      } else {\n        const success = \"ProductSearch Index (re)built successfully.\";\n        Logger.debug(success);\n        job.done(success, {\n          repeatId: true\n        });\n        callback();\n      }\n    });\n  });\n  Jobs.processJobs(\"order/buildSearchCollection\", {\n    pollInterval: 30 * 1000,\n    workTimeout: 180 * 1000\n  }, (job, callback) => {\n    Logger.debug(\"(re)build OrderSearch index running\");\n    buildOrderSearch(error => {\n      if (error) {\n        job.done(error.toString(), {\n          repeatId: true\n        });\n        callback();\n      } else {\n        const success = \"OrderSearch collection (re)built successfully.\";\n        Logger.debug(success);\n        job.done(success, {\n          repeatId: true\n        });\n        callback();\n      }\n    });\n  });\n  Jobs.processJobs(\"account/buildSearchCollection\", {\n    pollInterval: 30 * 1000,\n    workTimeout: 180 * 1000\n  }, (job, callback) => {\n    Logger.debug(\"(re)build AccountSearch index running\");\n    buildAccountSearch(error => {\n      if (error) {\n        job.done(error.toString(), {\n          repeatId: true\n        });\n        callback();\n      } else {\n        const success = \"AccountSearch collection (re)built successfully.\";\n        Logger.debug(success);\n        job.done(success, {\n          repeatId: true\n        });\n        callback();\n      }\n    });\n  });\n});","map":{"version":3,"sources":["imports/plugins/included/search-mongo/server/jobs/buildSearchCollections.js"],"names":["Meteor","module","watch","require","v","Job","Jobs","ProductSearch","Orders","OrderSearch","AccountSearch","Hooks","Logger","buildAccountSearch","buildEmptyProductSearch","buildOrderSearch","buildProductSearch","rebuildProductSearchIndex","addBuildProductSearchCollection","productSearchCount","find","count","debug","priority","retry","retries","wait","backoff","save","cancelRepeats","addBuildOrderSearchCollection","orderSearchCount","orderCount","addBuildAccountSearchCollection","accountSearchCount","Events","add","isAppTest","exportDefault","processJobs","pollInterval","workTimeout","job","callback","error","done","toString","repeatId","success"],"mappings":"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","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Job } from \"/imports/plugins/core/job-collection/lib\";\nimport { Jobs, ProductSearch, Orders, OrderSearch, AccountSearch } from \"/lib/collections\";\nimport { Hooks, Logger } from \"/server/api\";\nimport {\n  buildAccountSearch,\n  buildEmptyProductSearch,\n  buildOrderSearch,\n  buildProductSearch,\n  rebuildProductSearchIndex\n} from \"../methods/\";\n\n\nfunction addBuildProductSearchCollection() {\n  const productSearchCount = ProductSearch.find({}).count();\n  if (!productSearchCount) {\n    Logger.debug(\"No ProductSearch records found. Adding build ProductSearch Collection to jobs\");\n    new Job(Jobs, \"product/buildSearchCollection\", {})\n      .priority(\"normal\")\n      .retry({\n        retries: 5,\n        wait: 60000,\n        backoff: \"exponential\"\n      })\n      .save({\n        cancelRepeats: true\n      });\n  } else {\n    Logger.debug(\"ProductSearch collection already exists, not building\");\n  }\n}\n\nfunction addBuildOrderSearchCollection() {\n  const orderSearchCount = OrderSearch.find({}).count();\n  const orderCount = Orders.find({}).count();\n  if (!orderSearchCount && orderCount) {\n    Logger.debug(\"No OrderSearch records found. Adding build OrderSearch Collection to jobs\");\n    new Job(Jobs, \"order/buildSearchCollection\", {})\n      .priority(\"normal\")\n      .retry({\n        retries: 5,\n        wait: 60000,\n        backoff: \"exponential\"\n      })\n      .save({\n        cancelRepeats: true\n      });\n  } else {\n    Logger.debug(\"OrderSearch collection already exists (or no orders), not building\");\n  }\n}\n\nfunction addBuildAccountSearchCollection() {\n  const accountSearchCount = AccountSearch.find({}).count();\n  if (!accountSearchCount) {\n    Logger.debug(\"No AccountSearch records found. Adding build AccountSearch Collection to jobs\");\n    new Job(Jobs, \"account/buildSearchCollection\", {})\n      .priority(\"normal\")\n      .retry({\n        retries: 5,\n        wait: 60000,\n        backoff: \"exponential\"\n      })\n      .save({\n        cancelRepeats: true\n      });\n  } else {\n    Logger.debug(\"AccountSearch collection already exists, not building\");\n  }\n}\n\nHooks.Events.add(\"afterCoreInit\", () => {\n  if (!Meteor.isAppTest) {\n    buildEmptyProductSearch();\n    addBuildProductSearchCollection();\n    addBuildOrderSearchCollection();\n    addBuildAccountSearchCollection();\n  }\n});\n\n\nexport default function () {\n  Jobs.processJobs(\n    \"product/buildSearchCollection\",\n    {\n      pollInterval: 30 * 1000,\n      workTimeout: 180 * 1000\n    },\n    (job, callback) => {\n      Logger.debug(\"(re)build ProductSearch collection running\");\n      buildProductSearch((error) => {\n        if (error) {\n          job.done(error.toString(), { repeatId: true });\n          callback();\n        } else {\n          const success = \"ProductSearch collection (re)built successfully.\";\n          Logger.debug(success);\n          job.done(success, { repeatId: true });\n          callback();\n        }\n      });\n    }\n  );\n\n  Jobs.processJobs(\n    \"product/buildSearchIndex\",\n    {\n      pollInterval: 30 * 1000,\n      workTimeout: 180 * 1000\n    },\n    (job, callback) => {\n      Logger.debug(\"(re)build ProductSearch index running\");\n      rebuildProductSearchIndex((error) => {\n        if (error) {\n          job.done(error.toString(), { repeatId: true });\n          callback();\n        } else {\n          const success = \"ProductSearch Index (re)built successfully.\";\n          Logger.debug(success);\n          job.done(success, { repeatId: true });\n          callback();\n        }\n      });\n    }\n  );\n\n  Jobs.processJobs(\n    \"order/buildSearchCollection\",\n    {\n      pollInterval: 30 * 1000,\n      workTimeout: 180 * 1000\n    },\n    (job, callback) => {\n      Logger.debug(\"(re)build OrderSearch index running\");\n      buildOrderSearch((error) => {\n        if (error) {\n          job.done(error.toString(), { repeatId: true });\n          callback();\n        } else {\n          const success = \"OrderSearch collection (re)built successfully.\";\n          Logger.debug(success);\n          job.done(success, { repeatId: true });\n          callback();\n        }\n      });\n    }\n  );\n\n  Jobs.processJobs(\n    \"account/buildSearchCollection\",\n    {\n      pollInterval: 30 * 1000,\n      workTimeout: 180 * 1000\n    },\n    (job, callback) => {\n      Logger.debug(\"(re)build AccountSearch index running\");\n      buildAccountSearch((error) => {\n        if (error) {\n          job.done(error.toString(), { repeatId: true });\n          callback();\n        } else {\n          const success = \"AccountSearch collection (re)built successfully.\";\n          Logger.debug(success);\n          job.done(success, { repeatId: true });\n          callback();\n        }\n      });\n    }\n  );\n}\n"]},"sourceType":"script","hash":"109eea9f91b324f96ed2f9b4a7e0c3cd4cc957e3"}
