{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/included/notifications/server/methods/notifications.js","filename":"imports/plugins/included/notifications/server/methods/notifications.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/included/notifications/server/methods/notifications.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/included/notifications/server/methods/notifications.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/included/notifications/server/methods/notifications.js"}},"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet check, Match;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  },\n\n  Match(v) {\n    Match = v;\n  }\n\n}, 1);\nlet Reaction, Logger;\nmodule.watch(require(\"../../../../../../server/api\"), {\n  Reaction(v) {\n    Reaction = v;\n  },\n\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 2);\nlet Notifications, Packages;\nmodule.watch(require(\"../../../../../../lib/collections\"), {\n  Notifications(v) {\n    Notifications = v;\n  },\n\n  Packages(v) {\n    Packages = v;\n  }\n\n}, 3);\n\n/**\n * @file Methods for Notifications. Run these methods using `Meteor.call()`.\n *\n *\n * @namespace Methods/Notification\n*/\nMeteor.methods({\n  /**\n  * @name notification/send\n  * @memberof Methods/Notification\n  * @method\n  * @summary This send a notification to a user\n  * @param {String} userId - The user\n  * @param {String} type - The type of Notification\n  * @param {String} url - url link\n  * @param {Boolean} sms - sms enabled check.\n  * @param {String} details - details of the Notification\n  * @return {Object} returns result\n  */\n  \"notification/send\"(userId, type, url, sms, details) {\n    check(userId, String);\n    check(type, String);\n    check(sms, Boolean);\n    check(details, Match.OptionalOrNull(String));\n    check(url, String);\n    const values = {};\n    const types = {\n      orderCanceled: \"Your order was canceled.\",\n      newOrder: \"Your order was accepted\",\n      forAdmin: \"You have a new order.\",\n      orderDelivered: \"Your order has been delivered.\",\n      orderProcessing: \"Your order is being processed.\",\n      orderShipped: \"Your order has been shipped.\"\n    };\n\n    if (userId && type && url) {\n      values.type = type;\n      values.to = userId;\n      values.url = url;\n      values.message = types[type];\n      values.hasDetails = false;\n\n      if (details) {\n        values.hasDetails = true;\n        values.details = details;\n      }\n    }\n\n    if (sms) {\n      const result = Packages.findOne({\n        name: \"reaction-sms\",\n        shopId: Reaction.getShopId()\n      });\n\n      if (result && result.enabled) {\n        Meteor.call(\"sms/send\", values.message, userId, Reaction.getShopId(), error => {\n          if (error) {\n            Logger.warn(\"Error: error occured while sending sms\", error);\n          }\n        });\n      } else {\n        Logger.debug(\"Sms is not enabled\");\n      }\n    }\n\n    Logger.debug(`Sending notification to ${userId}`);\n    return Notifications.insert(values);\n  },\n\n  /**\n   * @name notification/markOneAsRead\n   * @memberof Methods/Notification\n   * @method\n   * @summary This marks all user's notification as ready\n   * @param {String} id - The notification id\n   * @return {Object} returns cursor\n   */\n  \"notification/markOneAsRead\": id => {\n    check(id, String);\n    return Notifications.update({\n      _id: id\n    }, {\n      $set: {\n        status: \"read\"\n      }\n    });\n  },\n\n  /**\n   * @name notification/delete\n   * @memberof Methods/Notification\n   * @method\n   * @summary This deletes a notification\n   * @param {String} id - The notification id\n   * @return {Object} return cursor\n   */\n  \"notification/delete\": id => {\n    check(id, String);\n    return Notifications.remove({\n      _id: id\n    });\n  }\n});","map":{"version":3,"sources":["imports/plugins/included/notifications/server/methods/notifications.js"],"names":["Meteor","module","watch","require","v","check","Match","Reaction","Logger","Notifications","Packages","methods","userId","type","url","sms","details","String","Boolean","OptionalOrNull","values","types","orderCanceled","newOrder","forAdmin","orderDelivered","orderProcessing","orderShipped","to","message","hasDetails","result","findOne","name","shopId","getShopId","enabled","call","error","warn","debug","insert","id","update","_id","$set","status","remove"],"mappings":"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","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { check, Match } from \"meteor/check\";\nimport { Reaction, Logger } from \"/server/api\";\nimport { Notifications, Packages } from \"/lib/collections\";\n\n/**\n * @file Methods for Notifications. Run these methods using `Meteor.call()`.\n *\n *\n * @namespace Methods/Notification\n*/\nMeteor.methods({\n  /**\n  * @name notification/send\n  * @memberof Methods/Notification\n  * @method\n  * @summary This send a notification to a user\n  * @param {String} userId - The user\n  * @param {String} type - The type of Notification\n  * @param {String} url - url link\n  * @param {Boolean} sms - sms enabled check.\n  * @param {String} details - details of the Notification\n  * @return {Object} returns result\n  */\n  \"notification/send\"(userId, type, url, sms, details) {\n    check(userId, String);\n    check(type, String);\n    check(sms, Boolean);\n    check(details, Match.OptionalOrNull(String));\n    check(url, String);\n\n    const values = {};\n    const types = {\n      orderCanceled: \"Your order was canceled.\",\n      newOrder: \"Your order was accepted\",\n      forAdmin: \"You have a new order.\",\n      orderDelivered: \"Your order has been delivered.\",\n      orderProcessing: \"Your order is being processed.\",\n      orderShipped: \"Your order has been shipped.\"\n    };\n\n    if (userId && type && url) {\n      values.type = type;\n      values.to = userId;\n      values.url = url;\n      values.message = types[type];\n      values.hasDetails = false;\n      if (details) {\n        values.hasDetails = true;\n        values.details = details;\n      }\n    }\n\n    if (sms) {\n      const result = Packages.findOne({ name: \"reaction-sms\", shopId: Reaction.getShopId() });\n      if (result && result.enabled) {\n        Meteor.call(\"sms/send\", values.message, userId, Reaction.getShopId(), (error) => {\n          if (error) {\n            Logger.warn(\"Error: error occured while sending sms\", error);\n          }\n        });\n      } else {\n        Logger.debug(\"Sms is not enabled\");\n      }\n    }\n    Logger.debug(`Sending notification to ${userId}`);\n    return Notifications.insert(values);\n  },\n\n  /**\n   * @name notification/markOneAsRead\n   * @memberof Methods/Notification\n   * @method\n   * @summary This marks all user's notification as ready\n   * @param {String} id - The notification id\n   * @return {Object} returns cursor\n   */\n  \"notification/markOneAsRead\": (id) => {\n    check(id, String);\n\n    return Notifications.update({ _id: id }, {\n      $set: {\n        status: \"read\"\n      }\n    });\n  },\n\n  /**\n   * @name notification/delete\n   * @memberof Methods/Notification\n   * @method\n   * @summary This deletes a notification\n   * @param {String} id - The notification id\n   * @return {Object} return cursor\n   */\n  \"notification/delete\": (id) => {\n    check(id, String);\n\n    return Notifications.remove({ _id: id });\n  }\n});\n"]},"sourceType":"script","hash":"39238c3d6a124d23884ac73e8e701b7fcd37fb4f"}
