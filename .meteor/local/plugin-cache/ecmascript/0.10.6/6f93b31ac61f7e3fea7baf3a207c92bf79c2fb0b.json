{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"server/api/core/groups.js","filename":"server/api/core/groups.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"server/api/core/groups.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"server/api/core/groups.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/api/core/groups.js"}},"code":"module.export({\n  createGroups: () => createGroups\n});\n\nlet _uniq;\n\nmodule.watch(require(\"lodash/uniq\"), {\n  default(v) {\n    _uniq = v;\n  }\n\n}, 0);\nlet Roles;\nmodule.watch(require(\"meteor/alanning:roles\"), {\n  Roles(v) {\n    Roles = v;\n  }\n\n}, 1);\nlet Logger, Reaction;\nmodule.watch(require(\"./..\"), {\n  Logger(v) {\n    Logger = v;\n  },\n\n  Reaction(v) {\n    Reaction = v;\n  }\n\n}, 2);\nlet Shops, Groups;\nmodule.watch(require(\"../../../lib/collections\"), {\n  Shops(v) {\n    Shops = v;\n  },\n\n  Groups(v) {\n    Groups = v;\n  }\n\n}, 3);\n\nfunction createGroups(options = {}) {\n  const {\n    shopId\n  } = options;\n  let {\n    roles\n  } = options;\n  const allGroups = Groups.find({}).fetch();\n  const query = {};\n\n  if (!roles) {\n    roles = getDefaultGroupRoles();\n  }\n\n  if (shopId) {\n    query._id = shopId;\n  }\n\n  const shops = Shops.find(query).fetch();\n\n  if (shops && shops.length) {\n    shops.forEach(shop => createGroupsForShop(shop));\n  }\n\n  function createGroupsForShop(shop) {\n    Object.keys(roles).forEach(groupKey => {\n      const groupExists = allGroups.find(grp => grp.slug === groupKey && grp.shopId === shop._id);\n\n      if (!groupExists) {\n        // create group only if it doesn't exist before\n        // get roles from the default groups of the primary shop; we try to use this first before using default roles\n        const primaryShopGroup = allGroups.find(grp => grp.slug === groupKey && grp.shopId === Reaction.getPrimaryShopId());\n        Logger.debug(`creating group ${groupKey} for shop ${shop.name}`);\n        Groups.insert({\n          name: groupKey,\n          slug: groupKey,\n          permissions: primaryShopGroup && primaryShopGroup.permissions || roles[groupKey],\n          shopId: shop._id\n        });\n      }\n    });\n  }\n}\n\n/**\n * @method getDefaultGroupRoles\n * @private\n * @method\n * @memberof Core\n * @summary Generates default groups: Get all defined roles from the DB except \"anonymous\"\n * because that gets removed from a user on register if it's not removed,\n * it causes mismatch between roles in user (i.e Meteor.user().roles[shopId]) vs that in\n * the user's group (Group.find(usergroup).permissions)\n * @return {object} roles - object key-value pair containing the default groups and roles for the groups\n */\nfunction getDefaultGroupRoles() {\n  let ownerRoles = Roles.getAllRoles().fetch().map(role => role.name).filter(role => role !== \"anonymous\"); // see comment above\n  // Join all other roles with package roles for owner. Owner should have all roles\n  // this is needed because of default roles defined in the app that are not in Roles.getAllRoles\n\n  ownerRoles = ownerRoles.concat(Reaction.defaultCustomerRoles);\n  ownerRoles = _uniq(ownerRoles); // we're making a Shop Manager default group that have all roles except the owner role\n\n  const shopManagerRoles = ownerRoles.filter(role => role !== \"owner\" && role !== \"admin\");\n  shopManagerRoles.push(\"shopSettings\");\n  const roles = {\n    \"shop manager\": shopManagerRoles,\n    \"customer\": Reaction.defaultCustomerRoles,\n    \"guest\": Reaction.defaultVisitorRoles,\n    \"owner\": ownerRoles\n  };\n  return roles;\n}","map":{"version":3,"sources":["server/api/core/groups.js"],"names":["module","export","createGroups","_uniq","watch","require","default","v","Roles","Logger","Reaction","Shops","Groups","options","shopId","roles","allGroups","find","fetch","query","getDefaultGroupRoles","_id","shops","length","forEach","shop","createGroupsForShop","Object","keys","groupKey","groupExists","grp","slug","primaryShopGroup","getPrimaryShopId","debug","name","insert","permissions","ownerRoles","getAllRoles","map","role","filter","concat","defaultCustomerRoles","shopManagerRoles","push","defaultVisitorRoles"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport { Roles } from \"meteor/alanning:roles\";\nimport { Logger, Reaction } from \"/server/api\";\nimport { Shops, Groups } from \"/lib/collections\";\n\n/**\n * @name createGroups\n * @method\n * @memberof Core\n * @summary creates groups for shops\n * @param {object} options -\n * @param {string} options.shopId - the id of shop to create the group for. Not passing a shopId creates\n * the group(s) for all available shops\n * @param {object} options.roles - key-value pair representing the group slug (key) and\n * array of roles for the group (value)\n * @return {null}\n */\nexport function createGroups(options = {}) {\n  const { shopId } = options;\n  let { roles } = options;\n  const allGroups = Groups.find({}).fetch();\n  const query = {};\n\n  if (!roles) {\n    roles = getDefaultGroupRoles();\n  }\n\n  if (shopId) {\n    query._id = shopId;\n  }\n\n  const shops = Shops.find(query).fetch();\n\n  if (shops && shops.length) {\n    shops.forEach((shop) => createGroupsForShop(shop));\n  }\n  function createGroupsForShop(shop) {\n    Object.keys(roles).forEach((groupKey) => {\n      const groupExists = allGroups.find((grp) => grp.slug === groupKey && grp.shopId === shop._id);\n      if (!groupExists) { // create group only if it doesn't exist before\n        // get roles from the default groups of the primary shop; we try to use this first before using default roles\n        const primaryShopGroup = allGroups.find((grp) => grp.slug === groupKey && grp.shopId === Reaction.getPrimaryShopId());\n        Logger.debug(`creating group ${groupKey} for shop ${shop.name}`);\n        Groups.insert({\n          name: groupKey,\n          slug: groupKey,\n          permissions: (primaryShopGroup && primaryShopGroup.permissions) || roles[groupKey],\n          shopId: shop._id\n        });\n      }\n    });\n  }\n}\n\n/**\n * @method getDefaultGroupRoles\n * @private\n * @method\n * @memberof Core\n * @summary Generates default groups: Get all defined roles from the DB except \"anonymous\"\n * because that gets removed from a user on register if it's not removed,\n * it causes mismatch between roles in user (i.e Meteor.user().roles[shopId]) vs that in\n * the user's group (Group.find(usergroup).permissions)\n * @return {object} roles - object key-value pair containing the default groups and roles for the groups\n */\nfunction getDefaultGroupRoles() {\n  let ownerRoles = Roles\n    .getAllRoles().fetch()\n    .map((role) => role.name)\n    .filter((role) => role !== \"anonymous\"); // see comment above\n\n  // Join all other roles with package roles for owner. Owner should have all roles\n  // this is needed because of default roles defined in the app that are not in Roles.getAllRoles\n  ownerRoles = ownerRoles.concat(Reaction.defaultCustomerRoles);\n  ownerRoles = _.uniq(ownerRoles);\n\n  // we're making a Shop Manager default group that have all roles except the owner role\n  const shopManagerRoles = ownerRoles.filter((role) => role !== \"owner\" && role !== \"admin\");\n  shopManagerRoles.push(\"shopSettings\");\n\n  const roles = {\n    \"shop manager\": shopManagerRoles,\n    \"customer\": Reaction.defaultCustomerRoles,\n    \"guest\": Reaction.defaultVisitorRoles,\n    \"owner\": ownerRoles\n  };\n\n  return roles;\n}\n"]},"sourceType":"script","hash":"6f93b31ac61f7e3fea7baf3a207c92bf79c2fb0b"}
