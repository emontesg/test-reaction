{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/included/payments-paypal/server/methods/payflowproMethods.js","filename":"imports/plugins/included/payments-paypal/server/methods/payflowproMethods.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/included/payments-paypal/server/methods/payflowproMethods.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/included/payments-paypal/server/methods/payflowproMethods.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/included/payments-paypal/server/methods/payflowproMethods.js"}},"code":"module.export({\n  paymentSubmit: () => paymentSubmit,\n  paymentCapture: () => paymentCapture,\n  createRefund: () => createRefund,\n  listRefunds: () => listRefunds,\n  getSettings: () => getSettings\n});\nlet Logger;\nmodule.watch(require(\"../../../../../../server/api\"), {\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 0);\nlet PaymentMethodArgument;\nmodule.watch(require(\"../../../../../../lib/collections/schemas\"), {\n  PaymentMethodArgument(v) {\n    PaymentMethodArgument = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet PayPal;\nmodule.watch(require(\"../../lib/api\"), {\n  PayPal(v) {\n    PayPal = v;\n  }\n\n}, 3);\nlet PayflowproApi;\nmodule.watch(require(\"./payflowproApi\"), {\n  PayflowproApi(v) {\n    PayflowproApi = v;\n  }\n\n}, 4);\n\nfunction paymentSubmit(transactionType, cardData, paymentData) {\n  check(transactionType, String);\n  check(cardData, Object);\n  check(paymentData, Object);\n  const paymentSubmitDetails = {\n    transactionType,\n    cardData,\n    paymentData\n  };\n  let result;\n\n  try {\n    const refundResult = PayflowproApi.apiCall.paymentSubmit(paymentSubmitDetails);\n    Logger.debug(refundResult);\n    result = refundResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot Submit Payment: ${error.message}`\n    };\n    Logger.fatal(\"PayPal PayFlow call failed, payment was not submitted\");\n  }\n\n  return result;\n}\n\nfunction paymentCapture(paymentMethod) {\n  // Call both check and validate because by calling `clean`, the audit pkg\n  // thinks that we haven't checked paymentMethod arg\n  check(paymentMethod, Object);\n  PaymentMethodArgument.validate(PaymentMethodArgument.clean(paymentMethod));\n  const paymentCaptureDetails = {\n    authorizationId: paymentMethod.metadata.authorizationId,\n    amount: paymentMethod.amount\n  };\n  let result;\n\n  try {\n    const refundResult = PayflowproApi.apiCall.captureCharge(paymentCaptureDetails);\n    Logger.debug(refundResult);\n    result = refundResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot Capture Payment: ${error.message}`\n    };\n    Logger.fatal(\"PayPal PayFlow call failed, payment was not captured\");\n  }\n\n  return result;\n}\n\nfunction createRefund(paymentMethod, amount) {\n  check(amount, Number); // Call both check and validate because by calling `clean`, the audit pkg\n  // thinks that we haven't checked paymentMethod arg\n\n  check(paymentMethod, Object);\n  PaymentMethodArgument.validate(PaymentMethodArgument.clean(paymentMethod));\n  const refundDetails = {\n    captureId: paymentMethod.metadata.captureId,\n    amount\n  };\n  let result;\n\n  try {\n    const refundResult = PayflowproApi.apiCall.createRefund(refundDetails);\n    Logger.debug(refundResult);\n    result = refundResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot issue refund: ${error.message}`\n    };\n    Logger.fatal(\"PayPal PayFlow call failed, refund was not issued\");\n  }\n\n  return result;\n}\n\nfunction listRefunds(paymentMethod) {\n  // Call both check and validate because by calling `clean`, the audit pkg\n  // thinks that we haven't checked paymentMethod arg\n  check(paymentMethod, Object);\n  PaymentMethodArgument.validate(PaymentMethodArgument.clean(paymentMethod));\n  const refundListDetails = {\n    transactionId: paymentMethod.metadata.transactionId\n  };\n  let result;\n\n  try {\n    const refundResult = PayflowproApi.apiCall.listRefunds(refundListDetails);\n    Logger.debug(refundResult);\n    result = refundResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot issue refund: ${error.message}`\n    };\n    Logger.fatal(\"PayPal PayFlow call failed, refund was not issued\");\n  }\n\n  return result;\n}\n\nfunction getSettings() {\n  const settings = PayPal.payflowAccountOptions();\n  const payflowSettings = {\n    mode: settings.mode,\n    enabled: settings.enabled\n  };\n  return payflowSettings;\n}","map":{"version":3,"sources":["imports/plugins/included/payments-paypal/server/methods/payflowproMethods.js"],"names":["module","export","paymentSubmit","paymentCapture","createRefund","listRefunds","getSettings","Logger","watch","require","v","PaymentMethodArgument","check","PayPal","PayflowproApi","transactionType","cardData","paymentData","String","Object","paymentSubmitDetails","result","refundResult","apiCall","debug","error","saved","message","fatal","paymentMethod","validate","clean","paymentCaptureDetails","authorizationId","metadata","amount","captureCharge","Number","refundDetails","captureId","refundListDetails","transactionId","settings","payflowAccountOptions","payflowSettings","mode","enabled"],"mappings":"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","sourcesContent":["import { Logger } from \"/server/api\";\nimport { PaymentMethodArgument } from \"/lib/collections/schemas\";\nimport { check } from \"meteor/check\";\nimport { PayPal } from \"../../lib/api\"; // PayPal is the reaction api\nimport { PayflowproApi } from \"./payflowproApi\";\n\n/**\n * payflowpro/payment/submit\n * Create and Submit a PayPal PayFlow transaction\n * @param  {Object} transactionType transactionType\n * @param  {Object} cardData cardData object\n * @param  {Object} paymentData paymentData object\n * @return {Object} results from PayPal payment create\n */\nexport function paymentSubmit(transactionType, cardData, paymentData) {\n  check(transactionType, String);\n  check(cardData, Object);\n  check(paymentData, Object);\n\n  const paymentSubmitDetails = {\n    transactionType,\n    cardData,\n    paymentData\n  };\n\n  let result;\n\n  try {\n    const refundResult = PayflowproApi.apiCall.paymentSubmit(paymentSubmitDetails);\n    Logger.debug(refundResult);\n    result = refundResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot Submit Payment: ${error.message}`\n    };\n    Logger.fatal(\"PayPal PayFlow call failed, payment was not submitted\");\n  }\n\n  return result;\n}\n\n\n/**\n * payflowpro/payment/capture\n * Capture an authorized PayPal PayFlow transaction\n * @param  {Object} paymentMethod A PaymentMethod object\n * @return {Object} results from PayPal normalized\n */\nexport function paymentCapture(paymentMethod) {\n  // Call both check and validate because by calling `clean`, the audit pkg\n  // thinks that we haven't checked paymentMethod arg\n  check(paymentMethod, Object);\n  PaymentMethodArgument.validate(PaymentMethodArgument.clean(paymentMethod));\n\n  const paymentCaptureDetails = {\n    authorizationId: paymentMethod.metadata.authorizationId,\n    amount: paymentMethod.amount\n  };\n\n  let result;\n\n  try {\n    const refundResult = PayflowproApi.apiCall.captureCharge(paymentCaptureDetails);\n    Logger.debug(refundResult);\n    result = refundResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot Capture Payment: ${error.message}`\n    };\n    Logger.fatal(\"PayPal PayFlow call failed, payment was not captured\");\n  }\n\n  return result;\n}\n\n\n/**\n * createRefund\n * Refund PayPal PayFlow payment\n * @param {Object} paymentMethod - Object containing everything about the transaction to be settled\n * @param {Number} amount - Amount to be refunded if not the entire amount\n * @return {Object} results - Object containing the results of the transaction\n */\nexport function createRefund(paymentMethod, amount) {\n  check(amount, Number);\n\n  // Call both check and validate because by calling `clean`, the audit pkg\n  // thinks that we haven't checked paymentMethod arg\n  check(paymentMethod, Object);\n  PaymentMethodArgument.validate(PaymentMethodArgument.clean(paymentMethod));\n\n  const refundDetails = {\n    captureId: paymentMethod.metadata.captureId,\n    amount\n  };\n\n  let result;\n\n  try {\n    const refundResult = PayflowproApi.apiCall.createRefund(refundDetails);\n    Logger.debug(refundResult);\n    result = refundResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot issue refund: ${error.message}`\n    };\n    Logger.fatal(\"PayPal PayFlow call failed, refund was not issued\");\n  }\n\n  return result;\n}\n\n\n/**\n * listRefunds\n * List all refunds for a PayPal PayFlow transaction\n * https://developers.braintreepayments.com/reference/request/transaction/find/node\n * @param {Object} paymentMethod - Object containing everything about the transaction to be settled\n * @return {Array} results - An array of refund objects for display in admin\n */\nexport function listRefunds(paymentMethod) {\n  // Call both check and validate because by calling `clean`, the audit pkg\n  // thinks that we haven't checked paymentMethod arg\n  check(paymentMethod, Object);\n  PaymentMethodArgument.validate(PaymentMethodArgument.clean(paymentMethod));\n\n  const refundListDetails = {\n    transactionId: paymentMethod.metadata.transactionId\n  };\n\n  let result;\n\n  try {\n    const refundResult = PayflowproApi.apiCall.listRefunds(refundListDetails);\n    Logger.debug(refundResult);\n    result = refundResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot issue refund: ${error.message}`\n    };\n    Logger.fatal(\"PayPal PayFlow call failed, refund was not issued\");\n  }\n\n  return result;\n}\n\n\nexport function getSettings() {\n  const settings = PayPal.payflowAccountOptions();\n  const payflowSettings = {\n    mode: settings.mode,\n    enabled: settings.enabled\n  };\n  return payflowSettings;\n}\n"]},"sourceType":"script","hash":"e8ce329243e2ad9192652cf6e758c701a9bca636"}
