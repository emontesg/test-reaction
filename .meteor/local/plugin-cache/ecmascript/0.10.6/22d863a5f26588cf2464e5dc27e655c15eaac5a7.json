{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/core/versions/server/migrations/8_update_registry_provides_to_array.js","filename":"imports/plugins/core/versions/server/migrations/8_update_registry_provides_to_array.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/core/versions/server/migrations/8_update_registry_provides_to_array.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/core/versions/server/migrations/8_update_registry_provides_to_array.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/core/versions/server/migrations/8_update_registry_provides_to_array.js"}},"code":"let Migrations;\nmodule.watch(require(\"meteor/percolate:migrations\"), {\n  Migrations(v) {\n    Migrations = v;\n  }\n\n}, 0);\nlet Packages;\nmodule.watch(require(\"../../../../../../lib/collections\"), {\n  Packages(v) {\n    Packages = v;\n  }\n\n}, 1);\nMigrations.add({\n  version: 8,\n\n  up() {\n    const packages = Packages.find(); // Loop through all packages and update provides to use an array\n\n    packages.forEach(pkg => {\n      if (pkg.registry) {\n        // Map the existing registry into an updated registry with the existing \"provides\" string wrapped in an array\n        // We use the term \"app\" to refer to individual registry entries\n        const updatedRegistry = pkg.registry.map(app => {\n          if (typeof app.provides === \"string\") {\n            app.provides = [app.provides];\n          }\n\n          return app;\n        }); // Update the package document with the new registry\n\n        Packages.update({\n          _id: pkg._id\n        }, {\n          $set: {\n            registry: updatedRegistry\n          }\n        }, {\n          bypassCollection2: true\n        });\n      }\n    });\n  },\n\n  down() {\n    const packages = Packages.find(); // Loop through all packages and update provides to use an array\n\n    packages.forEach(pkg => {\n      if (pkg.registry) {\n        // Map the existing registry into an updated registry with any provides arrays changed to use the first element\n        // of the array. We discussed reducing the array and creating an entry for each provides here, but felt that\n        // since versions of the app before this would have only had one entry, it's safer to just take the first element\n        // of the array\n        const updatedRegistry = pkg.registry.map(entry => {\n          if (Array.isArray(entry.provides)) {\n            entry.provides = entry.provides[0]; // eslint-disable-line prefer-destructuring\n          }\n\n          return entry;\n        }); // Update the package document with the new registry\n\n        Packages.update({\n          _id: pkg._id\n        }, {\n          $set: {\n            registry: updatedRegistry\n          }\n        }, {\n          bypassCollection2: true\n        });\n      }\n    });\n  }\n\n});","map":{"version":3,"sources":["imports/plugins/core/versions/server/migrations/8_update_registry_provides_to_array.js"],"names":["Migrations","module","watch","require","v","Packages","add","version","up","packages","find","forEach","pkg","registry","updatedRegistry","map","app","provides","update","_id","$set","bypassCollection2","down","entry","Array","isArray"],"mappings":"AAAA,IAAIA,UAAJ;AAAeC,OAAOC,KAAP,CAAaC,QAAQ,6BAAR,CAAb,EAAoD;AAACH,aAAWI,CAAX,EAAa;AAACJ,iBAAWI,CAAX;AAAa;;AAA5B,CAApD,EAAkF,CAAlF;AAAqF,IAAIC,QAAJ;AAAaJ,OAAOC,KAAP,CAAaC,QAAQ,mCAAR,CAAb,EAA0D;AAACE,WAASD,CAAT,EAAW;AAACC,eAASD,CAAT;AAAW;;AAAxB,CAA1D,EAAoF,CAApF;AAGjHJ,WAAWM,GAAX,CAAe;AACbC,WAAS,CADI;;AAEbC,OAAK;AACH,UAAMC,WAAWJ,SAASK,IAAT,EAAjB,CADG,CAEH;;AACAD,aAASE,OAAT,CAAkBC,GAAD,IAAS;AACxB,UAAIA,IAAIC,QAAR,EAAkB;AAChB;AACA;AACA,cAAMC,kBAAkBF,IAAIC,QAAJ,CAAaE,GAAb,CAAkBC,GAAD,IAAS;AAChD,cAAI,OAAOA,IAAIC,QAAX,KAAwB,QAA5B,EAAsC;AACpCD,gBAAIC,QAAJ,GAAe,CAACD,IAAIC,QAAL,CAAf;AACD;;AACD,iBAAOD,GAAP;AACD,SALuB,CAAxB,CAHgB,CAUhB;;AACAX,iBAASa,MAAT,CAAgB;AAAEC,eAAKP,IAAIO;AAAX,SAAhB,EAAkC;AAChCC,gBAAM;AACJP,sBAAUC;AADN;AAD0B,SAAlC,EAIG;AAAEO,6BAAmB;AAArB,SAJH;AAKD;AACF,KAlBD;AAmBD,GAxBY;;AA0BbC,SAAO;AACL,UAAMb,WAAWJ,SAASK,IAAT,EAAjB,CADK,CAGL;;AACAD,aAASE,OAAT,CAAkBC,GAAD,IAAS;AACxB,UAAIA,IAAIC,QAAR,EAAkB;AAChB;AACA;AACA;AACA;AACA,cAAMC,kBAAkBF,IAAIC,QAAJ,CAAaE,GAAb,CAAkBQ,KAAD,IAAW;AAClD,cAAIC,MAAMC,OAAN,CAAcF,MAAMN,QAApB,CAAJ,EAAmC;AACjCM,kBAAMN,QAAN,GAAiBM,MAAMN,QAAN,CAAe,CAAf,CAAjB,CADiC,CACG;AACrC;;AACD,iBAAOM,KAAP;AACD,SALuB,CAAxB,CALgB,CAYhB;;AACAlB,iBAASa,MAAT,CAAgB;AAAEC,eAAKP,IAAIO;AAAX,SAAhB,EAAkC;AAChCC,gBAAM;AACJP,sBAAUC;AADN;AAD0B,SAAlC,EAIG;AAAEO,6BAAmB;AAArB,SAJH;AAKD;AACF,KApBD;AAqBD;;AAnDY,CAAf","sourcesContent":["import { Migrations } from \"meteor/percolate:migrations\";\nimport { Packages } from \"/lib/collections\";\n\nMigrations.add({\n  version: 8,\n  up() {\n    const packages = Packages.find();\n    // Loop through all packages and update provides to use an array\n    packages.forEach((pkg) => {\n      if (pkg.registry) {\n        // Map the existing registry into an updated registry with the existing \"provides\" string wrapped in an array\n        // We use the term \"app\" to refer to individual registry entries\n        const updatedRegistry = pkg.registry.map((app) => {\n          if (typeof app.provides === \"string\") {\n            app.provides = [app.provides];\n          }\n          return app;\n        });\n\n        // Update the package document with the new registry\n        Packages.update({ _id: pkg._id }, {\n          $set: {\n            registry: updatedRegistry\n          }\n        }, { bypassCollection2: true });\n      }\n    });\n  },\n\n  down() {\n    const packages = Packages.find();\n\n    // Loop through all packages and update provides to use an array\n    packages.forEach((pkg) => {\n      if (pkg.registry) {\n        // Map the existing registry into an updated registry with any provides arrays changed to use the first element\n        // of the array. We discussed reducing the array and creating an entry for each provides here, but felt that\n        // since versions of the app before this would have only had one entry, it's safer to just take the first element\n        // of the array\n        const updatedRegistry = pkg.registry.map((entry) => {\n          if (Array.isArray(entry.provides)) {\n            entry.provides = entry.provides[0]; // eslint-disable-line prefer-destructuring\n          }\n          return entry;\n        });\n\n        // Update the package document with the new registry\n        Packages.update({ _id: pkg._id }, {\n          $set: {\n            registry: updatedRegistry\n          }\n        }, { bypassCollection2: true });\n      }\n    });\n  }\n});\n"]},"sourceType":"script","hash":"22d863a5f26588cf2464e5dc27e655c15eaac5a7"}
