{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/included/search-mongo/server/hooks/search.js","filename":"imports/plugins/included/search-mongo/server/hooks/search.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/included/search-mongo/server/hooks/search.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/included/search-mongo/server/hooks/search.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/included/search-mongo/server/hooks/search.js"}},"code":"let _intersection;\n\nmodule.watch(require(\"lodash/intersection\"), {\n  default(v) {\n    _intersection = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Products, ProductSearch, OrderSearch, AccountSearch;\nmodule.watch(require(\"../../../../../../lib/collections\"), {\n  Products(v) {\n    Products = v;\n  },\n\n  ProductSearch(v) {\n    ProductSearch = v;\n  },\n\n  OrderSearch(v) {\n    OrderSearch = v;\n  },\n\n  AccountSearch(v) {\n    AccountSearch = v;\n  }\n\n}, 2);\nlet getSearchParameters, buildAccountSearchRecord, buildOrderSearchRecord, buildProductSearchRecord;\nmodule.watch(require(\"../methods/searchcollections\"), {\n  getSearchParameters(v) {\n    getSearchParameters = v;\n  },\n\n  buildAccountSearchRecord(v) {\n    buildAccountSearchRecord = v;\n  },\n\n  buildOrderSearchRecord(v) {\n    buildOrderSearchRecord = v;\n  },\n\n  buildProductSearchRecord(v) {\n    buildProductSearchRecord = v;\n  }\n\n}, 3);\nlet Hooks, Logger;\nmodule.watch(require(\"../../../../../../server/api\"), {\n  Hooks(v) {\n    Hooks = v;\n  },\n\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 4);\nHooks.Events.add(\"afterAccountsInsert\", (userId, accountId) => {\n  if (AccountSearch && !Meteor.isAppTest) {\n    // Passing forceIndex will run account search index even if\n    // updated fields don't match a searchable field\n    buildAccountSearchRecord(accountId, [\"forceIndex\"]);\n  }\n});\nHooks.Events.add(\"afterAccountsRemove\", (userId, accountId) => {\n  if (AccountSearch && !Meteor.isAppTest) {\n    AccountSearch.remove(accountId);\n  }\n});\nHooks.Events.add(\"afterAccountsUpdate\", (userId, updateData) => {\n  const {\n    accountId,\n    updatedFields\n  } = updateData;\n\n  if (AccountSearch && !Meteor.isAppTest) {\n    buildAccountSearchRecord(accountId, updatedFields);\n  }\n}); // NOTE: this hooks does not seemed to get fired, are there is no way\n// to delete an order, only cancel.\n// TODO: Verify the assumption above.\n// Orders.after.remove((userId, doc) => {\n//   if (OrderSearch && !Meteor.isAppTest) {\n//     OrderSearch.remove(doc._id);\n//   }\n// });\n\nHooks.Events.add(\"afterOrderInsert\", doc => {\n  if (OrderSearch && !Meteor.isAppTest) {\n    const orderId = doc._id;\n    buildOrderSearchRecord(orderId);\n  }\n\n  return doc;\n});\nHooks.Events.add(\"afterUpdateOrderUpdateSearchRecord\", order => {\n  if (OrderSearch && !Meteor.isAppTest) {\n    const orderId = order._id;\n    OrderSearch.remove(orderId);\n    buildOrderSearchRecord(orderId);\n  }\n});\n/**\n * if product is removed, remove product search record\n */\n\nHooks.Events.add(\"afterRemoveProduct\", doc => {\n  if (ProductSearch && !Meteor.isAppTest && doc.type === \"simple\") {\n    const productId = doc._id;\n    ProductSearch.remove(productId);\n    Logger.debug(`Removed product ${productId} from ProductSearch collection`);\n  }\n\n  return doc;\n});\n/**\n* after product update rebuild product search record\n*/\n\nHooks.Events.add(\"afterUpdateCatalogProduct\", (doc, options) => {\n  // Find the most recent version of the product document based on\n  // the passed in doc._id\n  const productDocument = Products.findOne({\n    _id: doc._id\n  }); // If this hook is ran without options, then this callback\n  // should no be executed.\n\n  if (!options) {\n    return productDocument;\n  }\n\n  const {\n    modifier: {\n      $set: allProps\n    }\n  } = options;\n  const topLevelFieldNames = Object.getOwnPropertyNames(allProps);\n\n  if (ProductSearch && !Meteor.isAppTest && productDocument.type === \"simple\") {\n    const productId = productDocument._id;\n    const {\n      fieldSet\n    } = getSearchParameters();\n\n    const modifiedFields = _intersection(fieldSet, topLevelFieldNames);\n\n    if (modifiedFields.length) {\n      Logger.debug(`Rewriting search record for ${productDocument.title}`);\n      ProductSearch.remove(productId);\n\n      if (!productDocument.isDeleted) {\n        // do not create record if product was archived\n        buildProductSearchRecord(productId);\n      }\n    } else {\n      Logger.debug(\"No watched fields modified, skipping\");\n    }\n  }\n\n  return productDocument;\n});\n/**\n * after insert\n * @summary should fires on create new variants, on clones products/variants\n */\n\nHooks.Events.add(\"afterInsertProduct\", doc => {\n  if (ProductSearch && !Meteor.isAppTest && doc.type === \"simple\") {\n    const productId = doc._id;\n    buildProductSearchRecord(productId);\n    Logger.debug(`Added product ${productId} to ProductSearch`);\n  }\n\n  return doc;\n});","map":{"version":3,"sources":["imports/plugins/included/search-mongo/server/hooks/search.js"],"names":["_intersection","module","watch","require","default","v","Meteor","Products","ProductSearch","OrderSearch","AccountSearch","getSearchParameters","buildAccountSearchRecord","buildOrderSearchRecord","buildProductSearchRecord","Hooks","Logger","Events","add","userId","accountId","isAppTest","remove","updateData","updatedFields","doc","orderId","_id","order","type","productId","debug","options","productDocument","findOne","modifier","$set","allProps","topLevelFieldNames","Object","getOwnPropertyNames","fieldSet","modifiedFields","length","title","isDeleted"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Products, ProductSearch, OrderSearch, AccountSearch } from \"/lib/collections\";\nimport {\n  getSearchParameters,\n  buildAccountSearchRecord,\n  buildOrderSearchRecord,\n  buildProductSearchRecord\n} from \"../methods/searchcollections\";\nimport { Hooks, Logger } from \"/server/api\";\n\nHooks.Events.add(\"afterAccountsInsert\", (userId, accountId) => {\n  if (AccountSearch && !Meteor.isAppTest) {\n    // Passing forceIndex will run account search index even if\n    // updated fields don't match a searchable field\n    buildAccountSearchRecord(accountId, [\"forceIndex\"]);\n  }\n});\n\nHooks.Events.add(\"afterAccountsRemove\", (userId, accountId) => {\n  if (AccountSearch && !Meteor.isAppTest) {\n    AccountSearch.remove(accountId);\n  }\n});\n\nHooks.Events.add(\"afterAccountsUpdate\", (userId, updateData) => {\n  const { accountId, updatedFields } = updateData;\n\n  if (AccountSearch && !Meteor.isAppTest) {\n    buildAccountSearchRecord(accountId, updatedFields);\n  }\n});\n\n\n// NOTE: this hooks does not seemed to get fired, are there is no way\n// to delete an order, only cancel.\n// TODO: Verify the assumption above.\n// Orders.after.remove((userId, doc) => {\n//   if (OrderSearch && !Meteor.isAppTest) {\n//     OrderSearch.remove(doc._id);\n//   }\n// });\n\nHooks.Events.add(\"afterOrderInsert\", (doc) => {\n  if (OrderSearch && !Meteor.isAppTest) {\n    const orderId = doc._id;\n    buildOrderSearchRecord(orderId);\n  }\n\n  return doc;\n});\n\nHooks.Events.add(\"afterUpdateOrderUpdateSearchRecord\", (order) => {\n  if (OrderSearch && !Meteor.isAppTest) {\n    const orderId = order._id;\n    OrderSearch.remove(orderId);\n    buildOrderSearchRecord(orderId);\n  }\n});\n\n/**\n * if product is removed, remove product search record\n */\nHooks.Events.add(\"afterRemoveProduct\", (doc) => {\n  if (ProductSearch && !Meteor.isAppTest && doc.type === \"simple\") {\n    const productId = doc._id;\n    ProductSearch.remove(productId);\n    Logger.debug(`Removed product ${productId} from ProductSearch collection`);\n  }\n\n  return doc;\n});\n\n/**\n* after product update rebuild product search record\n*/\nHooks.Events.add(\"afterUpdateCatalogProduct\", (doc, options) => {\n  // Find the most recent version of the product document based on\n  // the passed in doc._id\n  const productDocument = Products.findOne({\n    _id: doc._id\n  });\n\n  // If this hook is ran without options, then this callback\n  // should no be executed.\n  if (!options) {\n    return productDocument;\n  }\n\n  const { modifier: { $set: allProps } } = options;\n  const topLevelFieldNames = Object.getOwnPropertyNames(allProps);\n\n  if (ProductSearch && !Meteor.isAppTest && productDocument.type === \"simple\") {\n    const productId = productDocument._id;\n    const { fieldSet } = getSearchParameters();\n    const modifiedFields = _.intersection(fieldSet, topLevelFieldNames);\n    if (modifiedFields.length) {\n      Logger.debug(`Rewriting search record for ${productDocument.title}`);\n      ProductSearch.remove(productId);\n      if (!productDocument.isDeleted) { // do not create record if product was archived\n        buildProductSearchRecord(productId);\n      }\n    } else {\n      Logger.debug(\"No watched fields modified, skipping\");\n    }\n  }\n\n  return productDocument;\n});\n\n/**\n * after insert\n * @summary should fires on create new variants, on clones products/variants\n */\nHooks.Events.add(\"afterInsertProduct\", (doc) => {\n  if (ProductSearch && !Meteor.isAppTest && doc.type === \"simple\") {\n    const productId = doc._id;\n    buildProductSearchRecord(productId);\n    Logger.debug(`Added product ${productId} to ProductSearch`);\n  }\n\n  return doc;\n});\n"]},"sourceType":"script","hash":"dda934defe9aeada494cea3b855e05e5ed749427"}
