{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/core/catalog/server/queries/catalogItems.js","filename":"imports/plugins/core/catalog/server/queries/catalogItems.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/core/catalog/server/queries/catalogItems.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/core/catalog/server/queries/catalogItems.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/core/catalog/server/queries/catalogItems.js"}},"code":"module.export({\n  default: () => catalogItems\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\n\nfunction catalogItems(context, {\n  shopIds,\n  tagIds\n} = {}) {\n  return Promise.asyncApply(() => {\n    const {\n      collections\n    } = context;\n    const {\n      Catalog\n    } = collections;\n\n    if ((!shopIds || shopIds.length === 0) && (!tagIds || tagIds.length === 0)) {\n      throw new Meteor.Error(\"invalid-param\", \"You must provide tagIds or shopIds or both\");\n    }\n\n    const query = {\n      isDeleted: {\n        $ne: true\n      },\n      isVisible: {\n        $ne: false\n      }\n    };\n    if (shopIds) query.shopId = {\n      $in: shopIds\n    };\n    if (tagIds) query.hashtags = {\n      $in: tagIds\n    };\n    return Catalog.find(query);\n  });\n}","map":{"version":3,"sources":["imports/plugins/core/catalog/server/queries/catalogItems.js"],"names":["module","export","default","catalogItems","Meteor","watch","require","v","context","shopIds","tagIds","collections","Catalog","length","Error","query","isDeleted","$ne","isVisible","shopId","$in","hashtags","find"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,WAAQ,MAAIC;AAAb,CAAd;AAA0C,IAAIC,MAAJ;AAAWJ,OAAOK,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACF,SAAOG,CAAP,EAAS;AAACH,aAAOG,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;;AAYtC,SAAeJ,YAAf,CAA4BK,OAA5B,EAAqC;AAAEC,SAAF;AAAWC;AAAX,IAAsB,EAA3D;AAAA,kCAA+D;AAC5E,UAAM;AAAEC;AAAF,QAAkBH,OAAxB;AACA,UAAM;AAAEI;AAAF,QAAcD,WAApB;;AAEA,QAAI,CAAC,CAACF,OAAD,IAAYA,QAAQI,MAAR,KAAmB,CAAhC,MAAuC,CAACH,MAAD,IAAWA,OAAOG,MAAP,KAAkB,CAApE,CAAJ,EAA4E;AAC1E,YAAM,IAAIT,OAAOU,KAAX,CAAiB,eAAjB,EAAkC,4CAAlC,CAAN;AACD;;AAED,UAAMC,QAAQ;AACZC,iBAAW;AAAEC,aAAK;AAAP,OADC;AAEZC,iBAAW;AAAED,aAAK;AAAP;AAFC,KAAd;AAKA,QAAIR,OAAJ,EAAaM,MAAMI,MAAN,GAAe;AAAEC,WAAKX;AAAP,KAAf;AACb,QAAIC,MAAJ,EAAYK,MAAMM,QAAN,GAAiB;AAAED,WAAKV;AAAP,KAAjB;AAEZ,WAAOE,QAAQU,IAAR,CAAaP,KAAb,CAAP;AACD,GAjBc;AAAA","sourcesContent":["import { Meteor } from \"meteor/meteor\";\n\n/**\n * @name catalogItems\n * @method\n * @summary query the Catalog by shop ID and/or tag ID\n * @param {Object} context - an object containing the per-request state\n * @param {Object} params - request parameters\n * @param {String[]} [params.shopIds] - Shop IDs to include (OR)\n * @param {String[]} [params.tags] - Tag IDs to include (OR)\n * @return {Promise<MongoCursor>} - A MongoDB cursor for the proper query\n */\nexport default async function catalogItems(context, { shopIds, tagIds } = {}) {\n  const { collections } = context;\n  const { Catalog } = collections;\n\n  if ((!shopIds || shopIds.length === 0) && (!tagIds || tagIds.length === 0)) {\n    throw new Meteor.Error(\"invalid-param\", \"You must provide tagIds or shopIds or both\");\n  }\n\n  const query = {\n    isDeleted: { $ne: true },\n    isVisible: { $ne: false }\n  };\n\n  if (shopIds) query.shopId = { $in: shopIds };\n  if (tagIds) query.hashtags = { $in: tagIds };\n\n  return Catalog.find(query);\n}\n"]},"sourceType":"script","hash":"420d60b3cea083526744491b3491fb3d8d2ed462"}
