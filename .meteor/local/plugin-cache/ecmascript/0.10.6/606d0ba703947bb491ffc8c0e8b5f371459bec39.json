{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"server/publications/collections/translations.js","filename":"server/publications/collections/translations.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"server/publications/collections/translations.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"server/publications/collections/translations.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/publications/collections/translations.js"}},"code":"const module1 = module;\nlet Meteor;\nmodule1.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet check, Match;\nmodule1.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  },\n\n  Match(v) {\n    Match = v;\n  }\n\n}, 1);\nlet Shops, Translations;\nmodule1.watch(require(\"../../../lib/collections\"), {\n  Shops(v) {\n    Shops = v;\n  },\n\n  Translations(v) {\n    Translations = v;\n  }\n\n}, 2);\nlet Reaction;\nmodule1.watch(require(\"../../api\"), {\n  Reaction(v) {\n    Reaction = v;\n  }\n\n}, 3);\n\n/**\n* @file Translations publication\n*\n*\n* @module Translations\n*/\n\n/**\n * Translations publication\n * @param {String|Array} sessionLanguages - String or array of langauges. current sessionLanguage, default to 'en'\n * @returns { Object } returns Translations\n * @todo like to see the langages validated more with a schema\n */\nMeteor.publish(\"Translations\", languages => {\n  check(languages, Match.OneOf(String, Array));\n  const shopId = Reaction.getShopId();\n  const shopLanguage = Shops.findOne(shopId).language;\n  const sessionLanguages = [];\n  const langTranQuery = []; // set shop default\n\n  sessionLanguages.push(shopLanguage); // lets get all these langauges\n\n  if (Array.isArray(languages)) {\n    sessionLanguages.concat(languages);\n  } else {\n    sessionLanguages.push(languages);\n  } // add in the shop filter\n\n\n  for (const sessionLanguage of sessionLanguages) {\n    langTranQuery.push({\n      i18n: sessionLanguage,\n      shopId: Reaction.getPrimaryShopId()\n    });\n  }\n\n  return Translations.find({\n    $or: langTranQuery\n  });\n});","map":{"version":3,"sources":["server/publications/collections/translations.js"],"names":["module1","module","Meteor","watch","require","v","check","Match","Shops","Translations","Reaction","publish","languages","OneOf","String","Array","shopId","getShopId","shopLanguage","findOne","language","sessionLanguages","langTranQuery","push","isArray","concat","sessionLanguage","i18n","getPrimaryShopId","find","$or"],"mappings":"AAAA,MAAMA,UAAQC,MAAd;AAAqB,IAAIC,MAAJ;AAAWF,QAAQG,KAAR,CAAcC,QAAQ,eAAR,CAAd,EAAuC;AAACF,SAAOG,CAAP,EAAS;AAACH,aAAOG,CAAP;AAAS;;AAApB,CAAvC,EAA6D,CAA7D;AAAgE,IAAIC,KAAJ,EAAUC,KAAV;AAAgBP,QAAQG,KAAR,CAAcC,QAAQ,cAAR,CAAd,EAAsC;AAACE,QAAMD,CAAN,EAAQ;AAACC,YAAMD,CAAN;AAAQ,GAAlB;;AAAmBE,QAAMF,CAAN,EAAQ;AAACE,YAAMF,CAAN;AAAQ;;AAApC,CAAtC,EAA4E,CAA5E;AAA+E,IAAIG,KAAJ,EAAUC,YAAV;AAAuBT,QAAQG,KAAR,CAAcC,QAAQ,0BAAR,CAAd,EAAkD;AAACI,QAAMH,CAAN,EAAQ;AAACG,YAAMH,CAAN;AAAQ,GAAlB;;AAAmBI,eAAaJ,CAAb,EAAe;AAACI,mBAAaJ,CAAb;AAAe;;AAAlD,CAAlD,EAAsG,CAAtG;AAAyG,IAAIK,QAAJ;AAAaV,QAAQG,KAAR,CAAcC,QAAQ,WAAR,CAAd,EAAmC;AAACM,WAASL,CAAT,EAAW;AAACK,eAASL,CAAT;AAAW;;AAAxB,CAAnC,EAA6D,CAA7D;;AAK5U;;;;;;;AAOA;;;;;;AAMAH,OAAOS,OAAP,CAAe,cAAf,EAAgCC,SAAD,IAAe;AAC5CN,QAAMM,SAAN,EAAiBL,MAAMM,KAAN,CAAYC,MAAZ,EAAoBC,KAApB,CAAjB;AACA,QAAMC,SAASN,SAASO,SAAT,EAAf;AACA,QAAMC,eAAeV,MAAMW,OAAN,CAAcH,MAAd,EAAsBI,QAA3C;AACA,QAAMC,mBAAmB,EAAzB;AACA,QAAMC,gBAAgB,EAAtB,CAL4C,CAO5C;;AACAD,mBAAiBE,IAAjB,CAAsBL,YAAtB,EAR4C,CAS5C;;AACA,MAAIH,MAAMS,OAAN,CAAcZ,SAAd,CAAJ,EAA8B;AAC5BS,qBAAiBI,MAAjB,CAAwBb,SAAxB;AACD,GAFD,MAEO;AACLS,qBAAiBE,IAAjB,CAAsBX,SAAtB;AACD,GAd2C,CAe5C;;;AACA,OAAK,MAAMc,eAAX,IAA8BL,gBAA9B,EAAgD;AAC9CC,kBAAcC,IAAd,CAAmB;AACjBI,YAAMD,eADW;AAEjBV,cAAQN,SAASkB,gBAAT;AAFS,KAAnB;AAID;;AAED,SAAOnB,aAAaoB,IAAb,CAAkB;AACvBC,SAAKR;AADkB,GAAlB,CAAP;AAGD,CA1BD","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { check, Match } from \"meteor/check\";\nimport { Shops, Translations } from \"/lib/collections\";\nimport { Reaction } from \"/server/api\";\n\n/**\n* @file Translations publication\n*\n*\n* @module Translations\n*/\n\n/**\n * Translations publication\n * @param {String|Array} sessionLanguages - String or array of langauges. current sessionLanguage, default to 'en'\n * @returns { Object } returns Translations\n * @todo like to see the langages validated more with a schema\n */\nMeteor.publish(\"Translations\", (languages) => {\n  check(languages, Match.OneOf(String, Array));\n  const shopId = Reaction.getShopId();\n  const shopLanguage = Shops.findOne(shopId).language;\n  const sessionLanguages = [];\n  const langTranQuery = [];\n\n  // set shop default\n  sessionLanguages.push(shopLanguage);\n  // lets get all these langauges\n  if (Array.isArray(languages)) {\n    sessionLanguages.concat(languages);\n  } else {\n    sessionLanguages.push(languages);\n  }\n  // add in the shop filter\n  for (const sessionLanguage of sessionLanguages) {\n    langTranQuery.push({\n      i18n: sessionLanguage,\n      shopId: Reaction.getPrimaryShopId()\n    });\n  }\n\n  return Translations.find({\n    $or: langTranQuery\n  });\n});\n"]},"sourceType":"script","hash":"606d0ba703947bb491ffc8c0e8b5f371459bec39"}
