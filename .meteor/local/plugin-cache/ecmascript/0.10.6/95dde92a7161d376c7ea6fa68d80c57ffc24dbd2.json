{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/included/taxes-taxcloud/server/jobs/taxcodes.js","filename":"imports/plugins/included/taxes-taxcloud/server/jobs/taxcodes.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/included/taxes-taxcloud/server/jobs/taxcodes.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/included/taxes-taxcloud/server/jobs/taxcodes.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/included/taxes-taxcloud/server/jobs/taxcodes.js"}},"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Job;\nmodule.watch(require(\"../../../../core/job-collection/lib\"), {\n  Job(v) {\n    Job = v;\n  }\n\n}, 1);\nlet Jobs, Packages;\nmodule.watch(require(\"../../../../../../lib/collections\"), {\n  Jobs(v) {\n    Jobs = v;\n  },\n\n  Packages(v) {\n    Packages = v;\n  }\n\n}, 2);\nlet Hooks, Logger, Reaction;\nmodule.watch(require(\"../../../../../../server/api\"), {\n  Hooks(v) {\n    Hooks = v;\n  },\n\n  Logger(v) {\n    Logger = v;\n  },\n\n  Reaction(v) {\n    Reaction = v;\n  }\n\n}, 3);\n\n//\n// helper to fetch reaction-taxes config\n//\nfunction getJobConfig() {\n  const config = Packages.findOne({\n    name: \"taxes-taxcloud\",\n    shopId: Reaction.getShopId()\n  });\n  return config.settings.taxcloud;\n} //\n// add job hook for \"taxes/fetchTaxCloudTaxCodes\"\n//\n\n\nHooks.Events.add(\"afterCoreInit\", () => {\n  const config = getJobConfig();\n  const refreshPeriod = config.refreshPeriod || 0;\n  const taxCodeUrl = config.taxCodeUrl || \"https://taxcloud.net/tic/?format=json\"; // set 0 to disable fetchTIC\n\n  if (refreshPeriod !== 0) {\n    Logger.debug(`Adding taxcloud/getTaxCodes to JobControl. Refresh ${refreshPeriod}`);\n    new Job(Jobs, \"taxcloud/getTaxCodes\", {\n      url: taxCodeUrl\n    }).priority(\"normal\").retry({\n      retries: 5,\n      wait: 60000,\n      backoff: \"exponential\" // delay by twice as long for each subsequent retry\n\n    }).repeat({\n      schedule: Jobs.later.parse.text(refreshPeriod)\n    }).save({\n      // Cancel any jobs of the same type,\n      // but only if this job repeats forever.\n      cancelRepeats: true\n    });\n  }\n}); //\n// index imports and\n// will trigger job to run\n// taxes/fetchTaxCloudTaxCodes\n//\n\nmodule.exportDefault(function () {\n  Jobs.processJobs(\"taxcloud/getTaxCodes\", {\n    pollInterval: 30 * 1000,\n    workTimeout: 180 * 1000\n  }, (job, callback) => {\n    Meteor.call(\"taxcloud/getTaxCodes\", error => {\n      if (error) {\n        if (error.error === \"notConfigured\") {\n          Logger.warn(error.message);\n          job.done(error.message, {\n            repeatId: true\n          });\n        } else {\n          job.done(error.toString(), {\n            repeatId: true\n          });\n        }\n      } else {\n        // we should always return \"completed\" job here, because errors are fine\n        const success = \"Latest TaxCloud TaxCodes were fetched successfully.\";\n        Reaction.Importer.flush();\n        Logger.debug(success);\n        job.done(success, {\n          repeatId: true\n        });\n      }\n    });\n    callback();\n  });\n});","map":{"version":3,"sources":["imports/plugins/included/taxes-taxcloud/server/jobs/taxcodes.js"],"names":["Meteor","module","watch","require","v","Job","Jobs","Packages","Hooks","Logger","Reaction","getJobConfig","config","findOne","name","shopId","getShopId","settings","taxcloud","Events","add","refreshPeriod","taxCodeUrl","debug","url","priority","retry","retries","wait","backoff","repeat","schedule","later","parse","text","save","cancelRepeats","exportDefault","processJobs","pollInterval","workTimeout","job","callback","call","error","warn","message","done","repeatId","toString","success","Importer","flush"],"mappings":"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","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Job } from \"/imports/plugins/core/job-collection/lib\";\nimport { Jobs, Packages } from \"/lib/collections\";\nimport { Hooks, Logger, Reaction } from \"/server/api\";\n\n//\n// helper to fetch reaction-taxes config\n//\nfunction getJobConfig() {\n  const config = Packages.findOne({\n    name: \"taxes-taxcloud\",\n    shopId: Reaction.getShopId()\n  });\n  return config.settings.taxcloud;\n}\n\n//\n// add job hook for \"taxes/fetchTaxCloudTaxCodes\"\n//\nHooks.Events.add(\"afterCoreInit\", () => {\n  const config = getJobConfig();\n  const refreshPeriod = config.refreshPeriod || 0;\n  const taxCodeUrl = config.taxCodeUrl || \"https://taxcloud.net/tic/?format=json\";\n\n  // set 0 to disable fetchTIC\n  if (refreshPeriod !== 0) {\n    Logger.debug(`Adding taxcloud/getTaxCodes to JobControl. Refresh ${refreshPeriod}`);\n    new Job(Jobs, \"taxcloud/getTaxCodes\", { url: taxCodeUrl })\n      .priority(\"normal\")\n      .retry({\n        retries: 5,\n        wait: 60000,\n        backoff: \"exponential\" // delay by twice as long for each subsequent retry\n      })\n      .repeat({\n        schedule: Jobs.later.parse.text(refreshPeriod)\n      })\n      .save({\n        // Cancel any jobs of the same type,\n        // but only if this job repeats forever.\n        cancelRepeats: true\n      });\n  }\n});\n\n//\n// index imports and\n// will trigger job to run\n// taxes/fetchTaxCloudTaxCodes\n//\nexport default function () {\n  Jobs.processJobs(\n    \"taxcloud/getTaxCodes\",\n    {\n      pollInterval: 30 * 1000,\n      workTimeout: 180 * 1000\n    },\n    (job, callback) => {\n      Meteor.call(\"taxcloud/getTaxCodes\", (error) => {\n        if (error) {\n          if (error.error === \"notConfigured\") {\n            Logger.warn(error.message);\n            job.done(error.message, { repeatId: true });\n          } else {\n            job.done(error.toString(), { repeatId: true });\n          }\n        } else {\n          // we should always return \"completed\" job here, because errors are fine\n          const success = \"Latest TaxCloud TaxCodes were fetched successfully.\";\n          Reaction.Importer.flush();\n          Logger.debug(success);\n\n          job.done(success, { repeatId: true });\n        }\n      });\n      callback();\n    }\n  );\n}\n"]},"sourceType":"script","hash":"95dde92a7161d376c7ea6fa68d80c57ffc24dbd2"}
