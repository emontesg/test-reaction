{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"lib/collections/schemas/helpers.js","filename":"lib/collections/schemas/helpers.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"lib/collections/schemas/helpers.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"lib/collections/schemas/helpers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"lib/collections/schemas/helpers.js"}},"code":"module.export({\n  createdAtAutoValue: () => createdAtAutoValue,\n  updatedAtAutoValue: () => updatedAtAutoValue,\n  shopIdAutoValue: () => shopIdAutoValue,\n  shopIdAutoValueForCart: () => shopIdAutoValueForCart,\n  schemaIdAutoValue: () => schemaIdAutoValue,\n  shopDefaultCountry: () => shopDefaultCountry\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Random;\nmodule.watch(require(\"meteor/random\"), {\n  Random(v) {\n    Random = v;\n  }\n\n}, 1);\nlet Reaction;\nmodule.watch(require(\"../../api\"), {\n  Reaction(v) {\n    Reaction = v;\n  }\n\n}, 2);\nlet Shops;\nmodule.watch(require(\"./..\"), {\n  Shops(v) {\n    Shops = v;\n  }\n\n}, 3);\n\nfunction createdAtAutoValue() {\n  // We don't want to unset or overwrite a createdAt in a nested\n  // document, for example, in a product being added to cart items\n  if (this.closestSubschemaFieldName) return;\n  if (this.isInsert) return new Date();\n  if (this.isUpsert) return {\n    $setOnInsert: new Date()\n  };\n  this.unset();\n}\n\nfunction updatedAtAutoValue() {\n  // We don't want to overwrite an updatedAt in a nested\n  // document, for example, in a product being added to cart items\n  if (this.closestSubschemaFieldName) return;\n  return new Date();\n}\n\nfunction shopIdAutoValue() {\n  // we should always have a shopId\n  if (this.isSet && Meteor.isServer) {\n    return this.value;\n  } else if (Meteor.isServer && !this.isUpdate || Meteor.isClient && this.isInsert) {\n    return Reaction.getShopId();\n  }\n\n  return this.unset();\n}\n\nfunction shopIdAutoValueForCart() {\n  // we should always have a shopId\n  if (this.isSet && Meteor.isServer) {\n    return this.value;\n  } else if (Meteor.isServer && !this.isUpdate || Meteor.isClient && this.isInsert) {\n    let shopId = Reaction.getPrimaryShopId();\n    const marketplaceSettings = Reaction.getMarketplaceSettings();\n\n    if (marketplaceSettings && marketplaceSettings.public && marketplaceSettings.public.merchantCart === true) {\n      shopId = Reaction.getShopId();\n    }\n\n    return shopId;\n  }\n\n  return this.unset();\n}\n\nfunction schemaIdAutoValue() {\n  if (this.isSet && Meteor.isServer) {\n    return this.value;\n  } else if (Meteor.isServer && this.operator !== \"$pull\" || Meteor.isClient && this.isInsert) {\n    return Random.id();\n  }\n\n  return this.unset();\n}\n\nfunction shopDefaultCountry() {\n  try {\n    // Check to see if this is client or server, and the type of update being performed\n    if (this.isSet && Meteor.isServer) {\n      return this.value;\n    } else if (Meteor.isServer && !this.isUpdate || Meteor.isClient && this.isInsert) {\n      // Find the current shop\n      const shop = Shops.findOne({\n        _id: Reaction.getShopId()\n      }); // Find the current shops primary shipping address\n\n      if (shop && shop.addressBook) {\n        const defaultShippingAddress = shop.addressBook.find(address => address.isShippingDefault === true); // return the shops country to auto-populate the Country of Origin field in the scheme\n\n        return defaultShippingAddress.country;\n      }\n\n      return this.value;\n    }\n\n    return this.unset();\n  } catch (e) {\n    return this.value;\n  }\n}","map":{"version":3,"sources":["lib/collections/schemas/helpers.js"],"names":["module","export","createdAtAutoValue","updatedAtAutoValue","shopIdAutoValue","shopIdAutoValueForCart","schemaIdAutoValue","shopDefaultCountry","Meteor","watch","require","v","Random","Reaction","Shops","closestSubschemaFieldName","isInsert","Date","isUpsert","$setOnInsert","unset","isSet","isServer","value","isUpdate","isClient","getShopId","shopId","getPrimaryShopId","marketplaceSettings","getMarketplaceSettings","public","merchantCart","operator","id","shop","findOne","_id","addressBook","defaultShippingAddress","find","address","isShippingDefault","country","e"],"mappings":"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","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Random } from \"meteor/random\";\nimport { Reaction } from \"/lib/api\";\nimport { Shops } from \"/lib/collections\";\n\n/**\n * @name createdAtAutoValue\n * @memberof schemas\n * @method\n * @summary Helper method used for schema injection autoValue\n * @example autoValue: createdAtAutoValue\n * @return {Date} Date representing now if it's an insert\n */\nexport function createdAtAutoValue() {\n  // We don't want to unset or overwrite a createdAt in a nested\n  // document, for example, in a product being added to cart items\n  if (this.closestSubschemaFieldName) return;\n\n  if (this.isInsert) return new Date();\n  if (this.isUpsert) return { $setOnInsert: new Date() };\n  this.unset();\n}\n\n/**\n * @name updatedAtAutoValue\n * @memberof schemas\n * @method\n * @summary Helper method used for schema injection autoValue\n * @example autoValue: updatedAtAutoValue\n * @return {Date} Date representing now\n */\nexport function updatedAtAutoValue() {\n  // We don't want to overwrite an updatedAt in a nested\n  // document, for example, in a product being added to cart items\n  if (this.closestSubschemaFieldName) return;\n\n  return new Date();\n}\n\n/**\n * @name shopIdAutoValue\n * @memberof schemas\n * @method\n * @summary Helper method used for schema injection autoValue\n * @example autoValue: shopIdAutoValue\n * @return {String} current shopId\n */\nexport function shopIdAutoValue() {\n  // we should always have a shopId\n  if (this.isSet && Meteor.isServer) {\n    return this.value;\n  } else if ((Meteor.isServer && !this.isUpdate) || (Meteor.isClient && this.isInsert)) {\n    return Reaction.getShopId();\n  }\n  return this.unset();\n}\n\n/**\n * @name shopIdAutoValueForCart\n * @memberof schemas\n * @method\n * @summary Helper method copy of shopIdAutoValue with modification for Cart\n * @example autoValue: shopIdAutoValue\n * @return {String} shopId\n */\nexport function shopIdAutoValueForCart() {\n  // we should always have a shopId\n  if (this.isSet && Meteor.isServer) {\n    return this.value;\n  } else if ((Meteor.isServer && !this.isUpdate) || (Meteor.isClient && this.isInsert)) {\n    let shopId = Reaction.getPrimaryShopId();\n    const marketplaceSettings = Reaction.getMarketplaceSettings();\n\n    if (marketplaceSettings && marketplaceSettings.public && marketplaceSettings.public.merchantCart === true) {\n      shopId = Reaction.getShopId();\n    }\n    return shopId;\n  }\n  return this.unset();\n}\n\n/**\n * @name schemaIdAutoValue\n * @memberof schemas\n * @method\n * @summary Helper method used for schema injection autoValue\n * @example autoValue: schemaIdAutoValue\n * @return {String} randomId\n */\nexport function schemaIdAutoValue() {\n  if (this.isSet && Meteor.isServer) {\n    return this.value;\n  } else if ((Meteor.isServer && this.operator !== \"$pull\") ||\n    (Meteor.isClient && this.isInsert)) {\n    return Random.id();\n  }\n  return this.unset();\n}\n\n/**\n * @name shopDefaultCountry\n * @memberof schemas\n * @method\n * @summary Helper method used for schema injection autoValue\n * @example autoValue: shopDefaultCountry\n * @return {String} country value from default shop\n */\nexport function shopDefaultCountry() {\n  try {\n    // Check to see if this is client or server, and the type of update being performed\n    if (this.isSet && Meteor.isServer) {\n      return this.value;\n    } else if ((Meteor.isServer && !this.isUpdate) || (Meteor.isClient && this.isInsert)) {\n      // Find the current shop\n      const shop = Shops.findOne({\n        _id: Reaction.getShopId()\n      });\n\n      // Find the current shops primary shipping address\n      if (shop && shop.addressBook) {\n        const defaultShippingAddress = shop.addressBook.find((address) => address.isShippingDefault === true);\n\n        // return the shops country to auto-populate the Country of Origin field in the scheme\n        return defaultShippingAddress.country;\n      }\n\n      return this.value;\n    }\n    return this.unset();\n  } catch (e) {\n    return this.value;\n  }\n}\n"]},"sourceType":"script","hash":"69750e8c8014ee085eec12159dd8c67ab6c0e664"}
