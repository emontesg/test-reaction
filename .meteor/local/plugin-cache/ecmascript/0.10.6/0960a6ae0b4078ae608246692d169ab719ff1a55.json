{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/included/payments-braintree/server/methods/braintreeApi.js","filename":"imports/plugins/included/payments-braintree/server/methods/braintreeApi.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/included/payments-braintree/server/methods/braintreeApi.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/included/payments-braintree/server/methods/braintreeApi.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/included/payments-braintree/server/methods/braintreeApi.js"}},"code":"module.export({\n  BraintreeApi: () => BraintreeApi\n});\nlet Braintree;\nmodule.watch(require(\"braintree\"), {\n  default(v) {\n    Braintree = v;\n  }\n\n}, 0);\nlet accounting;\nmodule.watch(require(\"accounting-js\"), {\n  default(v) {\n    accounting = v;\n  }\n\n}, 1);\nlet Future;\nmodule.watch(require(\"fibers/future\"), {\n  default(v) {\n    Future = v;\n  }\n\n}, 2);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 3);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 4);\nlet Packages;\nmodule.watch(require(\"../../../../../../lib/collections\"), {\n  Packages(v) {\n    Packages = v;\n  }\n\n}, 5);\nlet Reaction, Logger;\nmodule.watch(require(\"../../../../../../server/api\"), {\n  Reaction(v) {\n    Reaction = v;\n  },\n\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 6);\nlet moment;\n\nfunction lazyLoadMoment() {\n  return Promise.asyncApply(() => {\n    if (moment) return;\n    moment = Promise.await(Promise.resolve().then(() => require(\"moment\")));\n  });\n}\n\nconst BraintreeApi = {};\nBraintreeApi.apiCall = {};\n\nfunction getPaymentObj() {\n  return {\n    amount: \"\",\n    options: {\n      submitForSettlement: true\n    }\n  };\n}\n\nfunction parseCardData(data) {\n  return {\n    cardholderName: data.name,\n    number: data.number,\n    expirationMonth: data.expirationMonth,\n    expirationYear: data.expirationYear,\n    cvv: data.cvv\n  };\n}\n\nfunction getSettings(settings, ref, valueName) {\n  if (settings !== null) {\n    return settings[valueName];\n  } else if (ref !== null) {\n    return ref[valueName];\n  }\n\n  return undefined;\n}\n\nfunction getAccountOptions(isPayment) {\n  const queryConditions = {\n    name: \"reaction-braintree\",\n    shopId: Reaction.getShopId()\n  };\n\n  if (isPayment) {\n    queryConditions.enabled = true;\n  }\n\n  const {\n    settings\n  } = Packages.findOne(queryConditions);\n  let environment;\n\n  if (typeof settings !== \"undefined\" && settings !== null ? settings.mode : undefined === true) {\n    environment = \"production\";\n  } else {\n    environment = \"sandbox\";\n  }\n\n  const ref = Meteor.settings.braintree;\n  const options = {\n    environment,\n    merchantId: getSettings(settings, ref, \"merchant_id\"),\n    publicKey: getSettings(settings, ref, \"public_key\"),\n    privateKey: getSettings(settings, ref, \"private_key\")\n  };\n\n  if (!options.merchantId) {\n    throw new Meteor.Error(\"invalid-credentials\", \"Invalid Braintree Credentials\");\n  }\n\n  return options;\n}\n\nfunction getGateway(isNewPayment) {\n  const accountOptions = getAccountOptions(isNewPayment);\n\n  if (accountOptions.environment === \"production\") {\n    accountOptions.environment = Braintree.Environment.Production;\n  } else {\n    accountOptions.environment = Braintree.Environment.Sandbox;\n  }\n\n  const gateway = Braintree.connect(accountOptions);\n  return gateway;\n}\n\nfunction getRefundDetails(refundId) {\n  check(refundId, String);\n  const gateway = getGateway();\n  const braintreeFind = Meteor.wrapAsync(gateway.transaction.find, gateway.transaction);\n  const findResults = braintreeFind(refundId);\n  return findResults;\n}\n\nBraintreeApi.apiCall.paymentSubmit = function (paymentSubmitDetails) {\n  const isNewPayment = true;\n  const gateway = getGateway(isNewPayment);\n  const paymentObj = getPaymentObj();\n\n  if (paymentSubmitDetails.transactionType === \"authorize\") {\n    paymentObj.options.submitForSettlement = false;\n  }\n\n  paymentObj.creditCard = parseCardData(paymentSubmitDetails.cardData);\n  paymentObj.amount = paymentSubmitDetails.paymentData.total;\n  const fut = new Future();\n  gateway.transaction.sale(paymentObj, Meteor.bindEnvironment((error, result) => {\n    if (error) {\n      fut.return({\n        saved: false,\n        error\n      });\n    } else if (!result.success) {\n      fut.return({\n        saved: false,\n        response: result\n      });\n    } else {\n      fut.return({\n        saved: true,\n        response: result\n      });\n    }\n  }, error => {\n    Reaction.Events.warn(error);\n  }));\n  return fut.wait();\n};\n\nBraintreeApi.apiCall.captureCharge = function (paymentCaptureDetails) {\n  const {\n    transactionId\n  } = paymentCaptureDetails;\n  const amount = accounting.toFixed(paymentCaptureDetails.amount, 2);\n  const gateway = getGateway();\n  const fut = new Future();\n\n  if (amount === accounting.toFixed(0, 2)) {\n    gateway.transaction.void(transactionId, (error, result) => {\n      if (error) {\n        fut.return({\n          saved: false,\n          error\n        });\n      } else {\n        fut.return({\n          saved: true,\n          response: result\n        });\n      }\n    }, e => {\n      Logger.warn(e);\n    });\n    return fut.wait();\n  }\n\n  gateway.transaction.submitForSettlement(transactionId, amount, Meteor.bindEnvironment((error, result) => {\n    if (error) {\n      fut.return({\n        saved: false,\n        error\n      });\n    } else {\n      fut.return({\n        saved: true,\n        response: result\n      });\n    }\n  }, e => {\n    Logger.warn(e);\n  }));\n  return fut.wait();\n};\n\nBraintreeApi.apiCall.createRefund = function (refundDetails) {\n  const {\n    amount,\n    transactionId\n  } = refundDetails;\n  const gateway = getGateway();\n  const fut = new Future();\n  gateway.transaction.refund(transactionId, amount, Meteor.bindEnvironment((error, result) => {\n    if (error) {\n      fut.return({\n        saved: false,\n        error\n      });\n    } else if (!result.success) {\n      if (result.errors.errorCollections.transaction.validationErrors.base[0].code === \"91506\") {\n        fut.return({\n          saved: false,\n          error: \"Braintree does not allow refunds until transactions are settled. This can take up to 24 hours. Please try again later.\"\n        });\n      } else {\n        fut.return({\n          saved: false,\n          error: result.message\n        });\n      }\n    } else {\n      fut.return({\n        saved: true,\n        response: result\n      });\n    }\n  }, e => {\n    Logger.fatal(e);\n  }));\n  return fut.wait();\n};\n\nBraintreeApi.apiCall.listRefunds = function (refundListDetails) {\n  const {\n    transactionId\n  } = refundListDetails;\n  const gateway = getGateway();\n  const braintreeFind = Meteor.wrapAsync(gateway.transaction.find, gateway.transaction);\n  const findResults = braintreeFind(transactionId);\n  const result = [];\n\n  if (findResults.refundIds.length > 0) {\n    Promise.await(lazyLoadMoment());\n\n    for (const refund of findResults.refundIds) {\n      const refundDetails = getRefundDetails(refund);\n      result.push({\n        type: \"refund\",\n        amount: parseFloat(refundDetails.amount),\n        created: moment(refundDetails.createdAt).unix() * 1000,\n        currency: refundDetails.currencyIsoCode,\n        raw: refundDetails\n      });\n    }\n  }\n\n  return result;\n};","map":{"version":3,"sources":["imports/plugins/included/payments-braintree/server/methods/braintreeApi.js"],"names":["module","export","BraintreeApi","Braintree","watch","require","default","v","accounting","Future","Meteor","check","Packages","Reaction","Logger","moment","lazyLoadMoment","apiCall","getPaymentObj","amount","options","submitForSettlement","parseCardData","data","cardholderName","name","number","expirationMonth","expirationYear","cvv","getSettings","settings","ref","valueName","undefined","getAccountOptions","isPayment","queryConditions","shopId","getShopId","enabled","findOne","environment","mode","braintree","merchantId","publicKey","privateKey","Error","getGateway","isNewPayment","accountOptions","Environment","Production","Sandbox","gateway","connect","getRefundDetails","refundId","String","braintreeFind","wrapAsync","transaction","find","findResults","paymentSubmit","paymentSubmitDetails","paymentObj","transactionType","creditCard","cardData","paymentData","total","fut","sale","bindEnvironment","error","result","return","saved","success","response","Events","warn","wait","captureCharge","paymentCaptureDetails","transactionId","toFixed","void","e","createRefund","refundDetails","refund","errors","errorCollections","validationErrors","base","code","message","fatal","listRefunds","refundListDetails","refundIds","length","Promise","await","push","type","parseFloat","created","createdAt","unix","currency","currencyIsoCode","raw"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,gBAAa,MAAIA;AAAlB,CAAd;AAA+C,IAAIC,SAAJ;AAAcH,OAAOI,KAAP,CAAaC,QAAQ,WAAR,CAAb,EAAkC;AAACC,UAAQC,CAAR,EAAU;AAACJ,gBAAUI,CAAV;AAAY;;AAAxB,CAAlC,EAA4D,CAA5D;AAA+D,IAAIC,UAAJ;AAAeR,OAAOI,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACC,UAAQC,CAAR,EAAU;AAACC,iBAAWD,CAAX;AAAa;;AAAzB,CAAtC,EAAiE,CAAjE;AAAoE,IAAIE,MAAJ;AAAWT,OAAOI,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACC,UAAQC,CAAR,EAAU;AAACE,aAAOF,CAAP;AAAS;;AAArB,CAAtC,EAA6D,CAA7D;AAAgE,IAAIG,MAAJ;AAAWV,OAAOI,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACK,SAAOH,CAAP,EAAS;AAACG,aAAOH,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAII,KAAJ;AAAUX,OAAOI,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACM,QAAMJ,CAAN,EAAQ;AAACI,YAAMJ,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAA4D,IAAIK,QAAJ;AAAaZ,OAAOI,KAAP,CAAaC,QAAQ,mCAAR,CAAb,EAA0D;AAACO,WAASL,CAAT,EAAW;AAACK,eAASL,CAAT;AAAW;;AAAxB,CAA1D,EAAoF,CAApF;AAAuF,IAAIM,QAAJ,EAAaC,MAAb;AAAoBd,OAAOI,KAAP,CAAaC,QAAQ,8BAAR,CAAb,EAAqD;AAACQ,WAASN,CAAT,EAAW;AAACM,eAASN,CAAT;AAAW,GAAxB;;AAAyBO,SAAOP,CAAP,EAAS;AAACO,aAAOP,CAAP;AAAS;;AAA5C,CAArD,EAAmG,CAAnG;AASliB,IAAIQ,MAAJ;;AACA,SAAeC,cAAf;AAAA,kCAAgC;AAC9B,QAAID,MAAJ,EAAY;AACZA,gEAAsB,QAAtB;AACD,GAHD;AAAA;;AAMO,MAAMb,eAAe,EAArB;AACPA,aAAae,OAAb,GAAuB,EAAvB;;AAGA,SAASC,aAAT,GAAyB;AACvB,SAAO;AACLC,YAAQ,EADH;AAELC,aAAS;AAAEC,2BAAqB;AAAvB;AAFJ,GAAP;AAID;;AAED,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,SAAO;AACLC,oBAAgBD,KAAKE,IADhB;AAELC,YAAQH,KAAKG,MAFR;AAGLC,qBAAiBJ,KAAKI,eAHjB;AAILC,oBAAgBL,KAAKK,cAJhB;AAKLC,SAAKN,KAAKM;AALL,GAAP;AAOD;;AAGD,SAASC,WAAT,CAAqBC,QAArB,EAA+BC,GAA/B,EAAoCC,SAApC,EAA+C;AAC7C,MAAIF,aAAa,IAAjB,EAAuB;AACrB,WAAOA,SAASE,SAAT,CAAP;AACD,GAFD,MAEO,IAAID,QAAQ,IAAZ,EAAkB;AACvB,WAAOA,IAAIC,SAAJ,CAAP;AACD;;AACD,SAAOC,SAAP;AACD;;AAED,SAASC,iBAAT,CAA2BC,SAA3B,EAAsC;AACpC,QAAMC,kBAAkB;AACtBZ,UAAM,oBADgB;AAEtBa,YAAQzB,SAAS0B,SAAT;AAFc,GAAxB;;AAIA,MAAIH,SAAJ,EAAe;AACbC,oBAAgBG,OAAhB,GAA0B,IAA1B;AACD;;AAED,QAAM;AAAET;AAAF,MAAenB,SAAS6B,OAAT,CAAiBJ,eAAjB,CAArB;AACA,MAAIK,WAAJ;;AACA,MAAI,OAAOX,QAAP,KAAoB,WAApB,IAAmCA,aAAa,IAAhD,GAAuDA,SAASY,IAAhE,GAAuET,cAAc,IAAzF,EAA+F;AAC7FQ,kBAAc,YAAd;AACD,GAFD,MAEO;AACLA,kBAAc,SAAd;AACD;;AAED,QAAMV,MAAMtB,OAAOqB,QAAP,CAAgBa,SAA5B;AACA,QAAMxB,UAAU;AACdsB,eADc;AAEdG,gBAAYf,YAAYC,QAAZ,EAAsBC,GAAtB,EAA2B,aAA3B,CAFE;AAGdc,eAAWhB,YAAYC,QAAZ,EAAsBC,GAAtB,EAA2B,YAA3B,CAHG;AAIde,gBAAYjB,YAAYC,QAAZ,EAAsBC,GAAtB,EAA2B,aAA3B;AAJE,GAAhB;;AAMA,MAAI,CAACZ,QAAQyB,UAAb,EAAyB;AACvB,UAAM,IAAInC,OAAOsC,KAAX,CAAiB,qBAAjB,EAAwC,+BAAxC,CAAN;AACD;;AACD,SAAO5B,OAAP;AACD;;AAED,SAAS6B,UAAT,CAAoBC,YAApB,EAAkC;AAChC,QAAMC,iBAAiBhB,kBAAkBe,YAAlB,CAAvB;;AACA,MAAIC,eAAeT,WAAf,KAA+B,YAAnC,EAAiD;AAC/CS,mBAAeT,WAAf,GAA6BvC,UAAUiD,WAAV,CAAsBC,UAAnD;AACD,GAFD,MAEO;AACLF,mBAAeT,WAAf,GAA6BvC,UAAUiD,WAAV,CAAsBE,OAAnD;AACD;;AACD,QAAMC,UAAUpD,UAAUqD,OAAV,CAAkBL,cAAlB,CAAhB;AACA,SAAOI,OAAP;AACD;;AAED,SAASE,gBAAT,CAA0BC,QAA1B,EAAoC;AAClC/C,QAAM+C,QAAN,EAAgBC,MAAhB;AACA,QAAMJ,UAAUN,YAAhB;AACA,QAAMW,gBAAgBlD,OAAOmD,SAAP,CAAiBN,QAAQO,WAAR,CAAoBC,IAArC,EAA2CR,QAAQO,WAAnD,CAAtB;AACA,QAAME,cAAcJ,cAAcF,QAAd,CAApB;AACA,SAAOM,WAAP;AACD;;AAGD9D,aAAae,OAAb,CAAqBgD,aAArB,GAAqC,UAAUC,oBAAV,EAAgC;AACnE,QAAMhB,eAAe,IAArB;AACA,QAAMK,UAAUN,WAAWC,YAAX,CAAhB;AACA,QAAMiB,aAAajD,eAAnB;;AACA,MAAIgD,qBAAqBE,eAArB,KAAyC,WAA7C,EAA0D;AACxDD,eAAW/C,OAAX,CAAmBC,mBAAnB,GAAyC,KAAzC;AACD;;AACD8C,aAAWE,UAAX,GAAwB/C,cAAc4C,qBAAqBI,QAAnC,CAAxB;AACAH,aAAWhD,MAAX,GAAoB+C,qBAAqBK,WAArB,CAAiCC,KAArD;AACA,QAAMC,MAAM,IAAIhE,MAAJ,EAAZ;AACA8C,UAAQO,WAAR,CAAoBY,IAApB,CAAyBP,UAAzB,EAAqCzD,OAAOiE,eAAP,CAAuB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7E,QAAID,KAAJ,EAAW;AACTH,UAAIK,MAAJ,CAAW;AACTC,eAAO,KADE;AAETH;AAFS,OAAX;AAID,KALD,MAKO,IAAI,CAACC,OAAOG,OAAZ,EAAqB;AAC1BP,UAAIK,MAAJ,CAAW;AACTC,eAAO,KADE;AAETE,kBAAUJ;AAFD,OAAX;AAID,KALM,MAKA;AACLJ,UAAIK,MAAJ,CAAW;AACTC,eAAO,IADE;AAETE,kBAAUJ;AAFD,OAAX;AAID;AACF,GAjBoC,EAiBjCD,KAAD,IAAW;AACZ/D,aAASqE,MAAT,CAAgBC,IAAhB,CAAqBP,KAArB;AACD,GAnBoC,CAArC;AAqBA,SAAOH,IAAIW,IAAJ,EAAP;AACD,CAhCD;;AAmCAlF,aAAae,OAAb,CAAqBoE,aAArB,GAAqC,UAAUC,qBAAV,EAAiC;AACpE,QAAM;AAAEC;AAAF,MAAoBD,qBAA1B;AACA,QAAMnE,SAASX,WAAWgF,OAAX,CAAmBF,sBAAsBnE,MAAzC,EAAiD,CAAjD,CAAf;AACA,QAAMoC,UAAUN,YAAhB;AACA,QAAMwB,MAAM,IAAIhE,MAAJ,EAAZ;;AAEA,MAAIU,WAAWX,WAAWgF,OAAX,CAAmB,CAAnB,EAAsB,CAAtB,CAAf,EAAyC;AACvCjC,YAAQO,WAAR,CAAoB2B,IAApB,CAAyBF,aAAzB,EAAwC,CAACX,KAAD,EAAQC,MAAR,KAAmB;AACzD,UAAID,KAAJ,EAAW;AACTH,YAAIK,MAAJ,CAAW;AACTC,iBAAO,KADE;AAETH;AAFS,SAAX;AAID,OALD,MAKO;AACLH,YAAIK,MAAJ,CAAW;AACTC,iBAAO,IADE;AAETE,oBAAUJ;AAFD,SAAX;AAID;AACF,KAZD,EAYIa,CAAD,IAAO;AACR5E,aAAOqE,IAAP,CAAYO,CAAZ;AACD,KAdD;AAeA,WAAOjB,IAAIW,IAAJ,EAAP;AACD;;AACD7B,UAAQO,WAAR,CAAoBzC,mBAApB,CAAwCkE,aAAxC,EAAuDpE,MAAvD,EAA+DT,OAAOiE,eAAP,CAAuB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvG,QAAID,KAAJ,EAAW;AACTH,UAAIK,MAAJ,CAAW;AACTC,eAAO,KADE;AAETH;AAFS,OAAX;AAID,KALD,MAKO;AACLH,UAAIK,MAAJ,CAAW;AACTC,eAAO,IADE;AAETE,kBAAUJ;AAFD,OAAX;AAID;AACF,GAZ8D,EAY3Da,CAAD,IAAO;AACR5E,WAAOqE,IAAP,CAAYO,CAAZ;AACD,GAd8D,CAA/D;AAgBA,SAAOjB,IAAIW,IAAJ,EAAP;AACD,CAzCD;;AA4CAlF,aAAae,OAAb,CAAqB0E,YAArB,GAAoC,UAAUC,aAAV,EAAyB;AAC3D,QAAM;AAAEzE,UAAF;AAAUoE;AAAV,MAA4BK,aAAlC;AACA,QAAMrC,UAAUN,YAAhB;AACA,QAAMwB,MAAM,IAAIhE,MAAJ,EAAZ;AACA8C,UAAQO,WAAR,CAAoB+B,MAApB,CAA2BN,aAA3B,EAA0CpE,MAA1C,EAAkDT,OAAOiE,eAAP,CAAuB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1F,QAAID,KAAJ,EAAW;AACTH,UAAIK,MAAJ,CAAW;AACTC,eAAO,KADE;AAETH;AAFS,OAAX;AAID,KALD,MAKO,IAAI,CAACC,OAAOG,OAAZ,EAAqB;AAC1B,UAAIH,OAAOiB,MAAP,CAAcC,gBAAd,CAA+BjC,WAA/B,CAA2CkC,gBAA3C,CAA4DC,IAA5D,CAAiE,CAAjE,EAAoEC,IAApE,KAA6E,OAAjF,EAA0F;AACxFzB,YAAIK,MAAJ,CAAW;AACTC,iBAAO,KADE;AAETH,iBAAO;AAFE,SAAX;AAID,OALD,MAKO;AACLH,YAAIK,MAAJ,CAAW;AACTC,iBAAO,KADE;AAETH,iBAAOC,OAAOsB;AAFL,SAAX;AAID;AACF,KAZM,MAYA;AACL1B,UAAIK,MAAJ,CAAW;AACTC,eAAO,IADE;AAETE,kBAAUJ;AAFD,OAAX;AAID;AACF,GAxBiD,EAwB9Ca,CAAD,IAAO;AACR5E,WAAOsF,KAAP,CAAaV,CAAb;AACD,GA1BiD,CAAlD;AA2BA,SAAOjB,IAAIW,IAAJ,EAAP;AACD,CAhCD;;AAmCAlF,aAAae,OAAb,CAAqBoF,WAArB,GAAmC,UAAUC,iBAAV,EAA6B;AAC9D,QAAM;AAAEf;AAAF,MAAoBe,iBAA1B;AACA,QAAM/C,UAAUN,YAAhB;AACA,QAAMW,gBAAgBlD,OAAOmD,SAAP,CAAiBN,QAAQO,WAAR,CAAoBC,IAArC,EAA2CR,QAAQO,WAAnD,CAAtB;AACA,QAAME,cAAcJ,cAAc2B,aAAd,CAApB;AACA,QAAMV,SAAS,EAAf;;AACA,MAAIb,YAAYuC,SAAZ,CAAsBC,MAAtB,GAA+B,CAAnC,EAAsC;AACpCC,YAAQC,KAAR,CAAc1F,gBAAd;;AACA,SAAK,MAAM6E,MAAX,IAAqB7B,YAAYuC,SAAjC,EAA4C;AAC1C,YAAMX,gBAAgBnC,iBAAiBoC,MAAjB,CAAtB;AACAhB,aAAO8B,IAAP,CAAY;AACVC,cAAM,QADI;AAEVzF,gBAAQ0F,WAAWjB,cAAczE,MAAzB,CAFE;AAGV2F,iBAAS/F,OAAO6E,cAAcmB,SAArB,EAAgCC,IAAhC,KAAyC,IAHxC;AAIVC,kBAAUrB,cAAcsB,eAJd;AAKVC,aAAKvB;AALK,OAAZ;AAOD;AACF;;AAED,SAAOf,MAAP;AACD,CArBD","sourcesContent":["/* eslint camelcase: 0 */\nimport Braintree from \"braintree\";\nimport accounting from \"accounting-js\";\nimport Future from \"fibers/future\";\nimport { Meteor } from \"meteor/meteor\";\nimport { check } from \"meteor/check\";\nimport { Packages } from \"/lib/collections\";\nimport { Reaction, Logger } from \"/server/api\";\n\nlet moment;\nasync function lazyLoadMoment() {\n  if (moment) return;\n  moment = await import(\"moment\");\n}\n\n\nexport const BraintreeApi = {};\nBraintreeApi.apiCall = {};\n\n\nfunction getPaymentObj() {\n  return {\n    amount: \"\",\n    options: { submitForSettlement: true }\n  };\n}\n\nfunction parseCardData(data) {\n  return {\n    cardholderName: data.name,\n    number: data.number,\n    expirationMonth: data.expirationMonth,\n    expirationYear: data.expirationYear,\n    cvv: data.cvv\n  };\n}\n\n\nfunction getSettings(settings, ref, valueName) {\n  if (settings !== null) {\n    return settings[valueName];\n  } else if (ref !== null) {\n    return ref[valueName];\n  }\n  return undefined;\n}\n\nfunction getAccountOptions(isPayment) {\n  const queryConditions = {\n    name: \"reaction-braintree\",\n    shopId: Reaction.getShopId()\n  };\n  if (isPayment) {\n    queryConditions.enabled = true;\n  }\n\n  const { settings } = Packages.findOne(queryConditions);\n  let environment;\n  if (typeof settings !== \"undefined\" && settings !== null ? settings.mode : undefined === true) {\n    environment = \"production\";\n  } else {\n    environment = \"sandbox\";\n  }\n\n  const ref = Meteor.settings.braintree;\n  const options = {\n    environment,\n    merchantId: getSettings(settings, ref, \"merchant_id\"),\n    publicKey: getSettings(settings, ref, \"public_key\"),\n    privateKey: getSettings(settings, ref, \"private_key\")\n  };\n  if (!options.merchantId) {\n    throw new Meteor.Error(\"invalid-credentials\", \"Invalid Braintree Credentials\");\n  }\n  return options;\n}\n\nfunction getGateway(isNewPayment) {\n  const accountOptions = getAccountOptions(isNewPayment);\n  if (accountOptions.environment === \"production\") {\n    accountOptions.environment = Braintree.Environment.Production;\n  } else {\n    accountOptions.environment = Braintree.Environment.Sandbox;\n  }\n  const gateway = Braintree.connect(accountOptions);\n  return gateway;\n}\n\nfunction getRefundDetails(refundId) {\n  check(refundId, String);\n  const gateway = getGateway();\n  const braintreeFind = Meteor.wrapAsync(gateway.transaction.find, gateway.transaction);\n  const findResults = braintreeFind(refundId);\n  return findResults;\n}\n\n\nBraintreeApi.apiCall.paymentSubmit = function (paymentSubmitDetails) {\n  const isNewPayment = true;\n  const gateway = getGateway(isNewPayment);\n  const paymentObj = getPaymentObj();\n  if (paymentSubmitDetails.transactionType === \"authorize\") {\n    paymentObj.options.submitForSettlement = false;\n  }\n  paymentObj.creditCard = parseCardData(paymentSubmitDetails.cardData);\n  paymentObj.amount = paymentSubmitDetails.paymentData.total;\n  const fut = new Future();\n  gateway.transaction.sale(paymentObj, Meteor.bindEnvironment((error, result) => {\n    if (error) {\n      fut.return({\n        saved: false,\n        error\n      });\n    } else if (!result.success) {\n      fut.return({\n        saved: false,\n        response: result\n      });\n    } else {\n      fut.return({\n        saved: true,\n        response: result\n      });\n    }\n  }, (error) => {\n    Reaction.Events.warn(error);\n  }));\n\n  return fut.wait();\n};\n\n\nBraintreeApi.apiCall.captureCharge = function (paymentCaptureDetails) {\n  const { transactionId } = paymentCaptureDetails;\n  const amount = accounting.toFixed(paymentCaptureDetails.amount, 2);\n  const gateway = getGateway();\n  const fut = new Future();\n\n  if (amount === accounting.toFixed(0, 2)) {\n    gateway.transaction.void(transactionId, (error, result) => {\n      if (error) {\n        fut.return({\n          saved: false,\n          error\n        });\n      } else {\n        fut.return({\n          saved: true,\n          response: result\n        });\n      }\n    }, (e) => {\n      Logger.warn(e);\n    });\n    return fut.wait();\n  }\n  gateway.transaction.submitForSettlement(transactionId, amount, Meteor.bindEnvironment((error, result) => {\n    if (error) {\n      fut.return({\n        saved: false,\n        error\n      });\n    } else {\n      fut.return({\n        saved: true,\n        response: result\n      });\n    }\n  }, (e) => {\n    Logger.warn(e);\n  }));\n\n  return fut.wait();\n};\n\n\nBraintreeApi.apiCall.createRefund = function (refundDetails) {\n  const { amount, transactionId } = refundDetails;\n  const gateway = getGateway();\n  const fut = new Future();\n  gateway.transaction.refund(transactionId, amount, Meteor.bindEnvironment((error, result) => {\n    if (error) {\n      fut.return({\n        saved: false,\n        error\n      });\n    } else if (!result.success) {\n      if (result.errors.errorCollections.transaction.validationErrors.base[0].code === \"91506\") {\n        fut.return({\n          saved: false,\n          error: \"Braintree does not allow refunds until transactions are settled. This can take up to 24 hours. Please try again later.\"\n        });\n      } else {\n        fut.return({\n          saved: false,\n          error: result.message\n        });\n      }\n    } else {\n      fut.return({\n        saved: true,\n        response: result\n      });\n    }\n  }, (e) => {\n    Logger.fatal(e);\n  }));\n  return fut.wait();\n};\n\n\nBraintreeApi.apiCall.listRefunds = function (refundListDetails) {\n  const { transactionId } = refundListDetails;\n  const gateway = getGateway();\n  const braintreeFind = Meteor.wrapAsync(gateway.transaction.find, gateway.transaction);\n  const findResults = braintreeFind(transactionId);\n  const result = [];\n  if (findResults.refundIds.length > 0) {\n    Promise.await(lazyLoadMoment());\n    for (const refund of findResults.refundIds) {\n      const refundDetails = getRefundDetails(refund);\n      result.push({\n        type: \"refund\",\n        amount: parseFloat(refundDetails.amount),\n        created: moment(refundDetails.createdAt).unix() * 1000,\n        currency: refundDetails.currencyIsoCode,\n        raw: refundDetails\n      });\n    }\n  }\n\n  return result;\n};\n"]},"sourceType":"script","hash":"0960a6ae0b4078ae608246692d169ab719ff1a55"}
