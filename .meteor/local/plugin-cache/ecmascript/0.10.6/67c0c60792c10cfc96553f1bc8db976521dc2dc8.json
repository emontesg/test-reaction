{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/core/graphql/server/schemas/index.js","filename":"imports/plugins/core/graphql/server/schemas/index.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/core/graphql/server/schemas/index.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/core/graphql/server/schemas/index.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/core/graphql/server/schemas/index.js"}},"code":"/* babel-plugin-inline-import './account.graphql' */\nconst account = \"\\\"The fields by which you are allowed to sort any query that returns an `AccountConnection`\\\"\\nenum AccountSortByField {\\n  _id\\n  name\\n  createdAt\\n  updatedAt\\n}\\n\\n\\\"Defines a new Address and the account to which it should be added\\\"\\ninput AddAccountAddressBookEntryInput {\\n  \\\"The account ID\\\"\\n  accountId: ID!\\n\\n  \\\"The address to add\\\"\\n  address: AddressInput!\\n\\n  \\\"An optional string identifying the mutation call, which will be returned in the response payload\\\"\\n  clientMutationId: String\\n}\\n\\n\\\"Describes changes that should be applied to one of the addresses for an account\\\"\\ninput UpdateAccountAddressBookEntryInput {\\n  \\\"The account ID\\\"\\n  accountId: ID!\\n\\n  \\\"The address ID\\\"\\n  addressId: ID!\\n\\n  \\\"An optional string identifying the mutation call, which will be returned in the response payload\\\"\\n  clientMutationId: String\\n\\n  \\\"If present, make this address the default address of this type\\\"\\n  type: AddressType\\n\\n  \\\"The address changes to apply\\\"\\n  updates: AddressInput!\\n}\\n\\n\\\"Describes which address should be removed from which account\\\"\\ninput RemoveAccountAddressBookEntryInput {\\n  \\\"The account ID\\\"\\n  accountId: ID!\\n\\n  \\\"The address ID\\\"\\n  addressId: ID!\\n\\n  \\\"An optional string identifying the mutation call, which will be returned in the response payload\\\"\\n  clientMutationId: String\\n}\\n\\n\\\"Describes an account profile currency change\\\"\\ninput SetAccountProfileCurrencyInput {\\n  \\\"The account ID, which defaults to the viewer account\\\"\\n  accountId: ID\\n\\n  \\\"An optional string identifying the mutation call, which will be returned in the response payload\\\"\\n  clientMutationId: String\\n\\n  \\\"The currency code\\\"\\n  currencyCode: String!\\n}\\n\\n\\\"Defines a new Email and the account to which it should be added\\\"\\ninput AddAccountEmailRecordInput {\\n  \\\"The account ID, which defaults to the viewer account\\\"\\n  accountId: ID\\n\\n  \\\"The email address to add\\\"\\n  email: Email!\\n\\n  \\\"An optional string identifying the mutation call, which will be returned in the response payload\\\"\\n  clientMutationId: String\\n}\\n\\n\\\"Defines which email address should be removed from which account\\\"\\ninput RemoveAccountEmailRecordInput {\\n  \\\"The account ID, which defaults to the viewer account\\\"\\n  accountId: ID\\n\\n  \\\"The email address to remove\\\"\\n  email: Email!\\n\\n  \\\"An optional string identifying the mutation call, which will be returned in the response payload\\\"\\n  clientMutationId: String\\n}\\n\\n\\\"The input object for mutating an existing `Account`\\\"\\ninput AccountUpdatesInput {\\n  currencyCode: String!\\n}\\n\\n\\\"Defines how an account should be updated, and which account\\\"\\ninput UpdateAccountInput {\\n  \\\"The account ID\\\"\\n  accountId: ID!\\n\\n  \\\"The field changes to apply\\\"\\n  updates: AccountUpdatesInput!\\n\\n  \\\"An optional string identifying the mutation call, which will be returned in the response payload\\\"\\n  clientMutationId: String\\n}\\n\\n\\\"Per-account tax exemption settings used by the Avalara plugin\\\"\\ntype TaxSettings {\\n  \\\"Exemption number for an account\\\"\\n  exemptionNo: String\\n\\n  \\\"Customer usage type. A value matching the `code` field of one TaxEntityCode, or any custom string.\\\"\\n  customerUsageType: String\\n}\\n\\n\\\"Represents a single user account\\\"\\ntype Account implements Node {\\n  \\\"The account ID\\\"\\n  _id: ID!\\n\\n  \\\"A list of physical or mailing addresses associated with this account\\\"\\n  addressBook(after: ConnectionCursor, before: ConnectionCursor, first: ConnectionLimitInt, last: ConnectionLimitInt): AddressConnection\\n\\n  \\\"The date and time at which this account was created\\\"\\n  createdAt: DateTime!\\n\\n  \\\"The preferred currency used by this account\\\"\\n  currency: Currency\\n\\n  \\\"A list of email records associated with this account\\\"\\n  emailRecords: [EmailRecord]\\n\\n  \\\"A paged list of the permission groups in which this account is listed\\\"\\n  groups(after: ConnectionCursor, before: ConnectionCursor, first: ConnectionLimitInt, last: ConnectionLimitInt, sortOrder: SortOrder = asc, sortBy: GroupSortByField = createdAt): GroupConnection\\n\\n  \\\"Arbitrary additional metadata about this account\\\"\\n  metafields: [Metafield]\\n\\n  \\\"The full name of the person this account represents, if known\\\"\\n  name: String\\n\\n  \\\"Some note about this account\\\"\\n  note: String\\n\\n  \\\"An object storing plugin-specific preferences for this account\\\"\\n  preferences: JSONObject\\n\\n  \\\"The shop to which this account belongs, if it is associated with a specific shop\\\"\\n  shop: Shop\\n\\n  \\\"Per-account tax exemption settings used by the Avalara plugin\\\"\\n  taxSettings: TaxSettings\\n\\n  \\\"The date and time at which this account was last updated\\\"\\n  updatedAt: DateTime!\\n}\\n\\n\\\"Wraps a list of `Accounts`, providing pagination cursors and information.\\\"\\ntype AccountConnection implements NodeConnection {\\n  edges: [AccountEdge]\\n  nodes: [Account]\\n  pageInfo: PageInfo!\\n  totalCount: Int!\\n}\\n\\n\\\"A connection edge in which each node is an `Account` object\\\"\\ntype AccountEdge implements NodeEdge {\\n  cursor: ConnectionCursor!\\n  node: Account\\n}\\n\\n\\\"The response from the `addAccountAddressBookEntry` mutation\\\"\\ntype AddAccountAddressBookEntryPayload {\\n  \\\"The added address\\\"\\n  address: Address\\n\\n  \\\"The added address edge\\\"\\n  addressEdge: AddressEdge\\n\\n  \\\"The same string you sent with the mutation params, for matching mutation calls with their responses\\\"\\n  clientMutationId: String\\n}\\n\\n\\\"The response from the `addAccountEmailRecord` mutation\\\"\\ntype AddAccountEmailRecordPayload {\\n  \\\"The added email record\\\"\\n  emailRecord: EmailRecord\\n\\n  \\\"The same string you sent with the mutation params, for matching mutation calls with their responses\\\"\\n  clientMutationId: String\\n}\\n\\n\\\"The response from the `removeAccountAddressBookEntry` mutation\\\"\\ntype RemoveAccountAddressBookEntryPayload {\\n  \\\"The removed address\\\"\\n  address: Address\\n\\n  \\\"The same string you sent with the mutation params, for matching mutation calls with their responses\\\"\\n  clientMutationId: String\\n}\\n\\n\\\"The response from the `removeAccountEmailRecord` mutation\\\"\\ntype RemoveAccountEmailRecordPayload {\\n  \\\"The account, with updated `emailRecords`\\\"\\n  account: Account\\n\\n  \\\"The same string you sent with the mutation params, for matching mutation calls with their responses\\\"\\n  clientMutationId: String\\n}\\n\\n\\\"The response from the `updateAccountAddressBookEntry` mutation\\\"\\ntype UpdateAccountAddressBookEntryPayload {\\n  \\\"The updated address\\\"\\n  address: Address\\n\\n  \\\"The same string you sent with the mutation params, for matching mutation calls with their responses\\\"\\n  clientMutationId: String\\n}\\n\\n\\\"The response from the `setAccountProfileCurrency` mutation\\\"\\ntype SetAccountProfileCurrencyPayload {\\n  \\\"The updated account\\\"\\n  account: Account\\n\\n  \\\"The same string you sent with the mutation params, for matching mutation calls with their responses\\\"\\n  clientMutationId: String\\n}\\n\\nextend type Mutation {\\n  \\\"Add a new address to the `addressBook` field for an account\\\"\\n  addAccountAddressBookEntry(input: AddAccountAddressBookEntryInput!): AddAccountAddressBookEntryPayload\\n\\n  \\\"Add an email address to an account\\\"\\n  addAccountEmailRecord(input: AddAccountEmailRecordInput!): AddAccountEmailRecordPayload\\n\\n  \\\"Remove an address from the `addressBook` field for an account\\\"\\n  removeAccountAddressBookEntry(input: RemoveAccountAddressBookEntryInput!): RemoveAccountAddressBookEntryPayload\\n\\n  \\\"Remove an email address from an account\\\"\\n  removeAccountEmailRecord(input: RemoveAccountEmailRecordInput!): RemoveAccountEmailRecordPayload\\n\\n  \\\"Set the preferred currency for an account\\\"\\n  setAccountProfileCurrency(input: SetAccountProfileCurrencyInput!): SetAccountProfileCurrencyPayload\\n\\n  \\\"Remove an address that exists in the `addressBook` field for an account\\\"\\n  updateAccountAddressBookEntry(input: UpdateAccountAddressBookEntryInput!): UpdateAccountAddressBookEntryPayload\\n}\\n\\nextend type Query {\\n  \\\"Returns the account for the authenticated user\\\"\\n  viewer: Account\\n\\n  \\\"Returns the account with the provided ID\\\"\\n  account(id: ID!): Account\\n\\n  \\\"\\\"\\\"\\n  Returns a list of administrators for the shop with ID `shopId`, as a Relay-compatible connection.\\n  \\\"Administrators\\\" means all linked accounts that have the \\\"admin\\\" role for this shop.\\n  \\\"\\\"\\\"\\n  administrators(shopId: ID!, after: ConnectionCursor, before: ConnectionCursor, first: ConnectionLimitInt, last: ConnectionLimitInt, sortOrder: SortOrder = asc, sortBy: AccountSortByField = createdAt): AccountConnection\\n}\\n\";\n\n/* babel-plugin-inline-import './address.graphql' */\nconst address = \"\\\"A list of the possible types of `Address`\\\"\\nenum AddressType {\\n  \\\"Address can be used for payment transactions and invoicing\\\"\\n  billing\\n\\n  \\\"Address can be used as a mailing address for sending physical items\\\"\\n  shipping\\n}\\n\\n\\\"The details of an `Address` to be created or updated\\\"\\ninput AddressInput {\\n  \\\"The street address / first line\\\"\\n  address1: String!\\n\\n  \\\"Optional second line\\\"\\n  address2: String\\n\\n  \\\"City\\\"\\n  city: String!\\n\\n  \\\"Optional company name, if it's a business address\\\"\\n  company: String\\n\\n  \\\"Country\\\"\\n  country: String!\\n\\n  \\\"The full name of a person at this address\\\"\\n  fullName: String!\\n\\n  \\\"Is this the default address for billing purposes?\\\"\\n  isBillingDefault: Boolean!\\n\\n  \\\"Is this a commercial address?\\\"\\n  isCommercial: Boolean!\\n\\n  \\\"Is this the default address to use when selecting a shipping address at checkout?\\\"\\n  isShippingDefault: Boolean!\\n\\n  \\\"Arbitrary additional metadata about this address\\\"\\n  metafields: [MetafieldInput]\\n\\n  \\\"A phone number for someone at this address\\\"\\n  phone: String!\\n\\n  \\\"Postal code\\\"\\n  postal: String!\\n\\n  \\\"Region. For example, a U.S. state\\\"\\n  region: String!\\n}\\n\\n\\\"Represents a physical or mailing address somewhere on Earth\\\"\\ntype Address implements Node {\\n  \\\"The address ID\\\"\\n  _id: ID!\\n\\n  \\\"The street address / first line\\\"\\n  address1: String!\\n\\n  \\\"Optional second line\\\"\\n  address2: String\\n\\n  \\\"City\\\"\\n  city: String!\\n\\n  \\\"Optional company name, if it's a business address\\\"\\n  company: String\\n\\n  \\\"Country\\\"\\n  country: String!\\n\\n  \\\"Whether this address failed external address validation the last time it was checked\\\"\\n  failedValidation: Boolean\\n\\n  \\\"The full name of a person at this address\\\"\\n  fullName: String!\\n\\n  \\\"Is this the default address for billing purposes?\\\"\\n  isBillingDefault: Boolean!\\n\\n  \\\"Is this a commercial address?\\\"\\n  isCommercial: Boolean!\\n\\n  \\\"Is this the default address to use when selecting a shipping address at checkout?\\\"\\n  isShippingDefault: Boolean!\\n\\n  \\\"Arbitrary additional metadata about this address\\\"\\n  metafields: [Metafield]\\n\\n  \\\"A phone number for someone at this address\\\"\\n  phone: String!\\n\\n  \\\"Postal code\\\"\\n  postal: String!\\n\\n  \\\"Region. For example, a U.S. state\\\"\\n  region: String!\\n}\\n\\n\\\"Wraps a list of `Addresses`, providing pagination cursors and information.\\\"\\ntype AddressConnection implements NodeConnection {\\n  edges: [AddressEdge]\\n  nodes: [Address]\\n  pageInfo: PageInfo!\\n  totalCount: Int!\\n}\\n\\n\\\"A connection edge in which each node is an `Address` object\\\"\\ntype AddressEdge implements NodeEdge {\\n  cursor: ConnectionCursor!\\n  node: Address\\n}\\n\";\n\n/* babel-plugin-inline-import './base.graphql' */\nconst base = \"scalar Date\\nscalar DateTime\\nscalar JSONObject\\nscalar Time\\n\\n\\\"A list of URLs for various sizes of an image\\\"\\ntype ImageSizes {\\n  \\\"Use this URL to get a large resolution file for this image\\\"\\n  large: String\\n\\n  \\\"Use this URL to get a medium resolution file for this image\\\"\\n  medium: String\\n\\n  \\\"\\\"\\\"\\n  Use this URL to get this image with its original resolution as uploaded. This may not be\\n  the true original size if there is a hard cap on how big image files can be.\\n  \\\"\\\"\\\"\\n  original: String\\n\\n  \\\"Use this URL to get a small resolution file for this image\\\"\\n  small: String\\n\\n  \\\"Use this URL to get a thumbnail resolution file for this image\\\"\\n  thumbnail: String\\n}\\n\\ntype ImageInfo {\\n  \\\"\\\"\\\"\\n  If greater than 0, then this image should be used for the product grid. The number indicates which position\\n  within the product grid item, for grid weights that show multiple images.\\n  \\\"\\\"\\\"\\n  toGrid: Int\\n\\n  \\\"\\\"\\\"\\n  Sort by priority ascending when displaying more than one image for a product in a user interface.\\n  This is an integer with 1 being the first / highest priority image.\\n  \\\"\\\"\\\"\\n  priority: Int\\n\\n  \\\"The related product ID\\\"\\n  productId: ID\\n\\n  \\\"The related variant ID, if linked with a particular variant\\\"\\n  variantId: ID\\n\\n  \\\"A list of URLs for various size files of this image\\\"\\n  URLs: ImageSizes\\n}\\n\\n\\\"Mutations have side effects, such as mutating data or triggering a task\\\"\\ntype Mutation {\\n  echo(str: String): String\\n}\\n\\n\\\"Queries return all requested data, without any side effects\\\"\\ntype Query {\\n  ping: String!\\n}\\n\";\n\n/* babel-plugin-inline-import './catalog.graphql' */\nconst catalog = \"\\\"The list of currently supported social network identifiers\\\"\\nenum SocialNetwork {\\n  twitter\\n  facebook\\n  pinterest\\n  googleplus\\n}\\n\\n\\\"Represents the minimum and maximum price of a product, among all its variants\\\"\\ntype PriceRange {\\n  \\\"\\\"\\\"\\n  A range display string in the format \\\"min - max\\\", without any currency symbol\\n  \\\"\\\"\\\"\\n  range: String!\\n\\n  \\\"The price, in shop currency, of the least expensive possible variant with the least expensive possible option\\\"\\n  min: Float!\\n\\n  \\\"The price, in shop currency, of the most expensive possible variant with the most expensive possible option\\\"\\n  max: Float!\\n}\\n\\n\\\"Holds metadata specific to a specific social network service\\\"\\ntype SocialMetadata {\\n  \\\"Which social network is this metadata for\\\"\\n  service: SocialNetwork\\n\\n  \\\"Default share message to use when sharing this product on this social network\\\"\\n  message: String\\n}\\n\\n\\\"This interface represents the fields that are identical for both Products and Variants\\\"\\ninterface CatalogProductOrVariant {\\n  barcode: String\\n  compareAtPrice: Float\\n\\n  # This should be required but we need to migrate existing data first\\n  createdAt: DateTime\\n  height: Float\\n  isLowQuantity: Boolean!\\n  isSoldOut: Boolean!\\n  isTaxable: Boolean!\\n  length: Float\\n  lowInventoryWarningThreshold: Int\\n  metafields: [Metafield]\\n  minOrderQuantity: Int\\n  originCountry: String\\n  shop: Shop!\\n  sku: String\\n  taxCode: String\\n  taxDescription: String\\n  title: String\\n\\n  # This should be required but we need to migrate existing data first\\n  updatedAt: DateTime\\n  weight: Float\\n  width: Float\\n}\\n\\n\\\"\\\"\\\"\\nRepresents a product that has been published into a shop catalog. The related `Product` is the source of truth for\\nshop administrators, but that is then published to a catalog as a `CatalogProduct`, which is what should\\nbe displayed to shoppers who browse that catalog.\\n\\\"\\\"\\\"\\ntype CatalogProduct implements CatalogProductOrVariant & Node {\\n  \\\"The CatalogProduct ID. Do not assume that this is the same as the related product ID. See `productId` for that.\\\"\\n  _id: ID!\\n\\n  \\\"The product barcode value, if it has one\\\"\\n  barcode: String\\n\\n  \\\"A comparison price value, assumed to be in the default shop currency\\\"\\n  compareAtPrice: Float\\n\\n  \\\"The date and time at which this CatalogProduct was created, which is when the related product was first published\\\"\\n  createdAt: DateTime!\\n\\n  \\\"The full product description, which may have newline characters in it\\\"\\n  description: String\\n\\n  \\\"The height of the product, if it has physical dimensions\\\"\\n  height: Float\\n\\n  \\\"True if isSoldOut is true AND none of the variants have an inventoryPolicy set\\\"\\n  isBackorder: Boolean!\\n\\n  \\\"True if this product has been deleted. Typically, deleted products are not returned in queries.\\\"\\n  isDeleted: Boolean!\\n\\n  \\\"True if at least one of the variants has inventoryManagement enabled and has an available quantity less than its lowInventoryWarningThreshold\\\"\\n  isLowQuantity: Boolean!\\n\\n  \\\"True if every product variant has inventoryManagement enabled and has 0 inventory\\\"\\n  isSoldOut: Boolean!\\n\\n  \\\"Is sales tax charged on this item?\\\"\\n  isTaxable: Boolean!\\n\\n  \\\"True if this product should be shown to shoppers. Typically, non-visible products are not returned in queries.\\\"\\n  isVisible: Boolean!\\n\\n  \\\"The length of the product, if it has physical dimensions\\\"\\n  length: Float\\n\\n  \\\"The quantity value below which `isLowQuantity` should be true\\\"\\n  lowInventoryWarningThreshold: Int\\n\\n  \\\"Arbitrary additional metadata about this product\\\"\\n  metafields: [Metafield]\\n\\n  \\\"The product description to use for page `description` meta element in HTML\\\"\\n  metaDescription: String\\n\\n  \\\"The minimum quantity that must be added to a cart\\\"\\n  minOrderQuantity: Int\\n\\n  \\\"The country of origin\\\"\\n  originCountry: String\\n\\n  \\\"Subtitle\\\"\\n  pageTitle: String\\n\\n  \\\"Dimensions and other information about the containers in which this product will be shipped\\\"\\n  parcel: ShippingParcel\\n\\n  \\\"The range of prices among all variants\\\"\\n  price: PriceRange\\n\\n  \\\"All media for this product and its variants\\\"\\n  media: [ImageInfo]\\n\\n  \\\"The primary image\\\"\\n  primaryImage: ImageInfo\\n\\n  \\\"The related Product ID\\\"\\n  productId: ID!\\n\\n  \\\"An arbitrary product type value, such as from an external system\\\"\\n  productType: String\\n\\n  \\\"\\\"\\\"\\n  Is this a product that needs to be shipped? For example, if no products in a shopper's cart require shipping,\\n  then a checkout flow may choose not to require entry of a shipping address.\\n  \\\"\\\"\\\"\\n  requiresShipping: Boolean!\\n\\n  \\\"The shop to which this product belongs\\\"\\n  shop: Shop!\\n\\n  \\\"A stock keeping unit (SKU) identifier for this product\\\"\\n  sku: String\\n\\n  \\\"A URL-safe and human-readable string that uniquely identifies this product\\\"\\n  slug: String\\n\\n  \\\"Holds metadata specific to a specific social network service\\\"\\n  socialMetadata: [SocialMetadata]\\n\\n  \\\"The list of tag IDs that have been applied to this product\\\"\\n  tagIds: [ID]\\n\\n  \\\"The list of tags that have been applied to this product\\\"\\n  tags(after: ConnectionCursor, before: ConnectionCursor, first: ConnectionLimitInt, last: ConnectionLimitInt, sortOrder: SortOrder = asc, sortBy: TagSortByField = _id): TagConnection\\n\\n  \\\"A value matching a `taxCode` value from the full list of TaxCodes\\\"\\n  taxCode: String\\n\\n  \\\"A description to use for the tax line item on an invoice\\\"\\n  taxDescription: String\\n\\n  \\\"Product title\\\"\\n  title: String\\n\\n  \\\"The date and time at which this CatalogProduct was last updated, which is when the related product was most recently published\\\"\\n  updatedAt: DateTime!\\n\\n  \\\"A flat list of all variants for this product\\\"\\n  variants: [CatalogProductVariant]\\n\\n  \\\"The product vendor or manufacturer, for display\\\"\\n  vendor: String\\n\\n  \\\"The weight of the product on Earth, if it has physical dimensions\\\"\\n  weight: Float\\n\\n  \\\"The width of the product, if it has physical dimensions\\\"\\n  width: Float\\n}\\n\\ntype CatalogProductVariant implements CatalogProductOrVariant & Node {\\n  \\\"The CatalogProductVariant ID. Do not assume that this is the same as the related variant ID. See `variantId` for that.\\\"\\n  _id: ID!\\n\\n  \\\"The list of ancestor product or variant IDs, in order from top to bottom\\\"\\n  ancestorIds: [ID]!\\n\\n  \\\"The product variant barcode value, if it has one\\\"\\n  barcode: String\\n\\n  \\\"A comparison price value, assumed to be in the default shop currency\\\"\\n  compareAtPrice: Float\\n\\n  \\\"The date and time at which this CatalogProductVariant was created, which is when the related product was first published\\\"\\n  createdAt: DateTime\\n\\n  \\\"The height of the product variant, if it has physical dimensions\\\"\\n  height: Float\\n\\n  \\\"The position of this variant among other variants at the same level of the product-variant-option hierarchy\\\"\\n  index: Int!\\n\\n  \\\"True if inventory management is enabled for this variant\\\"\\n  inventoryManagement: Boolean!\\n\\n  \\\"True if inventory policy is enabled for this variant\\\"\\n  inventoryPolicy: Boolean!\\n\\n  \\\"True if inventoryManagement is enabled and this variant has an available quantity less than its lowInventoryWarningThreshold\\\"\\n  isLowQuantity: Boolean!\\n\\n  \\\"True if inventoryManagement is enabled and this variant has 0 inventory\\\"\\n  isSoldOut: Boolean!\\n\\n  \\\"Is sales tax charged on this item?\\\"\\n  isTaxable: Boolean!\\n\\n  \\\"The length of the product, if it has physical dimensions\\\"\\n  length: Float\\n\\n  \\\"The quantity value below which `isLowQuantity` should be true\\\"\\n  lowInventoryWarningThreshold: Int\\n\\n  \\\"Arbitrary additional metadata about this product\\\"\\n  metafields: [Metafield]\\n\\n  \\\"The minimum quantity that must be added to a cart\\\"\\n  minOrderQuantity: Int\\n\\n  \\\"An option title. If this is set and this variant has a CatalogProductVariant parent, treat this variant as an option\\\"\\n  optionTitle: String\\n\\n  \\\"The country of origin\\\"\\n  originCountry: String\\n\\n  \\\"The price, in the default shop currency\\\"\\n  price: Float!\\n\\n  \\\"The shop to which this product variant belongs\\\"\\n  shop: Shop!\\n\\n  \\\"A stock keeping unit (SKU) identifier for this product\\\"\\n  sku: String\\n\\n  \\\"A value matching a `taxCode` value from the full list of TaxCodes\\\"\\n  taxCode: String\\n\\n  \\\"A description to use for the tax line item on an invoice\\\"\\n  taxDescription: String\\n\\n  \\\"Product title\\\"\\n  title: String\\n\\n  \\\"The date and time at which this CatalogProduct was last updated, which is when the related product was most recently published\\\"\\n  updatedAt: DateTime\\n\\n  \\\"The related Variant ID\\\"\\n  variantId: ID!\\n\\n  \\\"The weight of the product on Earth, if it has physical dimensions\\\"\\n  weight: Float\\n\\n  \\\"The width of the product, if it has physical dimensions\\\"\\n  width: Float\\n}\\n\\n\\\"A tag-specific page position by which you can sort catalog items\\\"\\ntype CatalogItemPosition {\\n  \\\"Items with greater weight should be displayed larger\\\"\\n  displayWeight: Int!\\n\\n  \\\"True if the item position is pinned\\\"\\n  isPinned: Boolean!\\n\\n  \\\"A positive integer to use when sorting catalog items by default sort\\\"\\n  position: Int!\\n\\n  \\\"Use these position and display weight rules when displaying filtered by this tag\\\"\\n  tagId: ID!\\n\\n  \\\"The date and time at which this item position was last updated\\\"\\n  updatedAt: DateTime\\n}\\n\\n\\\"\\\"\\\"\\nCatalog items are combined to create a catalog. Each item can represent a different type of content.\\n\\\"\\\"\\\"\\ninterface CatalogItem {\\n  _id: ID!\\n  shop: Shop!\\n  positions: [CatalogItemPosition]!\\n  createdAt: DateTime\\n  updatedAt: DateTime\\n}\\n\\n\\\"Represents a catalog item that displays a product\\\"\\ntype CatalogItemProduct implements CatalogItem & Node {\\n  \\\"The CatalogItemProduct ID\\\"\\n  _id: ID!\\n\\n  \\\"The shop to which this catalog belongs\\\"\\n  shop: Shop!\\n\\n  \\\"The manually set display positions and weights within the associated catalog, per tag filter\\\"\\n  positions: [CatalogItemPosition]!\\n\\n  \\\"The catalog product\\\"\\n  product: CatalogProduct\\n\\n  \\\"The date and time at which this CatalogItem was first created, which is when the related product was first published\\\"\\n  createdAt: DateTime!\\n\\n  \\\"The date and time at which this CatalogItem was last updated, which is when the related product was most recently published\\\"\\n  updatedAt: DateTime!\\n}\\n\\n\\\"Represents a catalog item that displays some non-product content\\\"\\ntype CatalogItemContent implements CatalogItem & Node {\\n  \\\"The CatalogItemProduct ID\\\"\\n  _id: ID!\\n\\n  \\\"The shop to which this catalog belongs\\\"\\n  shop: Shop!\\n\\n  \\\"The manually set display positions and weights within the associated catalog, per tag filter\\\"\\n  positions: [CatalogItemPosition]!\\n\\n  \\\"The date and time at which this CatalogItem was first created\\\"\\n  createdAt: DateTime!\\n\\n  \\\"The date and time at which this CatalogItem was last updated\\\"\\n  updatedAt: DateTime!\\n}\\n\\ntype CatalogItemEdge {\\n  cursor: ConnectionCursor!\\n  node: CatalogItem\\n}\\n\\ntype CatalogItemConnection {\\n  edges: [CatalogItemEdge]\\n  nodes: [CatalogItem]\\n  pageInfo: PageInfo!\\n  totalCount: Int!\\n}\\n\\ntype Catalog implements Node {\\n  \\\"The Catalog ID\\\"\\n  _id: ID!\\n\\n  \\\"The shop to which this catalog belongs\\\"\\n  shop: Shop!\\n\\n  \\\"The date and time at which this Catalog was first created\\\"\\n  createdAt: DateTime!\\n\\n  \\\"The date and time at which this Catalog was last updated\\\"\\n  updatedAt: DateTime!\\n}\\n\\nenum CatalogItemSortByField {\\n  _id\\n  createdAt\\n  updatedAt\\n}\\n\\nextend type Query {\\n  \\\"Gets items from a shop catalog\\\"\\n  catalogItems(\\n    \\\"Provide a list of shop IDs from which you want to get catalog items\\\"\\n    shopIds: [ID]!\\n\\n    \\\"Optionally provide a list of tag IDs to further filter the item list\\\"\\n    tagIds: [ID],\\n\\n    after: ConnectionCursor,\\n    before: ConnectionCursor,\\n    first: ConnectionLimitInt,\\n    last: ConnectionLimitInt,\\n    sortOrder: SortOrder = desc,\\n\\n    \\\"By default, items are sorted by when they were created, newest first. Set this to sort by one of the other allowed fields\\\"\\n    sortBy: CatalogItemSortByField = createdAt\\n  ): CatalogItemConnection\\n}\\n\";\n\n/* babel-plugin-inline-import './currency.graphql' */\nconst currency = \"\\\"Represents one type of currency\\\"\\ntype Currency implements Node {\\n  _id: ID!\\n  code: String!\\n  symbol: String!\\n  format: String!\\n  scale: Int\\n  decimal: String\\n  thousand: String\\n  rate: Float\\n}\\n\\n\\\"Wraps a list of `Currencies`, providing pagination cursors and information.\\\"\\ntype CurrencyConnection implements NodeConnection {\\n  edges: [CurrencyEdge]\\n  nodes: [Currency]\\n  pageInfo: PageInfo!\\n  totalCount: Int!\\n}\\n\\n\\\"A connection edge in which each node is an `Currency` object\\\"\\ntype CurrencyEdge implements NodeEdge {\\n  cursor: ConnectionCursor!\\n  node: Currency\\n}\\n\";\n\n/* babel-plugin-inline-import './email.graphql' */\nconst email = \"\\\"A string email address\\\"\\nscalar Email\\n\\n\\\"A confirmable email record\\\"\\ntype EmailRecord {\\n  provides: String\\n\\n  \\\"The actual email address\\\"\\n  address: Email\\n\\n  \\\"Has this address been verified?\\\"\\n  verified: Boolean\\n}\\n\";\n\n/* babel-plugin-inline-import './group.graphql' */\nconst group = \"\\\"The fields by which you are allowed to sort any query that returns an `GroupConnection`\\\"\\nenum GroupSortByField {\\n  _id\\n  name\\n  createdAt\\n  updatedAt\\n}\\n\\n\\\"A group definition\\\"\\ninput GroupInput {\\n  \\\"A free text description of this group\\\"\\n  description: String\\n\\n  \\\"A unique name for the group\\\"\\n  name: String!\\n\\n  \\\"A list of the account permissions implied by membership in this group\\\"\\n  permissions: [String]\\n\\n  \\\"A unique URL-safe string representing this group\\\"\\n  slug: String!\\n}\\n\\n\\\"The details for creating a group\\\"\\ninput CreateGroupInput {\\n  \\\"An optional string identifying the mutation call, which will be returned in the response payload\\\"\\n  clientMutationId: String\\n\\n  \\\"The group to create\\\"\\n  group: GroupInput!\\n\\n  \\\"The ID of the shop this group belongs to\\\"\\n  shopId: ID!\\n}\\n\\n\\\"The details for updating a group\\\"\\ninput UpdateGroupInput {\\n  \\\"An optional string identifying the mutation call, which will be returned in the response payload\\\"\\n  clientMutationId: String\\n\\n  \\\"The group ID\\\"\\n  id: ID!\\n\\n  \\\"The ID of the shop this group belongs to\\\"\\n  shopId: ID!\\n\\n  \\\"The changes to apply to the group\\\"\\n  updates: GroupInput!\\n}\\n\\n\\\"The details for removing a group\\\"\\ninput RemoveGroupInput {\\n  \\\"An optional string identifying the mutation call, which will be returned in the response payload\\\"\\n  clientMutationId: String\\n\\n  \\\"The group ID\\\"\\n  id: ID!\\n}\\n\\n\\\"Defines a group and account that should be linked\\\"\\ninput AddAccountToGroupInput {\\n  \\\"The account ID\\\"\\n  accountId: ID!\\n\\n  \\\"The group ID\\\"\\n  groupId: ID!\\n\\n  \\\"An optional string identifying the mutation call, which will be returned in the response payload\\\"\\n  clientMutationId: String\\n}\\n\\n\\\"Defines a group and account that should be unlinked\\\"\\ninput RemoveAccountFromGroupInput {\\n  \\\"The account ID\\\"\\n  accountId: ID!\\n\\n  \\\"An optional string identifying the mutation call, which will be returned in the response payload\\\"\\n  clientMutationId: String\\n\\n  \\\"The group ID\\\"\\n  groupId: ID!\\n}\\n\\n\\\"Represents an account group\\\"\\ntype Group implements Node {\\n  \\\"The group ID\\\"\\n  _id: ID!\\n\\n  \\\"The date and time at which this group was created\\\"\\n  createdAt: DateTime!\\n\\n  \\\"The account that created this group\\\"\\n  createdBy: Account\\n\\n  \\\"A free text description of this group\\\"\\n  description: String\\n\\n  \\\"A unique name for the group\\\"\\n  name: String!\\n\\n  \\\"A list of the account permissions implied by membership in this group\\\"\\n  permissions: [String]\\n\\n  \\\"The shop to which this group belongs\\\"\\n  shop: Shop\\n\\n  \\\"A unique URL-safe string representing this group\\\"\\n  slug: String!\\n\\n  \\\"The date and time at which this group was last updated\\\"\\n  updatedAt: DateTime!\\n}\\n\\n\\\"Wraps a list of `Groups`, providing pagination cursors and information.\\\"\\ntype GroupConnection implements NodeConnection {\\n  edges: [GroupEdge]\\n  nodes: [Group]\\n  pageInfo: PageInfo!\\n  totalCount: Int!\\n}\\n\\n\\\"A connection edge in which each node is a `Group` object\\\"\\ntype GroupEdge implements NodeEdge {\\n  cursor: ConnectionCursor!\\n  node: Group\\n}\\n\\n\\\"The response from the `addAccountToGroup` mutation\\\"\\ntype AddAccountToGroupPayload {\\n  \\\"The updated group\\\"\\n  group: Group\\n\\n  \\\"The same string you sent with the mutation params, for matching mutation calls with their responses\\\"\\n  clientMutationId: String\\n}\\n\\n\\\"The response from the `createGroup` mutation\\\"\\ntype CreateGroupPayload {\\n  \\\"The new group\\\"\\n  group: Group\\n\\n  \\\"The same string you sent with the mutation params, for matching mutation calls with their responses\\\"\\n  clientMutationId: String\\n}\\n\\n\\\"The response from the `updateGroup` mutation\\\"\\ntype UpdateGroupPayload {\\n  \\\"The updated group\\\"\\n  group: Group\\n\\n  \\\"The same string you sent with the mutation params, for matching mutation calls with their responses\\\"\\n  clientMutationId: String\\n}\\n\\n\\\"The response from the `removeAccountFromGroup` mutation\\\"\\ntype RemoveAccountFromGroupPayload {\\n  \\\"The updated group\\\"\\n  group: Group\\n\\n  \\\"The same string you sent with the mutation params, for matching mutation calls with their responses\\\"\\n  clientMutationId: String\\n}\\n\\n\\\"The response from the `removeGroup` mutation\\\"\\ntype RemoveGroupPayload {\\n  \\\"Successfully removed?\\\"\\n  wasRemoved: Boolean!\\n\\n  \\\"The same string you sent with the mutation params, for matching mutation calls with their responses\\\"\\n  clientMutationId: String\\n}\\n\\nextend type Mutation {\\n  \\\"Add an account to a group\\\"\\n  addAccountToGroup(input: AddAccountToGroupInput!): AddAccountToGroupPayload\\n\\n  \\\"Create a new permission group\\\"\\n  createGroup(input: CreateGroupInput!): CreateGroupPayload\\n\\n  \\\"Update an existing permission group\\\"\\n  updateGroup(input: UpdateGroupInput!): UpdateGroupPayload\\n\\n  \\\"Remove an account from a group\\\"\\n  removeAccountFromGroup(input: RemoveAccountFromGroupInput!): RemoveAccountFromGroupPayload\\n\\n  \\\"Remove an existing permission group\\\"\\n  removeGroup(input: RemoveGroupInput!): RemoveGroupPayload\\n}\\n\\nextend type Query {\\n  \\\"Returns a single group by ID.\\\"\\n  group(id: ID!): Group\\n\\n  \\\"Returns a list of groups for the shop with ID `shopId`, as a Relay-compatible connection.\\\"\\n  groups(shopId: ID!, after: ConnectionCursor, before: ConnectionCursor, first: ConnectionLimitInt, last: ConnectionLimitInt, sortOrder: SortOrder = asc, sortBy: GroupSortByField = createdAt): GroupConnection\\n}\\n\";\n\n/* babel-plugin-inline-import './metafield.graphql' */\nconst metafield = \"\\\"User defined attributes. You can include only `key` and use these like tags, or also include a `value`.\\\"\\ninput MetafieldInput {\\n  description: String\\n  key: String!\\n  namespace: String\\n  scope: String\\n  value: String\\n  valueType: String\\n}\\n\\n\\\"User defined attributes\\\"\\ntype Metafield {\\n  description: String\\n  key: String\\n  namespace: String\\n  scope: String\\n  value: String\\n  valueType: String\\n}\\n\";\n\n/* babel-plugin-inline-import './node.graphql' */\nconst node = \"scalar ConnectionCursor\\nscalar ConnectionLimitInt\\n\\n\\\"The order in which the connection results should be sorted, based on the `sortBy` field.\\\"\\nenum SortOrder {\\n  \\\"ascending\\\"\\n  asc\\n\\n  \\\"descending\\\"\\n  desc\\n}\\n\\n\\\"Objects implementing the `Node` interface will always have an `_id` field that is globally unique.\\\"\\ninterface Node {\\n  \\\"The ID of the object\\\"\\n  _id: ID!\\n}\\n\\n\\\"Objects implementing the `Deletable` support soft deletion\\\"\\ninterface Deletable {\\n  \\\"\\\"\\\"\\n  If `true`, this object should be considered deleted. Soft deleted objects are not\\n  returned in query results unless you explicitly ask for them.\\n  \\\"\\\"\\\"\\n  isDeleted: Boolean!\\n}\\n\\n\\\"\\\"\\\"\\nObjects implementing the `NodeEdge` interface will always have a `node` and a `cursor`\\nthat represents that node for purposes of requesting paginated results.\\n\\\"\\\"\\\"\\ninterface NodeEdge {\\n  \\\"The cursor that represents this node in the paginated results\\\"\\n  cursor: ConnectionCursor!\\n\\n  \\\"The node itself\\\"\\n  node: Node\\n}\\n\\n\\\"\\\"\\\"\\nObjects implementing the `NodeConnection` interface are Relay-compatible connections.\\n\\nFor information about what Relay-style connections are and how to use them, see the following articles:\\n- [Relay Connection Documentation](https://facebook.github.io/relay/docs/en/graphql-server-specification.html#connections)\\n- [Relay Connection Specification](https://facebook.github.io/relay/graphql/connections.htm)\\n- [Using Relay-style Connections With Apollo Client](https://www.apollographql.com/docs/react/recipes/pagination.html)\\n\\\"\\\"\\\"\\ninterface NodeConnection {\\n  \\\"The list of nodes that match the query, wrapped in an edge to provide a cursor string for each\\\"\\n  edges: [NodeEdge]\\n\\n  \\\"\\\"\\\"\\n  You can request the `nodes` directly to avoid the extra wrapping that `NodeEdge` has,\\n  if you know you will not need to paginate the results.\\n  \\\"\\\"\\\"\\n  nodes: [Node]\\n\\n  \\\"Information to help a client request the next or previous page\\\"\\n  pageInfo: PageInfo!\\n\\n  \\\"The total number of nodes that match your query\\\"\\n  totalCount: Int!\\n}\\n\\n\\\"\\\"\\\"\\nPagination information. When requesting pages of results, you can use `endCursor` or `startCursor`\\nas your `before` or `after` parameters for the query you are paging.\\n\\\"\\\"\\\"\\ntype PageInfo {\\n  \\\"When paginating forwards, the cursor to continue.\\\"\\n  endCursor: ConnectionCursor\\n\\n  \\\"When paginating forwards, are there more items?\\\"\\n  hasNextPage: Boolean!\\n\\n  \\\"When paginating backwards, are there more items?\\\"\\n  hasPreviousPage: Boolean!\\n\\n  \\\"When paginating backwards, the cursor to continue.\\\"\\n  startCursor: ConnectionCursor\\n}\\n\";\n\n/* babel-plugin-inline-import './role.graphql' */\nconst role = \"\\\"The fields by which you are allowed to sort any query that returns an `RoleConnection`\\\"\\nenum RoleSortByField {\\n  _id\\n  name\\n}\\n\\n\\\"Represents a named role\\\"\\ntype Role implements Node {\\n  \\\"The role ID\\\"\\n  _id: ID!\\n\\n  \\\"A unique name for the role\\\"\\n  name: String!\\n}\\n\\n\\\"Wraps a list of `Roles`, providing pagination cursors and information.\\\"\\ntype RoleConnection implements NodeConnection {\\n  edges: [RoleEdge]\\n  nodes: [Role]\\n  pageInfo: PageInfo!\\n  totalCount: Int!\\n}\\n\\n\\\"A connection edge in which each node is a `Role` object\\\"\\ntype RoleEdge implements NodeEdge {\\n  cursor: ConnectionCursor!\\n  node: Role\\n}\\n\\nextend type Query {\\n  \\\"Returns a paged list of all roles associated with a shop\\\"\\n  roles(shopId: ID!, after: ConnectionCursor, before: ConnectionCursor, first: ConnectionLimitInt, last: ConnectionLimitInt, sortOrder: SortOrder = asc, sortBy: RoleSortByField = name): RoleConnection\\n}\\n\";\n\n/* babel-plugin-inline-import './shipping.graphql' */\nconst shipping = \"type ShippingParcel {\\n  containers: String\\n  length: Float\\n  width: Float\\n  height: Float\\n  weight: Float\\n}\\n\";\n\n/* babel-plugin-inline-import './shop.graphql' */\nconst shop = \"\\\"Represents a Reaction shop\\\"\\ntype Shop implements Node {\\n  \\\"The shop ID\\\"\\n  _id: ID!\\n\\n  \\\"\\\"\\\"\\n  Returns a list of administrators for this shop, as a Relay-compatible connection.\\n  \\\"Administrators\\\" means all linked accounts that have the \\\"admin\\\" role for this shop.\\n  \\\"\\\"\\\"\\n  administrators(after: ConnectionCursor, before: ConnectionCursor, first: ConnectionLimitInt, last: ConnectionLimitInt, sortOrder: SortOrder = asc, sortBy: AccountSortByField = createdAt): AccountConnection\\n\\n  currencies: [Currency]\\n\\n  currency: Currency\\n\\n  \\\"Returns a list of groups for this shop, as a Relay-compatible connection.\\\"\\n  groups(after: ConnectionCursor, before: ConnectionCursor, first: ConnectionLimitInt, last: ConnectionLimitInt, sortOrder: SortOrder = asc, sortBy: GroupSortByField = createdAt): GroupConnection\\n\\n  \\\"Returns a list of roles for this shop, as a Relay-compatible connection.\\\"\\n  roles(after: ConnectionCursor, before: ConnectionCursor, first: ConnectionLimitInt, last: ConnectionLimitInt, sortOrder: SortOrder = asc, sortBy: RoleSortByField = name): RoleConnection\\n\\n  \\\"Returns a paged list of tags for this shop\\\"\\n  tags(\\n    \\\"If set, the query will return only top-level tags or only non-top-level tags. By default, both types of tags are returned.\\\"\\n    isTopLevel: Boolean,\\n\\n    \\\"Set to true if you want soft deleted tags to be included in the response\\\"\\n    shouldIncludeDeleted: Boolean = false,\\n\\n    after: ConnectionCursor,\\n    before: ConnectionCursor,\\n    first: ConnectionLimitInt,\\n    last: ConnectionLimitInt,\\n    sortOrder: SortOrder = asc,\\n\\n    \\\"By default, tags are sorted by position. Set this to sort by one of the other allowed fields\\\"\\n    sortBy: TagSortByField = position\\n  ): TagConnection\\n}\\n\\n\\\"Input parameters for the inviteShopMember mutation\\\"\\ninput InviteShopMemberInput {\\n  \\\"The email address of the person to invite\\\"\\n  email: String!\\n\\n  \\\"The permission group for this person's new account\\\"\\n  groupId: ID!\\n\\n  \\\"The invitee's full name\\\"\\n  name: String!\\n\\n  \\\"The ID of the shop to which you want to invite this person\\\"\\n  shopId: ID!\\n\\n  \\\"An optional string identifying the mutation call, which will be returned in the response payload\\\"\\n  clientMutationId: String\\n}\\n\\n\\\"The response from the `inviteShopMember` mutation\\\"\\ntype InviteShopMemberPayload {\\n  \\\"The account that was successfully created or found and updated by inviting this shop member\\\"\\n  account: Account\\n\\n  \\\"The same string you sent with the mutation params, for matching mutation calls with their responses\\\"\\n  clientMutationId: String\\n}\\n\\nextend type Mutation {\\n  \\\"\\\"\\\"\\n  Given a person's email address and name, invite them to create an account for a certain shop,\\n  and put them in the provided permission group\\n  \\\"\\\"\\\"\\n  inviteShopMember(input: InviteShopMemberInput!): InviteShopMemberPayload\\n}\\n\\nextend type Query {\\n  \\\"Returns a shop by ID\\\"\\n  shop(id: ID!): Shop\\n\\n  \\\"Returns the ID of the primary shop for the domain\\\"\\n  primaryShopId: ID\\n}\\n\";\n\n/* babel-plugin-inline-import './tag.graphql' */\nconst tag = \"\\\"Represents a single tag\\\"\\ntype Tag implements Node & Deletable {\\n  \\\"The tag ID\\\"\\n  _id: ID!\\n\\n  \\\"The date and time at which this tag was created\\\"\\n  createdAt: DateTime!\\n\\n  \\\"\\\"\\\"\\n  If `true`, this object should be considered deleted. Soft deleted objects are not\\n  returned in query results unless you explicitly ask for them.\\n  \\\"\\\"\\\"\\n  isDeleted: Boolean!\\n\\n  \\\"If `true`, this tag should be shown at the top level of the tag hierarchy\\\"\\n  isTopLevel: Boolean!\\n\\n  \\\"Arbitrary additional metadata about this tag\\\"\\n  metafields: [Metafield]\\n\\n  \\\"The display name for the tag. This is unique within a given shop.\\\"\\n  name: String!\\n\\n  \\\"The tag's position relative to other tags at the same level of the tag hierarchy\\\"\\n  position: Int\\n\\n  \\\"A list of the IDs of tags that have this tag as their parent in the tag hierarchy, in the user-defined order\\\"\\n  subTagIds: [ID]!\\n\\n  \\\"A paged list of tags that have this tag as their parent in the tag hierarchy. Currently only three levels are supported.\\\"\\n  subTags(after: ConnectionCursor, before: ConnectionCursor, first: ConnectionLimitInt, last: ConnectionLimitInt, sortOrder: SortOrder = asc, sortBy: TagSortByField = position): TagConnection\\n\\n  \\\"The shop to which this tag belongs\\\"\\n  shop: Shop!\\n\\n  \\\"A unique URL-safe string representing this tag for links\\\"\\n  slug: String\\n\\n  \\\"The date and time at which this tag was last updated\\\"\\n  updatedAt: DateTime!\\n}\\n\\n\\\"The fields by which you are allowed to sort any query that returns a `TagConnection`\\\"\\nenum TagSortByField {\\n  _id\\n  createdAt\\n  name\\n  position\\n  updatedAt\\n}\\n\\n\\\"A connection edge in which each node is a `Tag` object\\\"\\ntype TagEdge implements NodeEdge {\\n  cursor: ConnectionCursor!\\n  node: Tag\\n}\\n\\n\\\"Wraps a list of `Tags`, providing pagination cursors and information.\\\"\\ntype TagConnection implements NodeConnection {\\n  edges: [TagEdge]\\n  nodes: [Tag]\\n  pageInfo: PageInfo!\\n  totalCount: Int!\\n}\\n\\nextend type Query {\\n  \\\"Returns a paged list of tags for a shop. You must include a shopId when querying.\\\"\\n  tags(\\n    \\\"Only tags associated with this shop will be returned\\\"\\n    shopId: ID!,\\n\\n    \\\"If set, the query will return only top-level tags or only non-top-level tags. By default, both types of tags are returned.\\\"\\n    isTopLevel: Boolean,\\n\\n    \\\"Set to true if you want soft deleted tags to be included in the response\\\"\\n    shouldIncludeDeleted: Boolean = false,\\n\\n    after: ConnectionCursor,\\n    before: ConnectionCursor,\\n    first: ConnectionLimitInt,\\n    last: ConnectionLimitInt,\\n    sortOrder: SortOrder = asc,\\n\\n    \\\"By default, tags are sorted by position. Set this to sort by one of the other allowed fields\\\"\\n    sortBy: TagSortByField = position\\n  ): TagConnection\\n}\\n\";\nmodule.exportDefault([base, account, address, catalog, currency, email, group, metafield, node, role, shipping, shop, tag]);","map":{"version":3,"sources":["imports/plugins/core/graphql/server/schemas/index.js"],"names":["module","exportDefault","base","account","address","catalog","currency","email","group","metafield","node","role","shipping","shop","tag"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,OAAOC,aAAP,CAce,CACbC,IADa,EAEbC,OAFa,EAGbC,OAHa,EAIbC,OAJa,EAKbC,QALa,EAMbC,KANa,EAObC,KAPa,EAQbC,SARa,EASbC,IATa,EAUbC,IAVa,EAWbC,QAXa,EAYbC,IAZa,EAabC,GAba,CAdf","sourcesContent":["import account from \"./account.graphql\";\nimport address from \"./address.graphql\";\nimport base from \"./base.graphql\";\nimport catalog from \"./catalog.graphql\";\nimport currency from \"./currency.graphql\";\nimport email from \"./email.graphql\";\nimport group from \"./group.graphql\";\nimport metafield from \"./metafield.graphql\";\nimport node from \"./node.graphql\";\nimport role from \"./role.graphql\";\nimport shipping from \"./shipping.graphql\";\nimport shop from \"./shop.graphql\";\nimport tag from \"./tag.graphql\";\n\nexport default [\n  base,\n  account,\n  address,\n  catalog,\n  currency,\n  email,\n  group,\n  metafield,\n  node,\n  role,\n  shipping,\n  shop,\n  tag\n];\n"]},"sourceType":"script","hash":"67c0c60792c10cfc96553f1bc8db976521dc2dc8"}
