{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/included/taxes-taxcloud/server/hooks/hooks.js","filename":"imports/plugins/included/taxes-taxcloud/server/hooks/hooks.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/included/taxes-taxcloud/server/hooks/hooks.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/included/taxes-taxcloud/server/hooks/hooks.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/included/taxes-taxcloud/server/hooks/hooks.js"}},"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet HTTP;\nmodule.watch(require(\"meteor/http\"), {\n  HTTP(v) {\n    HTTP = v;\n  }\n\n}, 1);\nlet Logger, MethodHooks;\nmodule.watch(require(\"../../../../../../server/api\"), {\n  Logger(v) {\n    Logger = v;\n  },\n\n  MethodHooks(v) {\n    MethodHooks = v;\n  }\n\n}, 2);\nlet Shops, Cart, Packages;\nmodule.watch(require(\"../../../../../../lib/collections\"), {\n  Shops(v) {\n    Shops = v;\n  },\n\n  Cart(v) {\n    Cart = v;\n  },\n\n  Packages(v) {\n    Packages = v;\n  }\n\n}, 3);\n//\n// this entire method will run after the core/taxes\n// plugin runs the taxes/calculate method\n// it overrwites any previous tax calculation\n// tax methods precendence is determined by\n// load order of plugins\n//\nMethodHooks.after(\"taxes/calculate\", options => {\n  const result = options.result || {};\n  let origin = {};\n  const cartId = options.arguments[0];\n  const cartToCalc = Cart.findOne(cartId);\n\n  if (cartToCalc) {\n    const {\n      shopId\n    } = cartToCalc;\n    const shop = Shops.findOne(shopId);\n    const pkg = Packages.findOne({\n      name: \"taxes-taxcloud\",\n      shopId,\n      enabled: true\n    }); // check if package is configured\n\n    if (shop && pkg && pkg.settings.taxcloud) {\n      const {\n        apiKey,\n        apiLoginId\n      } = pkg.settings.taxcloud; // get shop address\n      // this will need some refactoring\n      // for multi-vendor/shop orders\n\n      if (shop.addressBook) {\n        const shopAddress = shop.addressBook[0];\n        origin = {\n          Address1: shopAddress.address1,\n          City: shopAddress.city,\n          State: shopAddress.region,\n          Zip5: shopAddress.postal\n        };\n      } // check if plugin is enabled and this calculation method is enabled\n\n\n      if (pkg && pkg.enabled === true && pkg.settings.taxcloud.enabled === true) {\n        if (!apiKey || !apiLoginId) {\n          Logger.warn(\"TaxCloud API Key is required.\");\n        }\n\n        if (Array.isArray(cartToCalc.shipping) && cartToCalc.shipping.length > 0 && cartToCalc.items) {\n          const shippingAddress = cartToCalc.shipping[0].address;\n\n          if (shippingAddress) {\n            Logger.debug(\"TaxCloud triggered on taxes/calculate for cartId:\", cartId);\n            const url = \"https://api.taxcloud.net/1.0/TaxCloud/Lookup\";\n            const cartItems = [];\n            const destination = {\n              Address1: shippingAddress.address1,\n              City: shippingAddress.city,\n              State: shippingAddress.region,\n              Zip5: shippingAddress.postal\n            }; // format cart items to TaxCloud structure\n\n            let index = 0;\n\n            for (const items of cartToCalc.items) {\n              // only processs taxable products\n              if (items.variants.taxable === true) {\n                const item = {\n                  Index: index,\n                  ItemID: items.variants._id,\n                  TIC: \"00000\",\n                  Price: items.variants.price,\n                  Qty: items.quantity\n                };\n                index += 1;\n                cartItems.push(item);\n              }\n            } // request object\n\n\n            const request = {\n              headers: {\n                \"accept\": \"application/json\",\n                \"content-type\": \"application/json\"\n              },\n              data: {\n                apiKey,\n                apiLoginId,\n                customerID: cartToCalc.userId,\n                cartItems,\n                origin,\n                destination,\n                cartID: cartId,\n                deliveredBySeller: false\n              }\n            };\n            HTTP.post(url, request, (error, response) => {\n              let taxRate = 0; // ResponseType 3 is a successful call.\n\n              if (!error && response.data.ResponseType === 3) {\n                let totalTax = 0;\n\n                for (const item of response.data.CartItemsResponse) {\n                  totalTax += item.TaxAmount;\n                } // don't run this calculation if there isn't tax.\n\n\n                if (totalTax > 0) {\n                  taxRate = totalTax / cartToCalc.getSubTotal();\n                } // we should consider if we want percentage and dollar\n                // as this is assuming that subTotal actually contains everything\n                // taxable\n\n\n                Meteor.call(\"taxes/setRate\", cartId, taxRate, response.CartItemsResponse);\n              } else {\n                let errMsg = \"Unable to access service. Check credentials.\";\n\n                if (response && response.data.Messages[0].Message) {\n                  errMsg = response.data.Messages[0].Message;\n                }\n\n                Logger.warn(\"Error fetching tax rate from TaxCloud:\", errMsg);\n              }\n            });\n          }\n        }\n      }\n    }\n  } // Default return value is the return value of previous call in method chain\n  // or an empty object if there's no result yet.\n\n\n  return result;\n});","map":{"version":3,"sources":["imports/plugins/included/taxes-taxcloud/server/hooks/hooks.js"],"names":["Meteor","module","watch","require","v","HTTP","Logger","MethodHooks","Shops","Cart","Packages","after","options","result","origin","cartId","arguments","cartToCalc","findOne","shopId","shop","pkg","name","enabled","settings","taxcloud","apiKey","apiLoginId","addressBook","shopAddress","Address1","address1","City","city","State","region","Zip5","postal","warn","Array","isArray","shipping","length","items","shippingAddress","address","debug","url","cartItems","destination","index","variants","taxable","item","Index","ItemID","_id","TIC","Price","price","Qty","quantity","push","request","headers","data","customerID","userId","cartID","deliveredBySeller","post","error","response","taxRate","ResponseType","totalTax","CartItemsResponse","TaxAmount","getSubTotal","call","errMsg","Messages","Message"],"mappings":"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","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { HTTP } from \"meteor/http\";\nimport { Logger, MethodHooks } from \"/server/api\";\nimport { Shops, Cart, Packages } from \"/lib/collections\";\n\n//\n// this entire method will run after the core/taxes\n// plugin runs the taxes/calculate method\n// it overrwites any previous tax calculation\n// tax methods precendence is determined by\n// load order of plugins\n//\nMethodHooks.after(\"taxes/calculate\", (options) => {\n  const result = options.result || {};\n  let origin = {};\n\n  const cartId = options.arguments[0];\n  const cartToCalc = Cart.findOne(cartId);\n  if (cartToCalc) {\n    const { shopId } = cartToCalc;\n    const shop = Shops.findOne(shopId);\n    const pkg = Packages.findOne({\n      name: \"taxes-taxcloud\",\n      shopId,\n      enabled: true\n    });\n\n    // check if package is configured\n    if (shop && pkg && pkg.settings.taxcloud) {\n      const { apiKey, apiLoginId } = pkg.settings.taxcloud;\n\n      // get shop address\n      // this will need some refactoring\n      // for multi-vendor/shop orders\n      if (shop.addressBook) {\n        const shopAddress = shop.addressBook[0];\n        origin = {\n          Address1: shopAddress.address1,\n          City: shopAddress.city,\n          State: shopAddress.region,\n          Zip5: shopAddress.postal\n        };\n      }\n\n      // check if plugin is enabled and this calculation method is enabled\n      if (pkg && pkg.enabled === true && pkg.settings.taxcloud.enabled === true) {\n        if (!apiKey || !apiLoginId) {\n          Logger.warn(\"TaxCloud API Key is required.\");\n        }\n        if (Array.isArray(cartToCalc.shipping) && cartToCalc.shipping.length > 0 && cartToCalc.items) {\n          const shippingAddress = cartToCalc.shipping[0].address;\n\n          if (shippingAddress) {\n            Logger.debug(\"TaxCloud triggered on taxes/calculate for cartId:\", cartId);\n            const url = \"https://api.taxcloud.net/1.0/TaxCloud/Lookup\";\n            const cartItems = [];\n            const destination = {\n              Address1: shippingAddress.address1,\n              City: shippingAddress.city,\n              State: shippingAddress.region,\n              Zip5: shippingAddress.postal\n            };\n\n            // format cart items to TaxCloud structure\n            let index = 0;\n            for (const items of cartToCalc.items) {\n              // only processs taxable products\n              if (items.variants.taxable === true) {\n                const item = {\n                  Index: index,\n                  ItemID: items.variants._id,\n                  TIC: \"00000\",\n                  Price: items.variants.price,\n                  Qty: items.quantity\n                };\n                index += 1;\n                cartItems.push(item);\n              }\n            }\n\n            // request object\n            const request = {\n              headers: {\n                \"accept\": \"application/json\",\n                \"content-type\": \"application/json\"\n              },\n              data: {\n                apiKey,\n                apiLoginId,\n                customerID: cartToCalc.userId,\n                cartItems,\n                origin,\n                destination,\n                cartID: cartId,\n                deliveredBySeller: false\n              }\n            };\n\n            HTTP.post(url, request, (error, response) => {\n              let taxRate = 0;\n              // ResponseType 3 is a successful call.\n              if (!error && response.data.ResponseType === 3) {\n                let totalTax = 0;\n                for (const item of response.data.CartItemsResponse) {\n                  totalTax += item.TaxAmount;\n                }\n                // don't run this calculation if there isn't tax.\n                if (totalTax > 0) {\n                  taxRate = (totalTax / cartToCalc.getSubTotal());\n                }\n                // we should consider if we want percentage and dollar\n                // as this is assuming that subTotal actually contains everything\n                // taxable\n                Meteor.call(\"taxes/setRate\", cartId, taxRate, response.CartItemsResponse);\n              } else {\n                let errMsg = \"Unable to access service. Check credentials.\";\n                if (response && response.data.Messages[0].Message) {\n                  errMsg = response.data.Messages[0].Message;\n                }\n                Logger.warn(\"Error fetching tax rate from TaxCloud:\", errMsg);\n              }\n            });\n          }\n        }\n      }\n    }\n  }\n  // Default return value is the return value of previous call in method chain\n  // or an empty object if there's no result yet.\n  return result;\n});\n"]},"sourceType":"script","hash":"b41a4f33adf2f3a6acfd706f304c526ffc9806bb"}
