{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"lib/collections/schemas/cart.js","filename":"lib/collections/schemas/cart.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"lib/collections/schemas/cart.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"lib/collections/schemas/cart.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"lib/collections/schemas/cart.js"}},"code":"module.export({\n  CartItem: () => CartItem,\n  CartItems: () => CartItems,\n  Cart: () => Cart\n});\nlet SimpleSchema;\nmodule.watch(require(\"simpl-schema\"), {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet Tracker;\nmodule.watch(require(\"meteor/tracker\"), {\n  Tracker(v) {\n    Tracker = v;\n  }\n\n}, 2);\nlet registerSchema;\nmodule.watch(require(\"@reactioncommerce/schemas\"), {\n  registerSchema(v) {\n    registerSchema = v;\n  }\n\n}, 3);\nlet createdAtAutoValue, shopIdAutoValueForCart, updatedAtAutoValue;\nmodule.watch(require(\"./helpers\"), {\n  createdAtAutoValue(v) {\n    createdAtAutoValue = v;\n  },\n\n  shopIdAutoValueForCart(v) {\n    shopIdAutoValueForCart = v;\n  },\n\n  updatedAtAutoValue(v) {\n    updatedAtAutoValue = v;\n  }\n\n}, 4);\nlet Payment;\nmodule.watch(require(\"./payments\"), {\n  Payment(v) {\n    Payment = v;\n  }\n\n}, 5);\nlet Product, ProductVariant;\nmodule.watch(require(\"./products\"), {\n  Product(v) {\n    Product = v;\n  },\n\n  ProductVariant(v) {\n    ProductVariant = v;\n  }\n\n}, 6);\nlet Shipment, ShippingParcel;\nmodule.watch(require(\"./shipping\"), {\n  Shipment(v) {\n    Shipment = v;\n  },\n\n  ShippingParcel(v) {\n    ShippingParcel = v;\n  }\n\n}, 7);\nlet Workflow;\nmodule.watch(require(\"./workflow\"), {\n  Workflow(v) {\n    Workflow = v;\n  }\n\n}, 8);\nlet Metafield;\nmodule.watch(require(\"./metafield\"), {\n  Metafield(v) {\n    Metafield = v;\n  }\n\n}, 9);\nconst CartItem = new SimpleSchema({\n  \"_id\": {\n    type: String\n  },\n  \"productId\": {\n    type: String,\n    index: 1\n  },\n  \"shopId\": {\n    type: String,\n    autoValue: shopIdAutoValueForCart,\n    index: 1,\n    label: \"Cart Item shopId\",\n    optional: true\n  },\n  \"quantity\": {\n    label: \"Quantity\",\n    type: SimpleSchema.Integer,\n    min: 0\n  },\n  \"product\": {\n    type: Product\n  },\n  \"variants\": {\n    type: ProductVariant\n  },\n  \"metafields\": {\n    type: Array,\n    optional: true\n  },\n  \"metafields.$\": {\n    type: Metafield\n  },\n  \"title\": {\n    type: String,\n    label: \"CartItem Title\"\n  },\n  \"type\": {\n    label: \"Product Type\",\n    type: String,\n    optional: true\n  },\n  \"parcel\": {\n    type: ShippingParcel,\n    optional: true\n  },\n  \"cartItemId\": {\n    type: String,\n    optional: true\n  },\n  \"transaction\": {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  \"taxData\": {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  \"taxRate\": {\n    type: Number,\n    optional: true\n  },\n  \"shippingMethod\": {\n    type: Object,\n    optional: true,\n    blackbox: true // @todo Revert this to schema at some point\n\n  }\n}, {\n  check,\n  tracker: Tracker\n});\nregisterSchema(\"CartItem\", CartItem);\n/**\n * @name CartItems\n * @memberof schemas\n * @summary Used in check by inventory/addReserve method\n * @type {SimpleSchema}\n * @property {CartItem[]} items an Array of CartItem optional\n */\n\nconst CartItems = new SimpleSchema({\n  \"items\": {\n    type: Array,\n    optional: true\n  },\n  \"items.$\": {\n    type: CartItem\n  }\n}, {\n  check,\n  tracker: Tracker\n});\nregisterSchema(\"CartItems\", CartItems);\n/**\n * @name Cart\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} _id required for check of users' carts\n * @property {String} shopId required, Cart ShopId\n * @property {String} userId required\n * @property {String} sessionId required\n * @property {String} email optional\n * @property {CartItem[]} items Array of CartItem optional\n * @property {Shipment[]} shipping Array of Shipment optional, blackbox\n * @property {Payment[]} billing Array of Payment optional, blackbox\n * @property {Number} tax tax rate\n * @property {Object[]} taxes Array of objects optional\n * @property {Object} taxRatesByShop optional\n * @property {Number} discount optional\n * @property {Workflow} workflow optional\n * @property {Date} createdAt required\n * @property {Date} updatedAt optional\n */\n\nconst Cart = new SimpleSchema({\n  \"_id\": {\n    type: String,\n    optional: true\n  },\n  \"shopId\": {\n    type: String,\n    autoValue: shopIdAutoValueForCart,\n    index: 1,\n    label: \"Cart ShopId\"\n  },\n  \"userId\": {\n    type: String,\n    unique: true,\n\n    autoValue() {\n      if (this.isInsert || this.isUpdate) {\n        if (!this.isFromTrustedCode) {\n          return this.userId;\n        }\n      } else {\n        this.unset();\n      }\n    }\n\n  },\n  \"sessionId\": {\n    type: String,\n    index: 1\n  },\n  \"email\": {\n    type: String,\n    optional: true,\n    index: 1,\n    regEx: SimpleSchema.RegEx.Email\n  },\n  \"items\": {\n    type: Array,\n    optional: true\n  },\n  \"items.$\": {\n    type: CartItem\n  },\n  \"shipping\": {\n    type: Array,\n    optional: true\n  },\n  \"shipping.$\": {\n    type: Shipment\n  },\n  \"billing\": {\n    type: Array,\n    optional: true\n  },\n  \"billing.$\": {\n    type: Payment\n  },\n  \"tax\": {\n    type: Number,\n    optional: true\n  },\n  \"taxes\": {\n    type: Array,\n    optional: true\n  },\n  \"taxes.$\": {\n    type: Object,\n    blackbox: true\n  },\n  \"taxRatesByShop\": {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  \"taxCalculationFailed\": {\n    type: Boolean,\n    optional: true,\n    defaultValue: false\n  },\n  \"bypassAddressValidation\": {\n    type: Boolean,\n    optional: true,\n    defaultValue: false\n  },\n  \"discount\": {\n    type: Number,\n    optional: true\n  },\n  \"workflow\": {\n    type: Workflow,\n    optional: true,\n    defaultValue: {}\n  },\n  \"createdAt\": {\n    type: Date,\n    autoValue: createdAtAutoValue\n  },\n  \"updatedAt\": {\n    type: Date,\n    autoValue: updatedAtAutoValue,\n    optional: true\n  }\n}, {\n  check,\n  tracker: Tracker\n});\nregisterSchema(\"Cart\", Cart);","map":{"version":3,"sources":["lib/collections/schemas/cart.js"],"names":["module","export","CartItem","CartItems","Cart","SimpleSchema","watch","require","default","v","check","Tracker","registerSchema","createdAtAutoValue","shopIdAutoValueForCart","updatedAtAutoValue","Payment","Product","ProductVariant","Shipment","ShippingParcel","Workflow","Metafield","type","String","index","autoValue","label","optional","Integer","min","Array","Object","blackbox","Number","tracker","unique","isInsert","isUpdate","isFromTrustedCode","userId","unset","regEx","RegEx","Email","Boolean","defaultValue","Date"],"mappings":"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","sourcesContent":["import SimpleSchema from \"simpl-schema\";\nimport { check } from \"meteor/check\";\nimport { Tracker } from \"meteor/tracker\";\nimport { registerSchema } from \"@reactioncommerce/schemas\";\nimport { createdAtAutoValue, shopIdAutoValueForCart, updatedAtAutoValue } from \"./helpers\";\nimport { Payment } from \"./payments\";\nimport { Product, ProductVariant } from \"./products\";\nimport { Shipment, ShippingParcel } from \"./shipping\";\nimport { Workflow } from \"./workflow\";\nimport { Metafield } from \"./metafield\";\n\n/**\n * @name CartItem\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} _id required\n * @property {String} productId required\n * @property {String} shopId, Cart Item shopId\n * @property {Number} quantity required\n * @property {Product} product required\n * @property {ProductVariant} variants required\n * @property {Metafield[]} metafields\n * @property {String} title Cart Item title\n * @property {String} type, Product type\n * @property {ShippingParcel} parcel Currently, parcel is in simple product schema. Need to include it here as well.\n * @property {String} cartItemId Seems strange here but has to be here since we share schemas between Cart and Order\n * @property {Object} transaction Transaction associated with this item\n * @property {Object} taxData optional blackbox\n * @property {Number} taxRate optional\n * @property {Object} shippingMethod Shipping Method associated with this item\n */\nexport const CartItem = new SimpleSchema({\n  \"_id\": {\n    type: String\n  },\n  \"productId\": {\n    type: String,\n    index: 1\n  },\n  \"shopId\": {\n    type: String,\n    autoValue: shopIdAutoValueForCart,\n    index: 1,\n    label: \"Cart Item shopId\",\n    optional: true\n  },\n  \"quantity\": {\n    label: \"Quantity\",\n    type: SimpleSchema.Integer,\n    min: 0\n  },\n  \"product\": {\n    type: Product\n  },\n  \"variants\": {\n    type: ProductVariant\n  },\n  \"metafields\": {\n    type: Array,\n    optional: true\n  },\n  \"metafields.$\": {\n    type: Metafield\n  },\n  \"title\": {\n    type: String,\n    label: \"CartItem Title\"\n  },\n  \"type\": {\n    label: \"Product Type\",\n    type: String,\n    optional: true\n  },\n  \"parcel\": {\n    type: ShippingParcel,\n    optional: true\n  },\n  \"cartItemId\": {\n    type: String,\n    optional: true\n  },\n  \"transaction\": {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  \"taxData\": {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  \"taxRate\": {\n    type: Number,\n    optional: true\n  },\n  \"shippingMethod\": {\n    type: Object,\n    optional: true,\n    blackbox: true // @todo Revert this to schema at some point\n  }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"CartItem\", CartItem);\n\n/**\n * @name CartItems\n * @memberof schemas\n * @summary Used in check by inventory/addReserve method\n * @type {SimpleSchema}\n * @property {CartItem[]} items an Array of CartItem optional\n */\nexport const CartItems = new SimpleSchema({\n  \"items\": {\n    type: Array,\n    optional: true\n  },\n  \"items.$\": {\n    type: CartItem\n  }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"CartItems\", CartItems);\n\n/**\n * @name Cart\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} _id required for check of users' carts\n * @property {String} shopId required, Cart ShopId\n * @property {String} userId required\n * @property {String} sessionId required\n * @property {String} email optional\n * @property {CartItem[]} items Array of CartItem optional\n * @property {Shipment[]} shipping Array of Shipment optional, blackbox\n * @property {Payment[]} billing Array of Payment optional, blackbox\n * @property {Number} tax tax rate\n * @property {Object[]} taxes Array of objects optional\n * @property {Object} taxRatesByShop optional\n * @property {Number} discount optional\n * @property {Workflow} workflow optional\n * @property {Date} createdAt required\n * @property {Date} updatedAt optional\n */\nexport const Cart = new SimpleSchema({\n  \"_id\": {\n    type: String,\n    optional: true\n  },\n  \"shopId\": {\n    type: String,\n    autoValue: shopIdAutoValueForCart,\n    index: 1,\n    label: \"Cart ShopId\"\n  },\n  \"userId\": {\n    type: String,\n    unique: true,\n    autoValue() {\n      if (this.isInsert || this.isUpdate) {\n        if (!this.isFromTrustedCode) {\n          return this.userId;\n        }\n      } else {\n        this.unset();\n      }\n    }\n  },\n  \"sessionId\": {\n    type: String,\n    index: 1\n  },\n  \"email\": {\n    type: String,\n    optional: true,\n    index: 1,\n    regEx: SimpleSchema.RegEx.Email\n  },\n  \"items\": {\n    type: Array,\n    optional: true\n  },\n  \"items.$\": {\n    type: CartItem\n  },\n  \"shipping\": {\n    type: Array,\n    optional: true\n  },\n  \"shipping.$\": {\n    type: Shipment\n  },\n  \"billing\": {\n    type: Array,\n    optional: true\n  },\n  \"billing.$\": {\n    type: Payment\n  },\n  \"tax\": {\n    type: Number,\n    optional: true\n  },\n  \"taxes\": {\n    type: Array,\n    optional: true\n  },\n  \"taxes.$\": {\n    type: Object,\n    blackbox: true\n  },\n  \"taxRatesByShop\": {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  \"taxCalculationFailed\": {\n    type: Boolean,\n    optional: true,\n    defaultValue: false\n  },\n  \"bypassAddressValidation\": {\n    type: Boolean,\n    optional: true,\n    defaultValue: false\n  },\n  \"discount\": {\n    type: Number,\n    optional: true\n  },\n  \"workflow\": {\n    type: Workflow,\n    optional: true,\n    defaultValue: {}\n  },\n  \"createdAt\": {\n    type: Date,\n    autoValue: createdAtAutoValue\n  },\n  \"updatedAt\": {\n    type: Date,\n    autoValue: updatedAtAutoValue,\n    optional: true\n  }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"Cart\", Cart);\n"]},"sourceType":"script","hash":"94b5ee45769fc300043d6970d77b0c0e031fbc07"}
