{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"server/api/core/email/config.js","filename":"server/api/core/email/config.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"server/api/core/email/config.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"server/api/core/email/config.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/api/core/email/config.js"}},"code":"module.export({\n  getMailUrl: () => getMailUrl,\n  getMailConfig: () => getMailConfig,\n  verifyConfig: () => verifyConfig\n});\nlet nodemailer;\nmodule.watch(require(\"@reactioncommerce/nodemailer\"), {\n  default(v) {\n    nodemailer = v;\n  }\n\n}, 0);\nlet getServiceConfig;\nmodule.watch(require(\"nodemailer-wellknown\"), {\n  default(v) {\n    getServiceConfig = v;\n  }\n\n}, 1);\nlet url;\nmodule.watch(require(\"url\"), {\n  default(v) {\n    url = v;\n  }\n\n}, 2);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 3);\nlet Reaction, Logger;\nmodule.watch(require(\"../..\"), {\n  Reaction(v) {\n    Reaction = v;\n  },\n\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 4);\n\nfunction getMailUrl() {\n  const shopSettings = Reaction.getShopSettings();\n  let shopMail;\n\n  if (shopSettings) {\n    shopMail = shopSettings.mail || {};\n  } // get all possible mail settings\n\n\n  const processUrl = process.env.MAIL_URL;\n  const settingsUrl = Meteor.settings.MAIL_URL;\n  const {\n    service,\n    user,\n    password,\n    host,\n    port\n  } = shopMail;\n  let mailString; // create a mail url from well-known provider settings (if they exist)\n  // https://github.com/nodemailer/nodemailer-wellknown\n\n  if (service && service !== \"custom\") {\n    const conf = getServiceConfig(service);\n\n    if (conf) {\n      // account for local test providers like Maildev\n      if (!conf.host) {\n        mailString = `smtp://localhost:${conf.port}`;\n      } else if (user && password) {\n        mailString = `smtp://${encodeURIComponent(user)}:${password}@${conf.host}:${conf.port}`;\n      }\n    }\n  } // create a mail url from custom provider settings (if they exist)\n\n\n  if ((!service || service === \"custom\") && user && password && host && port) {\n    mailString = `smtp://${encodeURIComponent(user)}:${password}@${host}:${port}`;\n  } // create the final url from the available options\n\n\n  const mailUrl = processUrl || settingsUrl || mailString;\n\n  if (!mailUrl) {\n    Logger.warn(\"Reaction.Email.getMailUrl() - no email provider configured\");\n    return null;\n  }\n\n  return mailUrl;\n}\n\nfunction getMailConfig() {\n  const processUrl = process.env.MAIL_URL;\n  const settingsUrl = Meteor.settings.MAIL_URL;\n  const mailString = processUrl || settingsUrl; // if MAIL_URL or Meteor settings have been used,\n  // parse the URL and create a config object\n\n  if (mailString) {\n    // parse the url\n    const parsedUrl = url.parse(mailString);\n    const creds = !!parsedUrl.auth && parsedUrl.auth.split(\":\");\n    parsedUrl.port = Number(parsedUrl.port);\n    Logger.debug(`Using ${parsedUrl.hostname} to send email`); // create a nodemailer config from the SMTP url string\n\n    const config = {\n      host: parsedUrl.hostname,\n      port: parsedUrl.port,\n      // since the port is casted to number above\n      secure: parsedUrl.port === 465,\n      logger: process.env.EMAIL_DEBUG === \"true\"\n    }; // add user/pass to the config object if they were found\n\n    if (creds) {\n      config.auth = {\n        user: creds[0],\n        pass: creds[1]\n      };\n    } // don't enforce checking TLS on localhost\n\n\n    if (parsedUrl.hostname === \"localhost\") {\n      config.ignoreTLS = true;\n    }\n\n    return config;\n  } // check for mail settings in the database\n\n\n  const shopSettings = Reaction.getShopSettings();\n  let shopMail;\n\n  if (shopSettings) {\n    shopMail = shopSettings.mail || {};\n  }\n\n  const {\n    service,\n    user,\n    password,\n    host,\n    port\n  } = shopMail; // if a service provider preset was chosen, return a Nodemailer config for it\n  // https://github.com/nodemailer/nodemailer-wellknown\n\n  if (service && service !== \"custom\") {\n    Logger.debug(`Using ${service} to send email`); // get the config from nodemailer-wellknown\n\n    const conf = getServiceConfig(service); // account for local test providers like Maildev with no auth\n\n    if (!conf.host) {\n      return conf;\n    } // add any credentials to the config\n\n\n    if (user && password) {\n      conf.auth = {\n        user,\n        pass: password\n      };\n    }\n\n    return conf;\n  } // if a custom config was chosen and all necessary fields exist in the database,\n  // return the custom Nodemailer config\n\n\n  if ((!service || service === \"custom\") && host && port) {\n    const conf = {\n      host,\n      port,\n      secure: port === 465,\n      logger: process.env.EMAIL_DEBUG === \"true\"\n    }; // don't enforce checking TLS on localhost\n\n    if (conf.host === \"localhost\") {\n      conf.ignoreTLS = true;\n    } // add any credentials to the config\n\n\n    if (user && password) {\n      conf.auth = {\n        user,\n        pass: password\n      };\n    }\n\n    Logger.debug(`Using ${host} to send email`);\n    return conf;\n  } // else, return the direct mail config and a warning\n\n\n  Logger.warn(`\n    Mail service not configured. Attempting to use direct sending option.\n    The mail may send, but messages are far more likely go to the user's spam folder.\n    Please configure an SMTP mail sending provider.\n  `);\n  return {\n    direct: true,\n    logger: process.env.EMAIL_DEBUG === \"true\"\n  };\n}\n\nfunction verifyConfig(config, callback) {\n  const transporter = nodemailer.createTransport(config);\n  return transporter.verify(callback);\n}","map":{"version":3,"sources":["server/api/core/email/config.js"],"names":["module","export","getMailUrl","getMailConfig","verifyConfig","nodemailer","watch","require","default","v","getServiceConfig","url","Meteor","Reaction","Logger","shopSettings","getShopSettings","shopMail","mail","processUrl","process","env","MAIL_URL","settingsUrl","settings","service","user","password","host","port","mailString","conf","encodeURIComponent","mailUrl","warn","parsedUrl","parse","creds","auth","split","Number","debug","hostname","config","secure","logger","EMAIL_DEBUG","pass","ignoreTLS","direct","callback","transporter","createTransport","verify"],"mappings":"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","sourcesContent":["import nodemailer from \"@reactioncommerce/nodemailer\";\nimport getServiceConfig from \"nodemailer-wellknown\";\nimport url from \"url\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Reaction, Logger } from \"/server/api\";\n\n\n/**\n * @method getMailUrl\n * @summary get the smtp URL for sending emails\n * There are 3 possible ways to set the email configuration and\n * the first value found will be used.\n * The priority order is:\n *   1. MAIL_URL environment variable\n *   2. Meteor settings (MAIL_URL key)\n *   3. Core shop settings from the database\n * @memberof Email\n * @example Reaction.Email.getMailUrl()\n * @return {String} returns an SMTP url if one of the settings have been set\n */\nexport function getMailUrl() {\n  const shopSettings = Reaction.getShopSettings();\n\n  let shopMail;\n\n  if (shopSettings) {\n    shopMail = shopSettings.mail || {};\n  }\n\n  // get all possible mail settings\n  const processUrl = process.env.MAIL_URL;\n  const settingsUrl = Meteor.settings.MAIL_URL;\n  const { service, user, password, host, port } = shopMail;\n\n  let mailString;\n\n  // create a mail url from well-known provider settings (if they exist)\n  // https://github.com/nodemailer/nodemailer-wellknown\n  if (service && service !== \"custom\") {\n    const conf = getServiceConfig(service);\n\n    if (conf) {\n      // account for local test providers like Maildev\n      if (!conf.host) {\n        mailString = `smtp://localhost:${conf.port}`;\n      } else if (user && password) {\n        mailString = `smtp://${encodeURIComponent(user)}:${password}@${conf.host}:${conf.port}`;\n      }\n    }\n  }\n\n  // create a mail url from custom provider settings (if they exist)\n  if ((!service || service === \"custom\") && user && password && host && port) {\n    mailString = `smtp://${encodeURIComponent(user)}:${password}@${host}:${port}`;\n  }\n\n  // create the final url from the available options\n  const mailUrl = processUrl || settingsUrl || mailString;\n\n  if (!mailUrl) {\n    Logger.warn(\"Reaction.Email.getMailUrl() - no email provider configured\");\n    return null;\n  }\n\n  return mailUrl;\n}\n\n\n/**\n * @method getMailConfig\n * @summary get the email sending config for Nodemailer\n * @memberof Email\n * @example Reaction.Email.getMailConfig()\n * @return {{host: String, port: Number, secure: Boolean, auth: Object, logger: Boolean}} returns a config object\n */\nexport function getMailConfig() {\n  const processUrl = process.env.MAIL_URL;\n  const settingsUrl = Meteor.settings.MAIL_URL;\n\n  const mailString = processUrl || settingsUrl;\n\n  // if MAIL_URL or Meteor settings have been used,\n  // parse the URL and create a config object\n  if (mailString) {\n    // parse the url\n    const parsedUrl = url.parse(mailString);\n    const creds = !!parsedUrl.auth && parsedUrl.auth.split(\":\");\n    parsedUrl.port = Number(parsedUrl.port);\n\n    Logger.debug(`Using ${parsedUrl.hostname} to send email`);\n\n    // create a nodemailer config from the SMTP url string\n    const config = {\n      host: parsedUrl.hostname,\n      port: parsedUrl.port,\n      // since the port is casted to number above\n      secure: parsedUrl.port === 465,\n      logger: process.env.EMAIL_DEBUG === \"true\"\n    };\n\n    // add user/pass to the config object if they were found\n    if (creds) {\n      config.auth = {\n        user: creds[0],\n        pass: creds[1]\n      };\n    }\n\n    // don't enforce checking TLS on localhost\n    if (parsedUrl.hostname === \"localhost\") {\n      config.ignoreTLS = true;\n    }\n\n    return config;\n  }\n\n  // check for mail settings in the database\n  const shopSettings = Reaction.getShopSettings();\n\n  let shopMail;\n\n  if (shopSettings) {\n    shopMail = shopSettings.mail || {};\n  }\n\n  const { service, user, password, host, port } = shopMail;\n\n  // if a service provider preset was chosen, return a Nodemailer config for it\n  // https://github.com/nodemailer/nodemailer-wellknown\n  if (service && service !== \"custom\") {\n    Logger.debug(`Using ${service} to send email`);\n\n    // get the config from nodemailer-wellknown\n    const conf = getServiceConfig(service);\n\n    // account for local test providers like Maildev with no auth\n    if (!conf.host) {\n      return conf;\n    }\n\n    // add any credentials to the config\n    if (user && password) {\n      conf.auth = { user, pass: password };\n    }\n\n    return conf;\n  }\n\n  // if a custom config was chosen and all necessary fields exist in the database,\n  // return the custom Nodemailer config\n  if ((!service || service === \"custom\") && host && port) {\n    const conf = {\n      host,\n      port,\n      secure: port === 465,\n      logger: process.env.EMAIL_DEBUG === \"true\"\n    };\n\n    // don't enforce checking TLS on localhost\n    if (conf.host === \"localhost\") {\n      conf.ignoreTLS = true;\n    }\n\n    // add any credentials to the config\n    if (user && password) {\n      conf.auth = { user, pass: password };\n    }\n\n    Logger.debug(`Using ${host} to send email`);\n\n    return conf;\n  }\n\n  // else, return the direct mail config and a warning\n  Logger.warn(`\n    Mail service not configured. Attempting to use direct sending option.\n    The mail may send, but messages are far more likely go to the user's spam folder.\n    Please configure an SMTP mail sending provider.\n  `);\n\n  return {\n    direct: true,\n    logger: process.env.EMAIL_DEBUG === \"true\"\n  };\n}\n\n\n/**\n * @method verifyConfig\n * @summary Verify a transporter configuration works\n * @see https://github.com/nodemailer/nodemailer#verify-smtp-connection-configuration\n * @memberof Email\n * @param {Object} config - a Nodemailer transporter config object\n * @param {Function} callback - optional callback with standard error/result args\n * @return {Promise} returns a Promise if no callback is provided\n */\nexport function verifyConfig(config, callback) {\n  const transporter = nodemailer.createTransport(config);\n  return transporter.verify(callback);\n}\n"]},"sourceType":"script","hash":"50ac355358017c432b52ea3d0d8a9fa4644f1f26"}
