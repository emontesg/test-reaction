{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/included/sms/server/methods/sms.js","filename":"imports/plugins/included/sms/server/methods/sms.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/included/sms/server/methods/sms.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/included/sms/server/methods/sms.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/included/sms/server/methods/sms.js"}},"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet Sms;\nmodule.watch(require(\"../../../../../../lib/collections\"), {\n  Sms(v) {\n    Sms = v;\n  }\n\n}, 2);\nlet Reaction, Logger;\nmodule.watch(require(\"../../../../../../server/api\"), {\n  Reaction(v) {\n    Reaction = v;\n  },\n\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 3);\nlet formatPhoneNumber;\nmodule.watch(require(\"../../../../../../lib/api\"), {\n  formatPhoneNumber(v) {\n    formatPhoneNumber = v;\n  }\n\n}, 4);\n// We lazy load these in order to shave a few seconds off the time\n// it takes Meteor to start/restart the app.\nlet Twilio;\n\nfunction lazyLoadTwilio() {\n  return Promise.asyncApply(() => {\n    if (Twilio) return;\n    const mod = Promise.await(Promise.resolve().then(() => require(\"twilio\")));\n    Twilio = mod.default;\n  });\n}\n\nlet Nexmo;\n\nfunction lazyLoadNexmo() {\n  return Promise.asyncApply(() => {\n    if (Nexmo) return;\n    const mod = Promise.await(Promise.resolve().then(() => require(\"nexmo\")));\n    Nexmo = mod.default;\n  });\n}\n/**\n * @file Meteor methods for SMS. Run these methods using `Meteor.call()`.\n *\n *\n * @namespace Methods/SMS\n*/\n\n\nMeteor.methods({\n  /**\n   * @name sms/saveSettings\n   * @method\n   * @memberof Methods/SMS\n   * @summary This save the sms provider settings\n   * @param {Object} settings - settings\n   * @return {object} returns result\n   */\n  \"sms/saveSettings\": settings => {\n    check(settings, Object);\n    settings.shopId = Reaction.getShopId();\n    const smsDetails = Sms.find().count();\n\n    if (smsDetails >= 1) {\n      return Sms.update({\n        shopId: Reaction.getShopId()\n      }, {\n        $set: settings\n      });\n    }\n\n    return Sms.insert(settings);\n  },\n\n  /**\n   * @name sms/send\n   * @method\n   * @memberof Methods/SMS\n   * @summary This send the sms to the user\n   * @param {String} message - The message to send\n   * @param {String} userId - The user to receive the message\n   * @param {String} shopId - The currenct shopId\n   * @return {object} returns result\n   */\n  \"sms/send\": (message, userId, shopId) => {\n    check(message, String);\n    check(userId, String);\n    check(shopId, String);\n    const user = Meteor.users.findOne(userId);\n    if (!user) return;\n    const addressBook = user.profile && user.profile.addressBook; // check for addressBook phone\n\n    const phone = addressBook && addressBook.phone;\n    const country = addressBook && addressBook.country;\n\n    if (!phone || !country) {\n      return;\n    }\n\n    const smsSettings = Sms.findOne({\n      shopId\n    });\n\n    if (!smsSettings) {\n      return;\n    }\n\n    const formattedPhone = formatPhoneNumber(phone, country);\n    const {\n      apiKey,\n      apiToken,\n      smsPhone,\n      smsProvider\n    } = smsSettings;\n\n    if (smsProvider === \"twilio\") {\n      Logger.debug(\"choose twilio\");\n      Promise.await(lazyLoadTwilio());\n      const client = new Twilio(apiKey, apiToken);\n      client.messages.create({\n        to: formattedPhone,\n        from: smsPhone,\n        body: message\n      }, err => {\n        if (err) {\n          return Logger.error(err);\n        }\n      });\n      return;\n    }\n\n    if (smsProvider === \"nexmo\") {\n      Logger.debug(\"choose nexmo\");\n      Promise.await(lazyLoadNexmo());\n      const client = new Nexmo({\n        apiKey,\n        apiSecret: apiToken\n      });\n      client.message.sendSms(smsPhone, formattedPhone, message, (err, result) => {\n        if (err) {\n          Logger.error(\"Nexmo error\", err);\n        }\n\n        if (result && Array.isArray(result.messages) && result.messages[0][\"error-text\"]) {\n          Logger.error(\"Nexmo error sending sms\", result.messages[0][\"error-text\"]);\n        }\n\n        Logger.debug(JSON.stringify(result));\n      });\n    }\n  }\n});","map":{"version":3,"sources":["imports/plugins/included/sms/server/methods/sms.js"],"names":["Meteor","module","watch","require","v","check","Sms","Reaction","Logger","formatPhoneNumber","Twilio","lazyLoadTwilio","mod","default","Nexmo","lazyLoadNexmo","methods","settings","Object","shopId","getShopId","smsDetails","find","count","update","$set","insert","message","userId","String","user","users","findOne","addressBook","profile","phone","country","smsSettings","formattedPhone","apiKey","apiToken","smsPhone","smsProvider","debug","Promise","await","client","messages","create","to","from","body","err","error","apiSecret","sendSms","result","Array","isArray","JSON","stringify"],"mappings":"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","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { check } from \"meteor/check\";\nimport { Sms } from \"/lib/collections\";\nimport { Reaction, Logger } from \"/server/api\";\nimport { formatPhoneNumber } from \"/lib/api\";\n\n// We lazy load these in order to shave a few seconds off the time\n// it takes Meteor to start/restart the app.\nlet Twilio;\nasync function lazyLoadTwilio() {\n  if (Twilio) return;\n  const mod = await import(\"twilio\");\n  Twilio = mod.default;\n}\n\nlet Nexmo;\nasync function lazyLoadNexmo() {\n  if (Nexmo) return;\n  const mod = await import(\"nexmo\");\n  Nexmo = mod.default;\n}\n\n/**\n * @file Meteor methods for SMS. Run these methods using `Meteor.call()`.\n *\n *\n * @namespace Methods/SMS\n*/\nMeteor.methods({\n  /**\n   * @name sms/saveSettings\n   * @method\n   * @memberof Methods/SMS\n   * @summary This save the sms provider settings\n   * @param {Object} settings - settings\n   * @return {object} returns result\n   */\n  \"sms/saveSettings\": (settings) => {\n    check(settings, Object);\n    settings.shopId = Reaction.getShopId();\n\n    const smsDetails = Sms.find().count();\n    if (smsDetails >= 1) {\n      return Sms.update({ shopId: Reaction.getShopId() }, {\n        $set: settings\n      });\n    }\n    return Sms.insert(settings);\n  },\n\n  /**\n   * @name sms/send\n   * @method\n   * @memberof Methods/SMS\n   * @summary This send the sms to the user\n   * @param {String} message - The message to send\n   * @param {String} userId - The user to receive the message\n   * @param {String} shopId - The currenct shopId\n   * @return {object} returns result\n   */\n  \"sms/send\": (message, userId, shopId) => {\n    check(message, String);\n    check(userId, String);\n    check(shopId, String);\n\n    const user = Meteor.users.findOne(userId);\n    if (!user) return;\n\n    const addressBook = user.profile && user.profile.addressBook;\n\n    // check for addressBook phone\n    const phone = addressBook && addressBook.phone;\n    const country = addressBook && addressBook.country;\n\n    if (!phone || !country) {\n      return;\n    }\n\n    const smsSettings = Sms.findOne({ shopId });\n    if (!smsSettings) {\n      return;\n    }\n\n    const formattedPhone = formatPhoneNumber(phone, country);\n\n    const { apiKey, apiToken, smsPhone, smsProvider } = smsSettings;\n    if (smsProvider === \"twilio\") {\n      Logger.debug(\"choose twilio\");\n      Promise.await(lazyLoadTwilio());\n      const client = new Twilio(apiKey, apiToken);\n      client.messages.create({\n        to: formattedPhone,\n        from: smsPhone,\n        body: message\n      }, (err) => {\n        if (err) {\n          return Logger.error(err);\n        }\n      });\n      return;\n    }\n\n    if (smsProvider === \"nexmo\") {\n      Logger.debug(\"choose nexmo\");\n      Promise.await(lazyLoadNexmo());\n      const client = new Nexmo({ apiKey, apiSecret: apiToken });\n      client.message.sendSms(smsPhone, formattedPhone, message, (err, result) => {\n        if (err) {\n          Logger.error(\"Nexmo error\", err);\n        }\n\n        if (result && Array.isArray(result.messages) && result.messages[0][\"error-text\"]) {\n          Logger.error(\"Nexmo error sending sms\", result.messages[0][\"error-text\"]);\n        }\n\n        Logger.debug(JSON.stringify(result));\n      });\n    }\n  }\n});\n"]},"sourceType":"script","hash":"8c9bf8fb95bb473f824b64724e0627959fa33fdb"}
