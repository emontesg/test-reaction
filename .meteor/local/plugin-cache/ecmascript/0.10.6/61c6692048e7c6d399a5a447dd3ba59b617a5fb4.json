{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/included/inventory/server/hooks/hooks.js","filename":"imports/plugins/included/inventory/server/hooks/hooks.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/included/inventory/server/hooks/hooks.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/included/inventory/server/hooks/hooks.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/included/inventory/server/hooks/hooks.js"}},"code":"const module1 = module;\nlet Meteor;\nmodule1.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Cart, Orders, Products;\nmodule1.watch(require(\"../../../../../../lib/collections\"), {\n  Cart(v) {\n    Cart = v;\n  },\n\n  Orders(v) {\n    Orders = v;\n  },\n\n  Products(v) {\n    Products = v;\n  }\n\n}, 1);\nlet Logger, Hooks;\nmodule1.watch(require(\"../../../../../../server/api\"), {\n  Logger(v) {\n    Logger = v;\n  },\n\n  Hooks(v) {\n    Hooks = v;\n  }\n\n}, 2);\nlet registerInventory;\nmodule1.watch(require(\"../methods/inventory\"), {\n  registerInventory(v) {\n    registerInventory = v;\n  }\n\n}, 3);\n\n/**\n* @method afterAddItemsToCart\n* @summary reserves inventory when item is added to cart\n* @param {String} cartId - current cartId\n* @param {Object} options - product document\n* @return {undefined}\n*/\nHooks.Events.add(\"afterAddItemsToCart\", (cartId, options) => {\n  // Adding a new product or variant to the cart\n  Logger.debug(\"after cart update, call inventory/addReserve\"); // Look up cart to get items added to it\n\n  const {\n    items\n  } = Cart.findOne({\n    _id: cartId\n  }) || {}; // Reserve item\n\n  Meteor.call(\"inventory/addReserve\", items.filter(item => item._id === options.newItemId));\n});\n/**\n* @method afterModifyQuantityInCart\n* @summary reserves inventory when cart quantity is updated\n* @param {String} cartId - current cartId\n* @param {Object} options - product document\n* @return {undefined}\n*/\n\nHooks.Events.add(\"afterModifyQuantityInCart\", (cartId, options) => {\n  // Modifying item quantity in cart.\n  Logger.debug(\"after variant increment, call inventory/addReserve\"); // Look up cart to get items that have been added to it\n\n  const {\n    items\n  } = Cart.findOne({\n    _id: cartId\n  }) || {}; // Item to increment quantity\n\n  const item = items.filter(i => i.product._id === options.productId && i.variants._id === options.variantId);\n  Meteor.call(\"inventory/addReserve\", item);\n});\n/**\n* @method afterRemoveCatalogProduct\n* @summary updates product inventory after variant is removed\n* @param {String} userId - userId of user making the call\n* @param {Object} doc - product document\n* @return {undefined}\n*/\n\nHooks.Events.add(\"afterRemoveCatalogProduct\", (userId, doc) => {\n  if (doc.type === \"variant\") {\n    const variantItem = {\n      productId: doc.ancestors[0],\n      variantId: doc._id,\n      shopId: doc.shopId\n    };\n    Logger.debug(`remove inventory variants for variant: ${doc._id}, call inventory/remove`);\n    Meteor.call(\"inventory/remove\", variantItem);\n  }\n\n  return doc;\n});\n/**\n* @method afterUpdateCatalogProduct\n* @summary adjust inventory of variants after an update\n* @param {String} userId - userId of user making the call\n* @param {Object} doc - product document\n* @return {undefined}\n*/\n\nHooks.Events.add(\"afterUpdateCatalogProduct\", doc => {\n  // Find the most recent version of the product document based on\n  // the passed in doc._id\n  const productDocument = Products.findOne({\n    _id: doc._id\n  });\n\n  if (doc.type === \"variant\") {\n    Meteor.call(\"inventory/adjust\", productDocument);\n  }\n\n  return productDocument;\n});\n/**\n* @method afterInsertCatalogProduct\n* @summary adds product inventory when new product is created\n* @param {String} userId - userId of user making the call\n* @param {Object} doc - product document\n* @return {undefined}\n*/\n\nHooks.Events.add(\"afterInsertCatalogProduct\", doc => {\n  if (doc.type !== \"variant\") {\n    return false;\n  }\n\n  registerInventory(doc);\n  return doc;\n});\n/**\n * markInventoryShipped\n * @summary check a product and update Inventory collection with inventory documents.\n * @param {Object} product - valid Schemas.Product object\n * @return {Number} - returns the total amount of new inventory created\n */\n\nfunction markInventoryShipped(doc) {\n  const order = Orders.findOne(doc._id);\n  const orderItems = order.items;\n  const cartItems = [];\n\n  for (const orderItem of orderItems) {\n    const cartItem = {\n      _id: orderItem.cartItemId || orderItem._id,\n      shopId: orderItem.shopId,\n      quantity: orderItem.quantity,\n      productId: orderItem.productId,\n      product: orderItem.product,\n      variants: orderItem.variants,\n      title: orderItem.title\n    };\n    cartItems.push(cartItem);\n  }\n\n  Meteor.call(\"inventory/shipped\", cartItems);\n  return doc;\n}\n/**\n * markInventorySold\n * @summary check a product and update Inventory collection with inventory documents.\n * @param {Object} doc - valid Schemas.Product object\n * @return {Number} - returns the total amount of new inventory created\n */\n\n\nfunction markInventorySold(doc) {\n  const orderItems = doc.items;\n  const cartItems = []; // If a cartItemId exists it's a legacy order and we use that\n\n  for (const orderItem of orderItems) {\n    const cartItem = {\n      _id: orderItem.cartItemId || orderItem._id,\n      shopId: orderItem.shopId,\n      quantity: orderItem.quantity,\n      productId: orderItem.productId,\n      product: orderItem.product,\n      variants: orderItem.variants,\n      title: orderItem.title\n    };\n    cartItems.push(cartItem);\n  }\n\n  Meteor.call(\"inventory/sold\", cartItems);\n  return doc;\n}\n/**\n* @method afterOrderInsert\n* @summary marks inventory as sold when order is created\n* @param {Object} order - order document\n* @return {Object} order - order document\n*/\n\n\nHooks.Events.add(\"afterOrderInsert\", order => {\n  Logger.debug(\"Inventory module handling Order insert\");\n  markInventorySold(order);\n  return order;\n});\n/**\n* @method onOrderShipmentShipped\n* @summary marks inventory as shipped when order workflow is completed\n* @param {Object} doc - order document\n* @return {undefined}\n*/\n\nHooks.Events.add(\"onOrderShipmentShipped\", doc => {\n  Logger.debug(\"Inventory module handling Order update\");\n  markInventoryShipped(doc);\n  return doc;\n});","map":{"version":3,"sources":["imports/plugins/included/inventory/server/hooks/hooks.js"],"names":["module1","module","Meteor","watch","require","v","Cart","Orders","Products","Logger","Hooks","registerInventory","Events","add","cartId","options","debug","items","findOne","_id","call","filter","item","newItemId","i","product","productId","variants","variantId","userId","doc","type","variantItem","ancestors","shopId","productDocument","markInventoryShipped","order","orderItems","cartItems","orderItem","cartItem","cartItemId","quantity","title","push","markInventorySold"],"mappings":"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","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Cart, Orders, Products } from \"/lib/collections\";\nimport { Logger, Hooks } from \"/server/api\";\nimport { registerInventory } from \"../methods/inventory\";\n\n/**\n* @method afterAddItemsToCart\n* @summary reserves inventory when item is added to cart\n* @param {String} cartId - current cartId\n* @param {Object} options - product document\n* @return {undefined}\n*/\nHooks.Events.add(\"afterAddItemsToCart\", (cartId, options) => {\n  // Adding a new product or variant to the cart\n  Logger.debug(\"after cart update, call inventory/addReserve\");\n  // Look up cart to get items added to it\n  const { items } = Cart.findOne({ _id: cartId }) || {};\n  // Reserve item\n  Meteor.call(\"inventory/addReserve\", items.filter((item) => item._id === options.newItemId));\n});\n\n/**\n* @method afterModifyQuantityInCart\n* @summary reserves inventory when cart quantity is updated\n* @param {String} cartId - current cartId\n* @param {Object} options - product document\n* @return {undefined}\n*/\nHooks.Events.add(\"afterModifyQuantityInCart\", (cartId, options) => {\n  // Modifying item quantity in cart.\n  Logger.debug(\"after variant increment, call inventory/addReserve\");\n\n  // Look up cart to get items that have been added to it\n  const { items } = Cart.findOne({ _id: cartId }) || {};\n\n  // Item to increment quantity\n  const item = items.filter((i) => (i.product._id === options.productId && i.variants._id === options.variantId));\n  Meteor.call(\"inventory/addReserve\", item);\n});\n\n\n/**\n* @method afterRemoveCatalogProduct\n* @summary updates product inventory after variant is removed\n* @param {String} userId - userId of user making the call\n* @param {Object} doc - product document\n* @return {undefined}\n*/\nHooks.Events.add(\"afterRemoveCatalogProduct\", (userId, doc) => {\n  if (doc.type === \"variant\") {\n    const variantItem = {\n      productId: doc.ancestors[0],\n      variantId: doc._id,\n      shopId: doc.shopId\n    };\n    Logger.debug(`remove inventory variants for variant: ${doc._id\n    }, call inventory/remove`);\n    Meteor.call(\"inventory/remove\", variantItem);\n  }\n\n  return doc;\n});\n\n/**\n* @method afterUpdateCatalogProduct\n* @summary adjust inventory of variants after an update\n* @param {String} userId - userId of user making the call\n* @param {Object} doc - product document\n* @return {undefined}\n*/\nHooks.Events.add(\"afterUpdateCatalogProduct\", (doc) => {\n  // Find the most recent version of the product document based on\n  // the passed in doc._id\n  const productDocument = Products.findOne({\n    _id: doc._id\n  });\n\n  if (doc.type === \"variant\") {\n    Meteor.call(\"inventory/adjust\", productDocument);\n  }\n\n  return productDocument;\n});\n\n/**\n* @method afterInsertCatalogProduct\n* @summary adds product inventory when new product is created\n* @param {String} userId - userId of user making the call\n* @param {Object} doc - product document\n* @return {undefined}\n*/\nHooks.Events.add(\"afterInsertCatalogProduct\", (doc) => {\n  if (doc.type !== \"variant\") {\n    return false;\n  }\n  registerInventory(doc);\n\n  return doc;\n});\n\n/**\n * markInventoryShipped\n * @summary check a product and update Inventory collection with inventory documents.\n * @param {Object} product - valid Schemas.Product object\n * @return {Number} - returns the total amount of new inventory created\n */\nfunction markInventoryShipped(doc) {\n  const order = Orders.findOne(doc._id);\n  const orderItems = order.items;\n  const cartItems = [];\n  for (const orderItem of orderItems) {\n    const cartItem = {\n      _id: orderItem.cartItemId || orderItem._id,\n      shopId: orderItem.shopId,\n      quantity: orderItem.quantity,\n      productId: orderItem.productId,\n      product: orderItem.product,\n      variants: orderItem.variants,\n      title: orderItem.title\n    };\n    cartItems.push(cartItem);\n  }\n  Meteor.call(\"inventory/shipped\", cartItems);\n\n  return doc;\n}\n\n/**\n * markInventorySold\n * @summary check a product and update Inventory collection with inventory documents.\n * @param {Object} doc - valid Schemas.Product object\n * @return {Number} - returns the total amount of new inventory created\n */\nfunction markInventorySold(doc) {\n  const orderItems = doc.items;\n  const cartItems = [];\n  // If a cartItemId exists it's a legacy order and we use that\n  for (const orderItem of orderItems) {\n    const cartItem = {\n      _id: orderItem.cartItemId || orderItem._id,\n      shopId: orderItem.shopId,\n      quantity: orderItem.quantity,\n      productId: orderItem.productId,\n      product: orderItem.product,\n      variants: orderItem.variants,\n      title: orderItem.title\n    };\n    cartItems.push(cartItem);\n  }\n  Meteor.call(\"inventory/sold\", cartItems);\n\n  return doc;\n}\n\n/**\n* @method afterOrderInsert\n* @summary marks inventory as sold when order is created\n* @param {Object} order - order document\n* @return {Object} order - order document\n*/\nHooks.Events.add(\"afterOrderInsert\", (order) => {\n  Logger.debug(\"Inventory module handling Order insert\");\n  markInventorySold(order);\n\n  return order;\n});\n\n/**\n* @method onOrderShipmentShipped\n* @summary marks inventory as shipped when order workflow is completed\n* @param {Object} doc - order document\n* @return {undefined}\n*/\nHooks.Events.add(\"onOrderShipmentShipped\", (doc) => {\n  Logger.debug(\"Inventory module handling Order update\");\n  markInventoryShipped(doc);\n\n  return doc;\n});\n"]},"sourceType":"script","hash":"61c6692048e7c6d399a5a447dd3ba59b617a5fb4"}
