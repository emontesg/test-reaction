{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"server/publications/collections/cart.js","filename":"server/publications/collections/cart.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"server/publications/collections/cart.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"server/publications/collections/cart.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/publications/collections/cart.js"}},"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet check, Match;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  },\n\n  Match(v) {\n    Match = v;\n  }\n\n}, 1);\nlet Cart, MediaRecords;\nmodule.watch(require(\"../../../lib/collections\"), {\n  Cart(v) {\n    Cart = v;\n  },\n\n  MediaRecords(v) {\n    MediaRecords = v;\n  }\n\n}, 2);\nlet Reaction;\nmodule.watch(require(\"../../api\"), {\n  Reaction(v) {\n    Reaction = v;\n  }\n\n}, 3);\n\n/**\n * cart\n */\nMeteor.publish(\"Cart\", function (sessionId, userId) {\n  check(sessionId, Match.OneOf(String, null));\n  check(userId, Match.OptionalOrNull(String)); // sessionId is required, not for selecting the cart, (userId), but as a key\n  // in merging anonymous user carts into authenticated existing user carts.\n  // we won't create carts unless we've got sessionId\n\n  if (this.userId === null || sessionId === null) {\n    return this.ready();\n  } // use case happens between switching from anonymous to registered user. and\n  // vice versa\n\n\n  if (typeof userId === \"string\" && this.userId !== userId) {\n    return this.ready();\n  } // we have a very rare case when cart has not been created for an anonymous\n  // and because of that, for some reason, he is considered as not logged in.\n  // in that case he doesn't have `userId`. Only way for him to get userId is\n  // to flush browser's session or log in as normal user. We could detect this\n  // case from here by comparing this.userId is string and this.userId !==\n  // Meteor.userId(). If this case will happens someday, we could try to send\n  // some logout call to accounts. This is it: https://github.com/meteor/meteor/\n  // issues/5103\n  // shopId is also required.\n\n\n  let shopId = Reaction.getPrimaryShopId();\n  const marketplaceSettings = Reaction.getMarketplaceSettings();\n\n  if (marketplaceSettings && marketplaceSettings.public && marketplaceSettings.public.merchantCart === true) {\n    shopId = Reaction.getShopId();\n  }\n\n  if (!shopId) {\n    return this.ready();\n  } // exclude these fields\n  // from the client cart\n\n\n  const fields = {\n    taxes: 0\n  }; // select user cart\n\n  const cart = Cart.find({\n    userId: this.userId,\n    shopId\n  }, {\n    fields\n  });\n\n  if (cart.count()) {\n    // we could keep `sessionId` of normal user up to date from here, but with\n    // current session logic we don't need this. That's why we just return\n    // cursor as is with whatever `sessionId`.\n    return cart;\n  } // we may create a cart if we didn't find one.\n\n\n  const cartId = Meteor.call(\"cart/createCart\", this.userId, sessionId);\n  return Cart.find(cartId);\n});\nMeteor.publish(\"CartImages\", cartId => {\n  check(cartId, Match.Optional(String));\n  if (!cartId) return [];\n  const cart = Cart.findOne(cartId);\n  const {\n    items: cartItems\n  } = cart || {};\n  if (!Array.isArray(cartItems)) return []; // Ensure each of these are unique\n\n  const productIds = [...new Set(cartItems.map(item => item.product._id))];\n  const variantIds = [...new Set(cartItems.map(item => item.variants._id))]; // return image for each the top level product or the variant and let the client code decide which to display\n\n  return MediaRecords.find({\n    \"$or\": [{\n      \"metadata.productId\": {\n        $in: productIds\n      }\n    }, {\n      \"metadata.variantId\": {\n        $in: variantIds\n      }\n    }],\n    \"metadata.workflow\": {\n      $nin: [\"archived\", \"unpublished\"]\n    }\n  });\n});","map":{"version":3,"sources":["server/publications/collections/cart.js"],"names":["Meteor","module","watch","require","v","check","Match","Cart","MediaRecords","Reaction","publish","sessionId","userId","OneOf","String","OptionalOrNull","ready","shopId","getPrimaryShopId","marketplaceSettings","getMarketplaceSettings","public","merchantCart","getShopId","fields","taxes","cart","find","count","cartId","call","Optional","findOne","items","cartItems","Array","isArray","productIds","Set","map","item","product","_id","variantIds","variants","$in","$nin"],"mappings":"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","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { check, Match } from \"meteor/check\";\nimport { Cart, MediaRecords } from \"/lib/collections\";\nimport { Reaction } from \"/server/api\";\n\n/**\n * cart\n */\n\nMeteor.publish(\"Cart\", function (sessionId, userId) {\n  check(sessionId, Match.OneOf(String, null));\n  check(userId, Match.OptionalOrNull(String));\n  // sessionId is required, not for selecting the cart, (userId), but as a key\n  // in merging anonymous user carts into authenticated existing user carts.\n  // we won't create carts unless we've got sessionId\n  if (this.userId === null || sessionId === null) {\n    return this.ready();\n  }\n  // use case happens between switching from anonymous to registered user. and\n  // vice versa\n  if (typeof userId === \"string\" && this.userId !== userId) {\n    return this.ready();\n  }\n  // we have a very rare case when cart has not been created for an anonymous\n  // and because of that, for some reason, he is considered as not logged in.\n  // in that case he doesn't have `userId`. Only way for him to get userId is\n  // to flush browser's session or log in as normal user. We could detect this\n  // case from here by comparing this.userId is string and this.userId !==\n  // Meteor.userId(). If this case will happens someday, we could try to send\n  // some logout call to accounts. This is it: https://github.com/meteor/meteor/\n  // issues/5103\n\n  // shopId is also required.\n  let shopId = Reaction.getPrimaryShopId();\n  const marketplaceSettings = Reaction.getMarketplaceSettings();\n  if (marketplaceSettings && marketplaceSettings.public && marketplaceSettings.public.merchantCart === true) {\n    shopId = Reaction.getShopId();\n  }\n\n  if (!shopId) {\n    return this.ready();\n  }\n\n  // exclude these fields\n  // from the client cart\n  const fields = {\n    taxes: 0\n  };\n\n  // select user cart\n  const cart = Cart.find({\n    userId: this.userId,\n    shopId\n  }, {\n    fields\n  });\n\n  if (cart.count()) {\n    // we could keep `sessionId` of normal user up to date from here, but with\n    // current session logic we don't need this. That's why we just return\n    // cursor as is with whatever `sessionId`.\n    return cart;\n  }\n  // we may create a cart if we didn't find one.\n  const cartId = Meteor.call(\"cart/createCart\", this.userId, sessionId);\n\n  return Cart.find(cartId);\n});\n\n\nMeteor.publish(\"CartImages\", (cartId) => {\n  check(cartId, Match.Optional(String));\n  if (!cartId) return [];\n\n  const cart = Cart.findOne(cartId);\n  const { items: cartItems } = cart || {};\n  if (!Array.isArray(cartItems)) return [];\n\n  // Ensure each of these are unique\n  const productIds = [...new Set(cartItems.map((item) => item.product._id))];\n  const variantIds = [...new Set(cartItems.map((item) => item.variants._id))];\n\n  // return image for each the top level product or the variant and let the client code decide which to display\n  return MediaRecords.find({\n    \"$or\": [\n      {\n        \"metadata.productId\": {\n          $in: productIds\n        }\n      },\n      {\n        \"metadata.variantId\": {\n          $in: variantIds\n        }\n      }\n    ],\n    \"metadata.workflow\": {\n      $nin: [\"archived\", \"unpublished\"]\n    }\n  });\n});\n"]},"sourceType":"script","hash":"bc5a2de6f76af9487a8e1f2a5590cb809f3ac1a6"}
