{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"server/api/core/templates.js","filename":"server/api/core/templates.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"server/api/core/templates.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"server/api/core/templates.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/api/core/templates.js"}},"code":"module.export({\n  TEMPLATE_PARSER_REACT: () => TEMPLATE_PARSER_REACT,\n  TEMPLATE_PARSER_HANDLEBARS: () => TEMPLATE_PARSER_HANDLEBARS,\n  registerTemplate: () => registerTemplate,\n  registerTemplateForMemoryCache: () => registerTemplateForMemoryCache,\n  registerTemplateForDatabase: () => registerTemplateForDatabase,\n  getTemplateByName: () => getTemplateByName,\n  processTemplateInfoForMemoryCache: () => processTemplateInfoForMemoryCache,\n  processTemplateInfoForDatabase: () => processTemplateInfoForDatabase,\n  registerTemplateParser: () => registerTemplateParser,\n  renderTemplate: () => renderTemplate,\n  compileHandlebarsTemplate: () => compileHandlebarsTemplate,\n  renderHandlebarsTemplate: () => renderHandlebarsTemplate,\n  renderTemplateToStaticMarkup: () => renderTemplateToStaticMarkup,\n  resetRegisteredTemplates: () => resetRegisteredTemplates,\n  initTemplates: () => initTemplates\n});\nlet React;\nmodule.watch(require(\"react\"), {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet ReactDOMServer;\nmodule.watch(require(\"react-dom/server\"), {\n  default(v) {\n    ReactDOMServer = v;\n  }\n\n}, 1);\nlet Handlebars;\nmodule.watch(require(\"handlebars\"), {\n  default(v) {\n    Handlebars = v;\n  }\n\n}, 2);\nlet Immutable;\nmodule.watch(require(\"immutable\"), {\n  default(v) {\n    Immutable = v;\n  }\n\n}, 3);\nlet Assets, Templates;\nmodule.watch(require(\"../../../lib/collections\"), {\n  Assets(v) {\n    Assets = v;\n  },\n\n  Templates(v) {\n    Templates = v;\n  }\n\n}, 4);\nlet Hooks, Logger, Reaction;\nmodule.watch(require(\"./..\"), {\n  Hooks(v) {\n    Hooks = v;\n  },\n\n  Logger(v) {\n    Logger = v;\n  },\n\n  Reaction(v) {\n    Reaction = v;\n  }\n\n}, 5);\nlet registeredTemplates = Immutable.OrderedMap();\nlet templateCache = Immutable.Map();\nlet templateParsers = Immutable.Map();\nconst TEMPLATE_PARSER_REACT = \"react\";\nconst TEMPLATE_PARSER_HANDLEBARS = \"handlebars\";\n\nfunction registerTemplate(templateInfo, shopId, insertImmediately = false) {\n  const literal = registerTemplateForMemoryCache(templateInfo, shopId);\n  const reference = registerTemplateForDatabase(templateInfo, shopId, insertImmediately);\n  return {\n    templateLiteral: literal,\n    templateReference: reference\n  };\n}\n\nfunction registerTemplateForMemoryCache(templateInfo, shopId) {\n  const templateInfoForMemoryCache = processTemplateInfoForMemoryCache(templateInfo);\n  let shopTemplates = registeredTemplates.get(shopId);\n\n  if (!shopTemplates) {\n    shopTemplates = {};\n  }\n\n  shopTemplates[templateInfo.name] = templateInfoForMemoryCache;\n  registeredTemplates = registeredTemplates.set(shopId, shopTemplates);\n  return templateInfoForMemoryCache;\n}\n\nfunction registerTemplateForDatabase(templateInfo) {\n  const templateInfoForDatabase = processTemplateInfoForDatabase(templateInfo); // Import template into the Assets collecton.\n\n  Assets.update({\n    type: \"template\",\n    name: templateInfoForDatabase.name\n  }, {\n    $set: {\n      content: JSON.stringify(templateInfoForDatabase)\n    }\n  }, {\n    upsert: true\n  });\n  return templateInfoForDatabase;\n}\n\nfunction getTemplateByName(templateName, shopId) {\n  const registeredTemplate = registeredTemplates.get(shopId)[templateName];\n\n  if (registeredTemplate) {\n    return registeredTemplate;\n  }\n\n  const templateInfo = Templates.findOne({\n    name: templateName,\n    $or: [// Attempt to find user editable / edited template first\n    {\n      isOriginalTemplate: false\n    }, // Fallback to the original templates\n    {\n      isOriginalTemplate: true\n    }],\n    shopId\n  });\n  return registerTemplateForMemoryCache(templateInfo);\n}\n\nfunction processTemplateInfoForMemoryCache(templateInfo) {\n  // Avoid mutating the original passed in param\n  const info = Immutable.Map(templateInfo);\n\n  if (typeof templateInfo.template === \"string\") {\n    return info.set(\"parser\", TEMPLATE_PARSER_HANDLEBARS).toObject();\n  } else if (typeof templateInfo.template === \"function\") {\n    return info.set(\"parser\", TEMPLATE_PARSER_REACT).toObject();\n  } else if (typeof templateInfo.template === \"object\") {\n    return info.set(\"parser\", TEMPLATE_PARSER_REACT).toObject();\n  }\n\n  return null;\n}\n\nfunction processTemplateInfoForDatabase(templateInfo) {\n  const templateData = {\n    name: templateInfo.name,\n    title: templateInfo.title,\n    type: templateInfo.type,\n    subject: templateInfo.subject,\n    templateFor: templateInfo.templateFor\n  };\n\n  if (typeof templateInfo.template === \"string\") {\n    templateData.template = templateInfo.template;\n    templateData.parser = TEMPLATE_PARSER_HANDLEBARS;\n  } else if (typeof templateInfo.template === \"object\") {\n    templateData.template = templateInfo.template;\n    templateData.parser = TEMPLATE_PARSER_REACT;\n  } else if (typeof templateInfo.template === \"function\") {\n    templateData.parser = TEMPLATE_PARSER_REACT;\n  }\n\n  return templateData;\n}\n\nfunction registerTemplateParser(name, renderFunction) {\n  templateParsers = templateParsers.set(name, renderFunction);\n}\n\nfunction renderTemplate(templateInfo, data = {}) {\n  if (templateInfo.parser === TEMPLATE_PARSER_REACT) {\n    return null;\n  } else if (templateInfo.parser === TEMPLATE_PARSER_HANDLEBARS) {\n    return renderHandlebarsTemplate(templateInfo, data);\n  }\n\n  if (typeof templateParsers.get(name) === \"function\") {\n    return templateParsers.get(name)(templateInfo, data);\n  }\n\n  return false;\n}\n\nfunction compileHandlebarsTemplate(name, template) {\n  const compiledTemplate = Handlebars.compile(template);\n  templateCache = templateCache.set(name, compiledTemplate);\n  return compiledTemplate;\n}\n\nfunction renderHandlebarsTemplate(templateInfo, data) {\n  if (templateCache[templateInfo.name] === undefined) {\n    compileHandlebarsTemplate(templateInfo.name, templateInfo.template);\n  }\n\n  const compiledTemplate = templateCache.get(templateInfo.name);\n  return compiledTemplate(data);\n}\n\nfunction renderTemplateToStaticMarkup(template, props) {\n  return ReactDOMServer.renderToStaticMarkup(React.createElement(template, props));\n}\n\nfunction resetRegisteredTemplates() {\n  registeredTemplates = Immutable.OrderedMap();\n}\n\nfunction initTemplates() {\n  Hooks.Events.add(\"afterCoreInit\", () => {\n    Assets.find({\n      type: \"template\"\n    }).forEach(t => {\n      Logger.debug(`Importing ${t.name} template`);\n\n      if (t.content) {\n        Reaction.Importer.template(JSON.parse(t.content));\n      } else {\n        Logger.debug(`No template content found for ${t.name} asset`);\n      }\n    });\n    Reaction.Importer.flush();\n  });\n}\n\nmodule.exportDefault({\n  get registeredTemplates() {\n    return registeredTemplates;\n  },\n\n  get templateCache() {\n    return templateCache;\n  },\n\n  get templateParsers() {\n    return templateParsers;\n  },\n\n  registerTemplate,\n  getTemplateByName,\n  processTemplateInfoForDatabase,\n  processTemplateInfoForMemoryCache,\n  compileHandlebarsTemplate,\n  renderHandlebarsTemplate,\n  renderTemplateToStaticMarkup\n});","map":{"version":3,"sources":["server/api/core/templates.js"],"names":["module","export","TEMPLATE_PARSER_REACT","TEMPLATE_PARSER_HANDLEBARS","registerTemplate","registerTemplateForMemoryCache","registerTemplateForDatabase","getTemplateByName","processTemplateInfoForMemoryCache","processTemplateInfoForDatabase","registerTemplateParser","renderTemplate","compileHandlebarsTemplate","renderHandlebarsTemplate","renderTemplateToStaticMarkup","resetRegisteredTemplates","initTemplates","React","watch","require","default","v","ReactDOMServer","Handlebars","Immutable","Assets","Templates","Hooks","Logger","Reaction","registeredTemplates","OrderedMap","templateCache","Map","templateParsers","templateInfo","shopId","insertImmediately","literal","reference","templateLiteral","templateReference","templateInfoForMemoryCache","shopTemplates","get","name","set","templateInfoForDatabase","update","type","$set","content","JSON","stringify","upsert","templateName","registeredTemplate","findOne","$or","isOriginalTemplate","info","template","toObject","templateData","title","subject","templateFor","parser","renderFunction","data","compiledTemplate","compile","undefined","props","renderToStaticMarkup","createElement","Events","add","find","forEach","t","debug","Importer","parse","flush","exportDefault"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,yBAAsB,MAAIA,qBAA3B;AAAiDC,8BAA2B,MAAIA,0BAAhF;AAA2GC,oBAAiB,MAAIA,gBAAhI;AAAiJC,kCAA+B,MAAIA,8BAApL;AAAmNC,+BAA4B,MAAIA,2BAAnP;AAA+QC,qBAAkB,MAAIA,iBAArS;AAAuTC,qCAAkC,MAAIA,iCAA7V;AAA+XC,kCAA+B,MAAIA,8BAAla;AAAicC,0BAAuB,MAAIA,sBAA5d;AAAmfC,kBAAe,MAAIA,cAAtgB;AAAqhBC,6BAA0B,MAAIA,yBAAnjB;AAA6kBC,4BAAyB,MAAIA,wBAA1mB;AAAmoBC,gCAA6B,MAAIA,4BAApqB;AAAisBC,4BAAyB,MAAIA,wBAA9tB;AAAuvBC,iBAAc,MAAIA;AAAzwB,CAAd;AAAuyB,IAAIC,KAAJ;AAAUjB,OAAOkB,KAAP,CAAaC,QAAQ,OAAR,CAAb,EAA8B;AAACC,UAAQC,CAAR,EAAU;AAACJ,YAAMI,CAAN;AAAQ;;AAApB,CAA9B,EAAoD,CAApD;AAAuD,IAAIC,cAAJ;AAAmBtB,OAAOkB,KAAP,CAAaC,QAAQ,kBAAR,CAAb,EAAyC;AAACC,UAAQC,CAAR,EAAU;AAACC,qBAAeD,CAAf;AAAiB;;AAA7B,CAAzC,EAAwE,CAAxE;AAA2E,IAAIE,UAAJ;AAAevB,OAAOkB,KAAP,CAAaC,QAAQ,YAAR,CAAb,EAAmC;AAACC,UAAQC,CAAR,EAAU;AAACE,iBAAWF,CAAX;AAAa;;AAAzB,CAAnC,EAA8D,CAA9D;AAAiE,IAAIG,SAAJ;AAAcxB,OAAOkB,KAAP,CAAaC,QAAQ,WAAR,CAAb,EAAkC;AAACC,UAAQC,CAAR,EAAU;AAACG,gBAAUH,CAAV;AAAY;;AAAxB,CAAlC,EAA4D,CAA5D;AAA+D,IAAII,MAAJ,EAAWC,SAAX;AAAqB1B,OAAOkB,KAAP,CAAaC,QAAQ,0BAAR,CAAb,EAAiD;AAACM,SAAOJ,CAAP,EAAS;AAACI,aAAOJ,CAAP;AAAS,GAApB;;AAAqBK,YAAUL,CAAV,EAAY;AAACK,gBAAUL,CAAV;AAAY;;AAA9C,CAAjD,EAAiG,CAAjG;AAAoG,IAAIM,KAAJ,EAAUC,MAAV,EAAiBC,QAAjB;AAA0B7B,OAAOkB,KAAP,CAAaC,QAAQ,MAAR,CAAb,EAA6B;AAACQ,QAAMN,CAAN,EAAQ;AAACM,YAAMN,CAAN;AAAQ,GAAlB;;AAAmBO,SAAOP,CAAP,EAAS;AAACO,aAAOP,CAAP;AAAS,GAAtC;;AAAuCQ,WAASR,CAAT,EAAW;AAACQ,eAASR,CAAT;AAAW;;AAA9D,CAA7B,EAA6F,CAA7F;AAOtvC,IAAIS,sBAAsBN,UAAUO,UAAV,EAA1B;AACA,IAAIC,gBAAgBR,UAAUS,GAAV,EAApB;AACA,IAAIC,kBAAkBV,UAAUS,GAAV,EAAtB;AAEO,MAAM/B,wBAAwB,OAA9B;AACA,MAAMC,6BAA6B,YAAnC;;AAWA,SAASC,gBAAT,CAA0B+B,YAA1B,EAAwCC,MAAxC,EAAgDC,oBAAoB,KAApE,EAA2E;AAChF,QAAMC,UAAUjC,+BAA+B8B,YAA/B,EAA6CC,MAA7C,CAAhB;AACA,QAAMG,YAAYjC,4BAA4B6B,YAA5B,EAA0CC,MAA1C,EAAkDC,iBAAlD,CAAlB;AAEA,SAAO;AACLG,qBAAiBF,OADZ;AAELG,uBAAmBF;AAFd,GAAP;AAID;;AAaM,SAASlC,8BAAT,CAAwC8B,YAAxC,EAAsDC,MAAtD,EAA8D;AACnE,QAAMM,6BAA6BlC,kCAAkC2B,YAAlC,CAAnC;AACA,MAAIQ,gBAAgBb,oBAAoBc,GAApB,CAAwBR,MAAxB,CAApB;;AAEA,MAAI,CAACO,aAAL,EAAoB;AAClBA,oBAAgB,EAAhB;AACD;;AAEDA,gBAAcR,aAAaU,IAA3B,IAAmCH,0BAAnC;AACAZ,wBAAsBA,oBAAoBgB,GAApB,CAAwBV,MAAxB,EAAgCO,aAAhC,CAAtB;AAEA,SAAOD,0BAAP;AACD;;AAYM,SAASpC,2BAAT,CAAqC6B,YAArC,EAAmD;AACxD,QAAMY,0BAA0BtC,+BAA+B0B,YAA/B,CAAhC,CADwD,CAGxD;;AACAV,SAAOuB,MAAP,CAAc;AACZC,UAAM,UADM;AAEZJ,UAAME,wBAAwBF;AAFlB,GAAd,EAGG;AACDK,UAAM;AACJC,eAASC,KAAKC,SAAL,CAAeN,uBAAf;AADL;AADL,GAHH,EAOG;AACDO,YAAQ;AADP,GAPH;AAWA,SAAOP,uBAAP;AACD;;AAUM,SAASxC,iBAAT,CAA2BgD,YAA3B,EAAyCnB,MAAzC,EAAiD;AACtD,QAAMoB,qBAAqB1B,oBAAoBc,GAApB,CAAwBR,MAAxB,EAAgCmB,YAAhC,CAA3B;;AAEA,MAAIC,kBAAJ,EAAwB;AACtB,WAAOA,kBAAP;AACD;;AAED,QAAMrB,eAAeT,UAAU+B,OAAV,CAAkB;AACrCZ,UAAMU,YAD+B;AAErCG,SAAK,CACH;AACA;AACEC,0BAAoB;AADtB,KAFG,EAKH;AACA;AACEA,0BAAoB;AADtB,KANG,CAFgC;AAYrCvB;AAZqC,GAAlB,CAArB;AAeA,SAAO/B,+BAA+B8B,YAA/B,CAAP;AACD;;AAYM,SAAS3B,iCAAT,CAA2C2B,YAA3C,EAAyD;AAC9D;AACA,QAAMyB,OAAOpC,UAAUS,GAAV,CAAcE,YAAd,CAAb;;AAEA,MAAI,OAAOA,aAAa0B,QAApB,KAAiC,QAArC,EAA+C;AAC7C,WAAOD,KAAKd,GAAL,CAAS,QAAT,EAAmB3C,0BAAnB,EAA+C2D,QAA/C,EAAP;AACD,GAFD,MAEO,IAAI,OAAO3B,aAAa0B,QAApB,KAAiC,UAArC,EAAiD;AACtD,WAAOD,KAAKd,GAAL,CAAS,QAAT,EAAmB5C,qBAAnB,EAA0C4D,QAA1C,EAAP;AACD,GAFM,MAEA,IAAI,OAAO3B,aAAa0B,QAApB,KAAiC,QAArC,EAA+C;AACpD,WAAOD,KAAKd,GAAL,CAAS,QAAT,EAAmB5C,qBAAnB,EAA0C4D,QAA1C,EAAP;AACD;;AAED,SAAO,IAAP;AACD;;AAiBM,SAASrD,8BAAT,CAAwC0B,YAAxC,EAAsD;AAC3D,QAAM4B,eAAe;AACnBlB,UAAMV,aAAaU,IADA;AAEnBmB,WAAO7B,aAAa6B,KAFD;AAGnBf,UAAMd,aAAac,IAHA;AAInBgB,aAAS9B,aAAa8B,OAJH;AAKnBC,iBAAa/B,aAAa+B;AALP,GAArB;;AASA,MAAI,OAAO/B,aAAa0B,QAApB,KAAiC,QAArC,EAA+C;AAC7CE,iBAAaF,QAAb,GAAwB1B,aAAa0B,QAArC;AACAE,iBAAaI,MAAb,GAAsBhE,0BAAtB;AACD,GAHD,MAGO,IAAI,OAAOgC,aAAa0B,QAApB,KAAiC,QAArC,EAA+C;AACpDE,iBAAaF,QAAb,GAAwB1B,aAAa0B,QAArC;AACAE,iBAAaI,MAAb,GAAsBjE,qBAAtB;AACD,GAHM,MAGA,IAAI,OAAOiC,aAAa0B,QAApB,KAAiC,UAArC,EAAiD;AACtDE,iBAAaI,MAAb,GAAsBjE,qBAAtB;AACD;;AAED,SAAO6D,YAAP;AACD;;AAUM,SAASrD,sBAAT,CAAgCmC,IAAhC,EAAsCuB,cAAtC,EAAsD;AAC3DlC,oBAAkBA,gBAAgBY,GAAhB,CAAoBD,IAApB,EAA0BuB,cAA1B,CAAlB;AACD;;AAUM,SAASzD,cAAT,CAAwBwB,YAAxB,EAAsCkC,OAAO,EAA7C,EAAiD;AACtD,MAAIlC,aAAagC,MAAb,KAAwBjE,qBAA5B,EAAmD;AACjD,WAAO,IAAP;AACD,GAFD,MAEO,IAAIiC,aAAagC,MAAb,KAAwBhE,0BAA5B,EAAwD;AAC7D,WAAOU,yBAAyBsB,YAAzB,EAAuCkC,IAAvC,CAAP;AACD;;AAED,MAAI,OAAOnC,gBAAgBU,GAAhB,CAAoBC,IAApB,CAAP,KAAqC,UAAzC,EAAqD;AACnD,WAAOX,gBAAgBU,GAAhB,CAAoBC,IAApB,EAA0BV,YAA1B,EAAwCkC,IAAxC,CAAP;AACD;;AAED,SAAO,KAAP;AACD;;AAWM,SAASzD,yBAAT,CAAmCiC,IAAnC,EAAyCgB,QAAzC,EAAmD;AACxD,QAAMS,mBAAmB/C,WAAWgD,OAAX,CAAmBV,QAAnB,CAAzB;AACA7B,kBAAgBA,cAAcc,GAAd,CAAkBD,IAAlB,EAAwByB,gBAAxB,CAAhB;AACA,SAAOA,gBAAP;AACD;;AAWM,SAASzD,wBAAT,CAAkCsB,YAAlC,EAAgDkC,IAAhD,EAAsD;AAC3D,MAAIrC,cAAcG,aAAaU,IAA3B,MAAqC2B,SAAzC,EAAoD;AAClD5D,8BAA0BuB,aAAaU,IAAvC,EAA6CV,aAAa0B,QAA1D;AACD;;AAED,QAAMS,mBAAmBtC,cAAcY,GAAd,CAAkBT,aAAaU,IAA/B,CAAzB;AACA,SAAOyB,iBAAiBD,IAAjB,CAAP;AACD;;AAUM,SAASvD,4BAAT,CAAsC+C,QAAtC,EAAgDY,KAAhD,EAAuD;AAC5D,SAAOnD,eAAeoD,oBAAf,CAAoCzD,MAAM0D,aAAN,CAAoBd,QAApB,EAA8BY,KAA9B,CAApC,CAAP;AACD;;AASM,SAAS1D,wBAAT,GAAoC;AACzCe,wBAAsBN,UAAUO,UAAV,EAAtB;AACD;;AASM,SAASf,aAAT,GAAyB;AAC9BW,QAAMiD,MAAN,CAAaC,GAAb,CAAiB,eAAjB,EAAkC,MAAM;AACtCpD,WAAOqD,IAAP,CAAY;AAAE7B,YAAM;AAAR,KAAZ,EAAkC8B,OAAlC,CAA2CC,CAAD,IAAO;AAC/CpD,aAAOqD,KAAP,CAAc,aAAYD,EAAEnC,IAAK,WAAjC;;AACA,UAAImC,EAAE7B,OAAN,EAAe;AACbtB,iBAASqD,QAAT,CAAkBrB,QAAlB,CAA2BT,KAAK+B,KAAL,CAAWH,EAAE7B,OAAb,CAA3B;AACD,OAFD,MAEO;AACLvB,eAAOqD,KAAP,CAAc,iCAAgCD,EAAEnC,IAAK,QAArD;AACD;AACF,KAPD;AAQAhB,aAASqD,QAAT,CAAkBE,KAAlB;AACD,GAVD;AAWD;;AAnSDpF,OAAOqF,aAAP,CAqSe;AACb,MAAIvD,mBAAJ,GAA0B;AACxB,WAAOA,mBAAP;AACD,GAHY;;AAIb,MAAIE,aAAJ,GAAoB;AAClB,WAAOA,aAAP;AACD,GANY;;AAOb,MAAIE,eAAJ,GAAsB;AACpB,WAAOA,eAAP;AACD,GATY;;AAUb9B,kBAVa;AAWbG,mBAXa;AAYbE,gCAZa;AAabD,mCAba;AAcbI,2BAda;AAebC,0BAfa;AAgBbC;AAhBa,CArSf","sourcesContent":["import React from \"react\";\nimport ReactDOMServer from \"react-dom/server\";\nimport Handlebars from \"handlebars\";\nimport Immutable from \"immutable\";\nimport { Assets, Templates } from \"/lib/collections\";\nimport { Hooks, Logger, Reaction } from \"/server/api\";\n\nlet registeredTemplates = Immutable.OrderedMap();\nlet templateCache = Immutable.Map();\nlet templateParsers = Immutable.Map();\n\nexport const TEMPLATE_PARSER_REACT = \"react\";\nexport const TEMPLATE_PARSER_HANDLEBARS = \"handlebars\";\n\n/**\n * @name registerTemplate\n * @method\n * @memberof Core\n * @param  {String}  templateInfo              [description]\n * @param  {String}  shopId                    [description]\n * @param  {Boolean} [insertImmediately=false] [description]\n * @return {Object}                            Returns `templateLiteral` and `templateReference`\n */\nexport function registerTemplate(templateInfo, shopId, insertImmediately = false) {\n  const literal = registerTemplateForMemoryCache(templateInfo, shopId);\n  const reference = registerTemplateForDatabase(templateInfo, shopId, insertImmediately);\n\n  return {\n    templateLiteral: literal,\n    templateReference: reference\n  };\n}\n\n/**\n * @name registerTemplateForMemoryCache\n * @method\n * @memberof Core\n * @summary Process template info and cache in memory.\n * This allows us to have function and class references for the templates for\n * React and other custom parsers\n * @param  {Object} templateInfo Template info with parser info\n * @param  {String} shopId       Shop ID\n * @return {Object}              Template from cache\n */\nexport function registerTemplateForMemoryCache(templateInfo, shopId) {\n  const templateInfoForMemoryCache = processTemplateInfoForMemoryCache(templateInfo);\n  let shopTemplates = registeredTemplates.get(shopId);\n\n  if (!shopTemplates) {\n    shopTemplates = {};\n  }\n\n  shopTemplates[templateInfo.name] = templateInfoForMemoryCache;\n  registeredTemplates = registeredTemplates.set(shopId, shopTemplates);\n\n  return templateInfoForMemoryCache;\n}\n\n/**\n * @name registerTemplateForDatabase\n * @method\n * @memberof Core\n * @summary Process template info for use in a database\n * Namely, any literals like functions are stripped as they cannot be safely,\n * and should not stored in the database\n * @param  {Object} templateInfo Template info with parser info\n * @return {Object}              Return template data crafted for entry into a database\n */\nexport function registerTemplateForDatabase(templateInfo) {\n  const templateInfoForDatabase = processTemplateInfoForDatabase(templateInfo);\n\n  // Import template into the Assets collecton.\n  Assets.update({\n    type: \"template\",\n    name: templateInfoForDatabase.name\n  }, {\n    $set: {\n      content: JSON.stringify(templateInfoForDatabase)\n    }\n  }, {\n    upsert: true\n  });\n\n  return templateInfoForDatabase;\n}\n\n/**\n * @name getTemplateByName\n * @method\n * @memberof Core\n * @param  {String} templateName Template name\n * @param  {String} shopId       Shop ID\n * @return {Object}              Template object\n */\nexport function getTemplateByName(templateName, shopId) {\n  const registeredTemplate = registeredTemplates.get(shopId)[templateName];\n\n  if (registeredTemplate) {\n    return registeredTemplate;\n  }\n\n  const templateInfo = Templates.findOne({\n    name: templateName,\n    $or: [\n      // Attempt to find user editable / edited template first\n      {\n        isOriginalTemplate: false\n      },\n      // Fallback to the original templates\n      {\n        isOriginalTemplate: true\n      }\n    ],\n    shopId\n  });\n\n  return registerTemplateForMemoryCache(templateInfo);\n}\n\n/**\n * @name processTemplateInfoForMemoryCache\n * @method\n * @memberof Core\n * @summary Sets parser to Handlebars for string-based templates and\n * React for functions, objects\n * @param  {Object} templateInfo\n * @param  {String} templateInfo.template Accepted values: `string`, `function`, `object`\n * @return {Boolean|null}              True on success or null\n */\nexport function processTemplateInfoForMemoryCache(templateInfo) {\n  // Avoid mutating the original passed in param\n  const info = Immutable.Map(templateInfo);\n\n  if (typeof templateInfo.template === \"string\") {\n    return info.set(\"parser\", TEMPLATE_PARSER_HANDLEBARS).toObject();\n  } else if (typeof templateInfo.template === \"function\") {\n    return info.set(\"parser\", TEMPLATE_PARSER_REACT).toObject();\n  } else if (typeof templateInfo.template === \"object\") {\n    return info.set(\"parser\", TEMPLATE_PARSER_REACT).toObject();\n  }\n\n  return null;\n}\n\n/**\n * @name processTemplateInfoForDatabase\n * @method\n * @memberof Core\n * @summary Return `templateData` with `name`, `title`, `type`, `subject`, `templateFor`\n * @param  {Object} templateInfo Object with `templateInfo`\n * @param  {String} templateInfo.template template\n * @param  {String} templateInfo.parser `React` or `Handlebars`\n * @return {Object} templateData\n * @return {String} templateData.name\n * @return {String} templateData.title\n * @return {String} templateData.type\n * @return {String} templateData.subject\n * @return {String} templateData.templateFor\n */\nexport function processTemplateInfoForDatabase(templateInfo) {\n  const templateData = {\n    name: templateInfo.name,\n    title: templateInfo.title,\n    type: templateInfo.type,\n    subject: templateInfo.subject,\n    templateFor: templateInfo.templateFor\n  };\n\n\n  if (typeof templateInfo.template === \"string\") {\n    templateData.template = templateInfo.template;\n    templateData.parser = TEMPLATE_PARSER_HANDLEBARS;\n  } else if (typeof templateInfo.template === \"object\") {\n    templateData.template = templateInfo.template;\n    templateData.parser = TEMPLATE_PARSER_REACT;\n  } else if (typeof templateInfo.template === \"function\") {\n    templateData.parser = TEMPLATE_PARSER_REACT;\n  }\n\n  return templateData;\n}\n\n/**\n * @name registerTemplateParser\n * @method\n * @memberof Core\n * @param  {String} name Name of a parser, like React or Handlebars\n * @param  {Function} renderFunction Function\n * @return {null}\n */\nexport function registerTemplateParser(name, renderFunction) {\n  templateParsers = templateParsers.set(name, renderFunction);\n}\n\n/**\n * @name renderTemplate\n * @method\n * @memberof Core\n * @param  {Object} templateInfo React or Handlebars\n * @param  {Object} [data={}]    Template data\n * @return {Object|false}        Returns React, Handlebars template or false\n */\nexport function renderTemplate(templateInfo, data = {}) {\n  if (templateInfo.parser === TEMPLATE_PARSER_REACT) {\n    return null;\n  } else if (templateInfo.parser === TEMPLATE_PARSER_HANDLEBARS) {\n    return renderHandlebarsTemplate(templateInfo, data);\n  }\n\n  if (typeof templateParsers.get(name) === \"function\") {\n    return templateParsers.get(name)(templateInfo, data);\n  }\n\n  return false;\n}\n\n/**\n * @name compileHandlebarsTemplate\n * @method\n * @memberof Core\n * @summary Compile and cache Handlebars template\n * @param {String} name Name of template to register amd save to cache\n * @param {String} template markup\n * @return {Function} Compiled handlebars template.\n */\nexport function compileHandlebarsTemplate(name, template) {\n  const compiledTemplate = Handlebars.compile(template);\n  templateCache = templateCache.set(name, compiledTemplate);\n  return compiledTemplate;\n}\n\n/**\n * @name renderHandlebarsTemplate\n * @method\n * @memberof Core\n * @summary Render Handlebars template\n * @param  {String} templateInfo Template info\n * @param  {Object} data         Data\n * @return {Object}              Handlebars template\n */\nexport function renderHandlebarsTemplate(templateInfo, data) {\n  if (templateCache[templateInfo.name] === undefined) {\n    compileHandlebarsTemplate(templateInfo.name, templateInfo.template);\n  }\n\n  const compiledTemplate = templateCache.get(templateInfo.name);\n  return compiledTemplate(data);\n}\n\n/**\n * @name renderTemplateToStaticMarkup\n * @method\n * @memberof Core\n * @param  {Object} template React template name\n * @param  {Object} props    React props\n * @return {Object}          Static markup\n */\nexport function renderTemplateToStaticMarkup(template, props) {\n  return ReactDOMServer.renderToStaticMarkup(React.createElement(template, props));\n}\n\n/**\n * @name resetRegisteredTemplates\n * @method\n * @memberof Core\n * @summary Reset regestered templates. This is mostly useful for aiding in unit testing\n * @return {Immutable.OrderedMap} immultable.js OrderedMap\n */\nexport function resetRegisteredTemplates() {\n  registeredTemplates = Immutable.OrderedMap();\n}\n\n/**\n * @name initTemplates\n * @method\n * @memberof Core\n * @summary Hook to setup core Templates imports during Reaction init\n * @return {null}\n */\nexport function initTemplates() {\n  Hooks.Events.add(\"afterCoreInit\", () => {\n    Assets.find({ type: \"template\" }).forEach((t) => {\n      Logger.debug(`Importing ${t.name} template`);\n      if (t.content) {\n        Reaction.Importer.template(JSON.parse(t.content));\n      } else {\n        Logger.debug(`No template content found for ${t.name} asset`);\n      }\n    });\n    Reaction.Importer.flush();\n  });\n}\n\nexport default {\n  get registeredTemplates() {\n    return registeredTemplates;\n  },\n  get templateCache() {\n    return templateCache;\n  },\n  get templateParsers() {\n    return templateParsers;\n  },\n  registerTemplate,\n  getTemplateByName,\n  processTemplateInfoForDatabase,\n  processTemplateInfoForMemoryCache,\n  compileHandlebarsTemplate,\n  renderHandlebarsTemplate,\n  renderTemplateToStaticMarkup\n};\n"]},"sourceType":"script","hash":"6a53ebe6e837252902bb7d5b5c54ed289fffc7c3"}
