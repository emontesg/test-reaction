{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/included/jobcontrol/server/jobs/cart.js","filename":"imports/plugins/included/jobcontrol/server/jobs/cart.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/included/jobcontrol/server/jobs/cart.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/included/jobcontrol/server/jobs/cart.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/included/jobcontrol/server/jobs/cart.js"}},"code":"module.export({\n  setupStaleCartHook: () => setupStaleCartHook,\n  cartCleanupJob: () => cartCleanupJob\n});\nlet Job;\nmodule.watch(require(\"../../../../core/job-collection/lib\"), {\n  Job(v) {\n    Job = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Accounts, Cart, Jobs;\nmodule.watch(require(\"../../../../../../lib/collections\"), {\n  Accounts(v) {\n    Accounts = v;\n  },\n\n  Cart(v) {\n    Cart = v;\n  },\n\n  Jobs(v) {\n    Jobs = v;\n  }\n\n}, 2);\nlet Hooks, Logger, Reaction;\nmodule.watch(require(\"../../../../../../server/api\"), {\n  Hooks(v) {\n    Hooks = v;\n  },\n\n  Logger(v) {\n    Logger = v;\n  },\n\n  Reaction(v) {\n    Reaction = v;\n  }\n\n}, 3);\nlet ServerSessions;\nmodule.watch(require(\"../../../../../../server/publications/collections/sessions\"), {\n  ServerSessions(v) {\n    ServerSessions = v;\n  }\n\n}, 4);\nlet moment;\n\nfunction lazyLoadMoment() {\n  return Promise.asyncApply(() => {\n    if (moment) return;\n    moment = Promise.await(Promise.resolve().then(() => require(\"moment\")));\n  });\n}\n/**\n * {Function} that fetches stale carts\n * @param {Object} olderThan older than date\n * @return {Object} stale carts\n */\n\n\nconst getstaleCarts = olderThan => Cart.find({\n  updatedAt: {\n    $lte: olderThan\n  }\n}).fetch();\n\nfunction setupStaleCartHook() {\n  Hooks.Events.add(\"afterCoreInit\", () => {\n    Logger.debug(\"Adding Job removeStaleCart and Accounts to jobControl\");\n    const settings = Reaction.getShopSettings();\n\n    if (settings.cart) {\n      new Job(Jobs, \"cart/removeFromCart\", {}).priority(\"normal\").retry({\n        retries: 5,\n        wait: 60000,\n        backoff: \"exponential\" // delay by twice as long for each subsequent retry\n\n      }).repeat({\n        schedule: Jobs.later.parse.text(\"every day\")\n      }).save({\n        cancelRepeats: true\n      });\n    } else {\n      Logger.debug(\"No cart cleanup schedule\");\n    }\n  });\n}\n\nfunction cartCleanupJob() {\n  const removeStaleCart = Jobs.processJobs(\"cart/removeFromCart\", {\n    pollInterval: 60 * 60 * 1000,\n    // backup polling, see observer below\n    workTimeout: 180 * 1000\n  }, (job, callback) => {\n    Logger.debug(\"Processing cart/removeFromCart\");\n    const settings = Reaction.getShopSettings();\n\n    if (settings.cart) {\n      Promise.await(lazyLoadMoment());\n      const schedule = settings.cart.cleanupDurationDays.match(/\\d/); // configurable in shop settings\n\n      const olderThan = moment().subtract(Number(schedule[0]), \"days\")._d;\n\n      const carts = getstaleCarts(olderThan);\n      carts.forEach(cart => {\n        const user = Accounts.findOne({\n          _id: cart.userId\n        });\n\n        if (!user.emails.length) {\n          const removeCart = Cart.remove({\n            userId: user._id\n          });\n          const removeAccount = Accounts.remove({\n            _id: cart.userId,\n            emails: []\n          });\n          Hooks.Events.run(\"afterAccountsRemove\", null, user._id);\n          const destroySession = ServerSessions.remove({\n            _id: cart.sessionId\n          });\n          Meteor.users.remove({\n            _id: user._id,\n            emails: []\n          }); // clears out anonymous user\n\n          if (removeCart && removeAccount && destroySession) {\n            const success = \"Stale anonymous user cart and account successfully cleaned\";\n            Logger.debug(success);\n            job.done(success, {\n              repeatId: true\n            });\n          }\n        } else {\n          Cart.remove({\n            userId: user._id\n          });\n          const success = \"Stale user cart successfully cleaned\";\n          Logger.debug(success);\n          job.done(success, {\n            repeatId: true\n          });\n        }\n      });\n    } else {\n      Logger.debug(\"No cart cleanup schedule\");\n    }\n\n    callback();\n  });\n  Jobs.find({\n    type: \"cart/removeFromCart\",\n    status: \"ready\"\n  }).observe({\n    added() {\n      return removeStaleCart.trigger();\n    }\n\n  });\n}","map":{"version":3,"sources":["imports/plugins/included/jobcontrol/server/jobs/cart.js"],"names":["module","export","setupStaleCartHook","cartCleanupJob","Job","watch","require","v","Meteor","Accounts","Cart","Jobs","Hooks","Logger","Reaction","ServerSessions","moment","lazyLoadMoment","getstaleCarts","olderThan","find","updatedAt","$lte","fetch","Events","add","debug","settings","getShopSettings","cart","priority","retry","retries","wait","backoff","repeat","schedule","later","parse","text","save","cancelRepeats","removeStaleCart","processJobs","pollInterval","workTimeout","job","callback","Promise","await","cleanupDurationDays","match","subtract","Number","_d","carts","forEach","user","findOne","_id","userId","emails","length","removeCart","remove","removeAccount","run","destroySession","sessionId","users","success","done","repeatId","type","status","observe","added","trigger"],"mappings":"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","sourcesContent":["import { Job } from \"/imports/plugins/core/job-collection/lib\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Accounts, Cart, Jobs } from \"/lib/collections\";\nimport { Hooks, Logger, Reaction } from \"/server/api\";\nimport { ServerSessions } from \"/server/publications/collections/sessions\";\n\nlet moment;\nasync function lazyLoadMoment() {\n  if (moment) return;\n  moment = await import(\"moment\");\n}\n\n\n/**\n * {Function} that fetches stale carts\n * @param {Object} olderThan older than date\n * @return {Object} stale carts\n */\nconst getstaleCarts = (olderThan) => Cart.find({ updatedAt: { $lte: olderThan } }).fetch();\n\n\nexport function setupStaleCartHook() {\n  Hooks.Events.add(\"afterCoreInit\", () => {\n    Logger.debug(\"Adding Job removeStaleCart and Accounts to jobControl\");\n    const settings = Reaction.getShopSettings();\n    if (settings.cart) {\n      new Job(Jobs, \"cart/removeFromCart\", {})\n        .priority(\"normal\")\n        .retry({\n          retries: 5,\n          wait: 60000,\n          backoff: \"exponential\" // delay by twice as long for each subsequent retry\n        })\n        .repeat({\n          schedule: Jobs.later.parse.text(\"every day\")\n        })\n        .save({\n          cancelRepeats: true\n        });\n    } else {\n      Logger.debug(\"No cart cleanup schedule\");\n    }\n  });\n}\n\nexport function cartCleanupJob() {\n  const removeStaleCart = Jobs.processJobs(\"cart/removeFromCart\", {\n    pollInterval: 60 * 60 * 1000, // backup polling, see observer below\n    workTimeout: 180 * 1000\n  }, (job, callback) => {\n    Logger.debug(\"Processing cart/removeFromCart\");\n    const settings = Reaction.getShopSettings();\n    if (settings.cart) {\n      Promise.await(lazyLoadMoment());\n      const schedule = (settings.cart.cleanupDurationDays).match(/\\d/);// configurable in shop settings\n      const olderThan = moment().subtract(Number(schedule[0]), \"days\")._d;\n      const carts = getstaleCarts(olderThan);\n      carts.forEach((cart) => {\n        const user = Accounts.findOne({ _id: cart.userId });\n        if (!user.emails.length) {\n          const removeCart = Cart.remove({ userId: user._id });\n          const removeAccount = Accounts.remove({\n            _id: cart.userId,\n            emails: []\n          });\n          Hooks.Events.run(\"afterAccountsRemove\", null, user._id);\n          const destroySession = ServerSessions.remove({ _id: cart.sessionId });\n          Meteor.users.remove({ _id: user._id, emails: [] }); // clears out anonymous user\n          if (removeCart && removeAccount && destroySession) {\n            const success = \"Stale anonymous user cart and account successfully cleaned\";\n            Logger.debug(success);\n            job.done(success, { repeatId: true });\n          }\n        } else {\n          Cart.remove({ userId: user._id });\n          const success = \"Stale user cart successfully cleaned\";\n          Logger.debug(success);\n          job.done(success, { repeatId: true });\n        }\n      });\n    } else {\n      Logger.debug(\"No cart cleanup schedule\");\n    }\n    callback();\n  });\n  Jobs.find({\n    type: \"cart/removeFromCart\",\n    status: \"ready\"\n  }).observe({\n    added() {\n      return removeStaleCart.trigger();\n    }\n  });\n}\n"]},"sourceType":"script","hash":"63fd5117f1a2da010f15bd9d152df96c2b336c77"}
