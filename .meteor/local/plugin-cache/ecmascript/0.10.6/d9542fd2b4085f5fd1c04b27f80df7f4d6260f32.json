{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"server/methods/core/registry.js","filename":"server/methods/core/registry.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"server/methods/core/registry.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"server/methods/core/registry.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/methods/core/registry.js"}},"code":"module.export({\n  methods: () => methods\n});\n\nlet _each;\n\nmodule.watch(require(\"lodash/each\"), {\n  default(v) {\n    _each = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet Packages;\nmodule.watch(require(\"../../../lib/collections\"), {\n  Packages(v) {\n    Packages = v;\n  }\n\n}, 3);\nlet Reaction;\nmodule.watch(require(\"../../api\"), {\n  Reaction(v) {\n    Reaction = v;\n  }\n\n}, 4);\nlet mergeDeep;\nmodule.watch(require(\"../../../lib/api\"), {\n  mergeDeep(v) {\n    mergeDeep = v;\n  }\n\n}, 5);\nconst methods = {\n  /**\n   * @name registry/update\n   * @method\n   * @memberof Methods/Registry\n   * @example Meteor.call(\"registry/update\", packageId, settingsKey, fields)\n   * @param  {String} packageId id of package\n   * @param  {String} name      Name of package\n   * @param  {Array} fields     Fields to update\n   * @todo Name could be optional. Just use package name as default.\n   * @return {Boolean}          true on success, false on error\n   */\n  \"registry/update\"(packageId, name, fields) {\n    check(packageId, String);\n    check(name, String);\n    check(fields, Array); // settings use just the last name from full name so that schemas don't need to define overly complex names based with\n    // x/x/x formatting.\n    // TODO Name could be optional. Just use package name as default\n\n    const setting = name.split(\"/\").splice(-1);\n    let dataToSave = {};\n    dataToSave[setting] = {};\n    const currentPackage = Packages.findOne(packageId);\n\n    _each(fields, field => {\n      dataToSave[setting][field.property] = field.value;\n    });\n\n    if (currentPackage && currentPackage.settings) {\n      dataToSave = mergeDeep(currentPackage.settings, dataToSave);\n    } // user must have permission to package to update settings\n\n\n    if (Reaction.hasPermission([currentPackage.name])) {\n      return Packages.upsert({\n        _id: packageId,\n        name: currentPackage.name,\n        enabled: currentPackage.enabled\n      }, {\n        $set: {\n          settings: dataToSave\n        }\n      }, {\n        upsert: true\n      });\n    }\n\n    return false;\n  }\n\n};\nMeteor.methods(methods);","map":{"version":3,"sources":["server/methods/core/registry.js"],"names":["module","export","methods","_each","watch","require","default","v","Meteor","check","Packages","Reaction","mergeDeep","packageId","name","fields","String","Array","setting","split","splice","dataToSave","currentPackage","findOne","field","property","value","settings","hasPermission","upsert","_id","enabled","$set"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,WAAQ,MAAIA;AAAb,CAAd;;AAAqC,IAAIC,KAAJ;;AAAUH,OAAOI,KAAP,CAAaC,QAAQ,aAAR,CAAb,EAAoC;AAACC,UAAQC,CAAR,EAAU;AAACJ,YAAMI,CAAN;AAAQ;;AAApB,CAApC,EAA0D,CAA1D;AAA6D,IAAIC,MAAJ;AAAWR,OAAOI,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACG,SAAOD,CAAP,EAAS;AAACC,aAAOD,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIE,KAAJ;AAAUT,OAAOI,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACI,QAAMF,CAAN,EAAQ;AAACE,YAAMF,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAA4D,IAAIG,QAAJ;AAAaV,OAAOI,KAAP,CAAaC,QAAQ,0BAAR,CAAb,EAAiD;AAACK,WAASH,CAAT,EAAW;AAACG,eAASH,CAAT;AAAW;;AAAxB,CAAjD,EAA2E,CAA3E;AAA8E,IAAII,QAAJ;AAAaX,OAAOI,KAAP,CAAaC,QAAQ,WAAR,CAAb,EAAkC;AAACM,WAASJ,CAAT,EAAW;AAACI,eAASJ,CAAT;AAAW;;AAAxB,CAAlC,EAA4D,CAA5D;AAA+D,IAAIK,SAAJ;AAAcZ,OAAOI,KAAP,CAAaC,QAAQ,kBAAR,CAAb,EAAyC;AAACO,YAAUL,CAAV,EAAY;AAACK,gBAAUL,CAAV;AAAY;;AAA1B,CAAzC,EAAqE,CAArE;AAc1a,MAAML,UAAU;AACrB;;;;;;;;;;;AAWA,oBAAkBW,SAAlB,EAA6BC,IAA7B,EAAmCC,MAAnC,EAA2C;AACzCN,UAAMI,SAAN,EAAiBG,MAAjB;AACAP,UAAMK,IAAN,EAAYE,MAAZ;AACAP,UAAMM,MAAN,EAAcE,KAAd,EAHyC,CAIzC;AACA;AACA;;AACA,UAAMC,UAAUJ,KAAKK,KAAL,CAAW,GAAX,EAAgBC,MAAhB,CAAuB,CAAC,CAAxB,CAAhB;AACA,QAAIC,aAAa,EAAjB;AACAA,eAAWH,OAAX,IAAsB,EAAtB;AACA,UAAMI,iBAAiBZ,SAASa,OAAT,CAAiBV,SAAjB,CAAvB;;AAEA,UAAOE,MAAP,EAAgBS,KAAD,IAAW;AACxBH,iBAAWH,OAAX,EAAoBM,MAAMC,QAA1B,IAAsCD,MAAME,KAA5C;AACD,KAFD;;AAIA,QAAIJ,kBAAkBA,eAAeK,QAArC,EAA+C;AAC7CN,mBAAaT,UAAUU,eAAeK,QAAzB,EAAmCN,UAAnC,CAAb;AACD,KAlBwC,CAmBzC;;;AACA,QAAIV,SAASiB,aAAT,CAAuB,CAACN,eAAeR,IAAhB,CAAvB,CAAJ,EAAmD;AACjD,aAAOJ,SAASmB,MAAT,CAAgB;AACrBC,aAAKjB,SADgB;AAErBC,cAAMQ,eAAeR,IAFA;AAGrBiB,iBAAST,eAAeS;AAHH,OAAhB,EAIJ;AACDC,cAAM;AACJL,oBAAUN;AADN;AADL,OAJI,EAQJ;AAAEQ,gBAAQ;AAAV,OARI,CAAP;AASD;;AAED,WAAO,KAAP;AACD;;AA7CoB,CAAhB;AAgDPrB,OAAON,OAAP,CAAeA,OAAf","sourcesContent":["import _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { check } from \"meteor/check\";\nimport { Packages } from \"/lib/collections\";\nimport { Reaction } from \"/server/api\";\nimport { mergeDeep } from \"/lib/api\";\n\n/**\n * @file Methods for Registry\n *\n *\n * @namespace Methods/Registry\n*/\n\nexport const methods = {\n  /**\n   * @name registry/update\n   * @method\n   * @memberof Methods/Registry\n   * @example Meteor.call(\"registry/update\", packageId, settingsKey, fields)\n   * @param  {String} packageId id of package\n   * @param  {String} name      Name of package\n   * @param  {Array} fields     Fields to update\n   * @todo Name could be optional. Just use package name as default.\n   * @return {Boolean}          true on success, false on error\n   */\n  \"registry/update\"(packageId, name, fields) {\n    check(packageId, String);\n    check(name, String);\n    check(fields, Array);\n    // settings use just the last name from full name so that schemas don't need to define overly complex names based with\n    // x/x/x formatting.\n    // TODO Name could be optional. Just use package name as default\n    const setting = name.split(\"/\").splice(-1);\n    let dataToSave = {};\n    dataToSave[setting] = {};\n    const currentPackage = Packages.findOne(packageId);\n\n    _.each(fields, (field) => {\n      dataToSave[setting][field.property] = field.value;\n    });\n\n    if (currentPackage && currentPackage.settings) {\n      dataToSave = mergeDeep(currentPackage.settings, dataToSave);\n    }\n    // user must have permission to package to update settings\n    if (Reaction.hasPermission([currentPackage.name])) {\n      return Packages.upsert({\n        _id: packageId,\n        name: currentPackage.name,\n        enabled: currentPackage.enabled\n      }, {\n        $set: {\n          settings: dataToSave\n        }\n      }, { upsert: true });\n    }\n\n    return false;\n  }\n};\n\nMeteor.methods(methods);\n"]},"sourceType":"script","hash":"d9542fd2b4085f5fd1c04b27f80df7f4d6260f32"}
