{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/included/jobcontrol/server/jobs/cleanup.js","filename":"imports/plugins/included/jobcontrol/server/jobs/cleanup.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/included/jobcontrol/server/jobs/cleanup.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/included/jobcontrol/server/jobs/cleanup.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/included/jobcontrol/server/jobs/cleanup.js"}},"code":"module.export({\n  addCleanupJobControlHook: () => addCleanupJobControlHook,\n  cleanupJob: () => cleanupJob\n});\nlet Job;\nmodule.watch(require(\"../../../../core/job-collection/lib\"), {\n  Job(v) {\n    Job = v;\n  }\n\n}, 0);\nlet Jobs;\nmodule.watch(require(\"../../../../../../lib/collections\"), {\n  Jobs(v) {\n    Jobs = v;\n  }\n\n}, 1);\nlet Hooks, Logger;\nmodule.watch(require(\"../../../../../../server/api\"), {\n  Hooks(v) {\n    Hooks = v;\n  },\n\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 2);\nlet moment;\n\nfunction lazyLoadMoment() {\n  return Promise.asyncApply(() => {\n    if (moment) return;\n    moment = Promise.await(Promise.resolve().then(() => require(\"moment\")));\n  });\n}\n\nfunction addCleanupJobControlHook() {\n  Hooks.Events.add(\"onJobServerStart\", () => {\n    Logger.debug(\"Adding Job jobControl/removeStaleJobs to JobControl\");\n    new Job(Jobs, \"jobControl/removeStaleJobs\", {}).retry({\n      retries: 5,\n      wait: 60000,\n      backoff: \"exponential\"\n    }).repeat({\n      schedule: Jobs.later.parse.text(\"every day\")\n    }).save({\n      cancelRepeats: true\n    });\n  });\n}\n\nfunction cleanupJob() {\n  const removeStaleJobs = Jobs.processJobs(\"jobControl/removeStaleJobs\", {\n    pollInterval: 60 * 60 * 1000,\n    // backup polling, see observer below\n    workTimeout: 60 * 1000\n  }, (job, callback) => {\n    Logger.debug(\"Processing jobControl/removeStaleJobs...\"); // TODO: set this interval in the admin UI\n\n    Promise.await(lazyLoadMoment());\n\n    const olderThan = moment().subtract(3, \"days\")._d;\n\n    const ids = Jobs.find({\n      type: {\n        $nin: [\"sendEmail\"]\n      },\n      status: {\n        $in: [\"cancelled\", \"completed\", \"failed\"]\n      },\n      updated: {\n        $lt: olderThan\n      }\n    }, {\n      fields: {\n        _id: 1\n      }\n    }).map(d => d._id);\n    let success;\n\n    if (ids.length > 0) {\n      Jobs.removeJobs(ids);\n      success = `Removed ${ids.length} stale jobs`;\n      Logger.debug(success);\n    } else {\n      success = \"No eligible jobs to cleanup\";\n      Logger.debug(success);\n    }\n\n    job.done(success, {\n      repeatId: true\n    });\n    return callback();\n  });\n  Jobs.find({\n    type: \"jobControl/removeStaleJobs\",\n    status: \"ready\"\n  }).observe({\n    added() {\n      return removeStaleJobs.trigger();\n    }\n\n  });\n}","map":{"version":3,"sources":["imports/plugins/included/jobcontrol/server/jobs/cleanup.js"],"names":["module","export","addCleanupJobControlHook","cleanupJob","Job","watch","require","v","Jobs","Hooks","Logger","moment","lazyLoadMoment","Events","add","debug","retry","retries","wait","backoff","repeat","schedule","later","parse","text","save","cancelRepeats","removeStaleJobs","processJobs","pollInterval","workTimeout","job","callback","Promise","await","olderThan","subtract","_d","ids","find","type","$nin","status","$in","updated","$lt","fields","_id","map","d","success","length","removeJobs","done","repeatId","observe","added","trigger"],"mappings":"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","sourcesContent":["import { Job } from \"/imports/plugins/core/job-collection/lib\";\nimport { Jobs } from \"/lib/collections\";\nimport { Hooks, Logger } from \"/server/api\";\n\nlet moment;\nasync function lazyLoadMoment() {\n  if (moment) return;\n  moment = await import(\"moment\");\n}\n\nexport function addCleanupJobControlHook() {\n  Hooks.Events.add(\"onJobServerStart\", () => {\n    Logger.debug(\"Adding Job jobControl/removeStaleJobs to JobControl\");\n\n    new Job(Jobs, \"jobControl/removeStaleJobs\", {})\n      .retry({\n        retries: 5,\n        wait: 60000,\n        backoff: \"exponential\"\n      })\n      .repeat({\n        schedule: Jobs.later.parse.text(\"every day\")\n      })\n      .save({\n        cancelRepeats: true\n      });\n  });\n}\n\nexport function cleanupJob() {\n  const removeStaleJobs = Jobs.processJobs(\"jobControl/removeStaleJobs\", {\n    pollInterval: 60 * 60 * 1000, // backup polling, see observer below\n    workTimeout: 60 * 1000\n  }, (job, callback) => {\n    Logger.debug(\"Processing jobControl/removeStaleJobs...\");\n\n    // TODO: set this interval in the admin UI\n    Promise.await(lazyLoadMoment());\n    const olderThan = moment().subtract(3, \"days\")._d;\n\n    const ids = Jobs.find({\n      type: {\n        $nin: [\"sendEmail\"]\n      },\n      status: {\n        $in: [\"cancelled\", \"completed\", \"failed\"]\n      },\n      updated: {\n        $lt: olderThan\n      }\n    }, {\n      fields: {\n        _id: 1\n      }\n    }).map((d) => d._id);\n\n    let success;\n    if (ids.length > 0) {\n      Jobs.removeJobs(ids);\n      success = `Removed ${ids.length} stale jobs`;\n      Logger.debug(success);\n    } else {\n      success = \"No eligible jobs to cleanup\";\n      Logger.debug(success);\n    }\n    job.done(success, { repeatId: true });\n    return callback();\n  });\n\n  Jobs.find({\n    type: \"jobControl/removeStaleJobs\",\n    status: \"ready\"\n  }).observe({\n    added() {\n      return removeStaleJobs.trigger();\n    }\n  });\n}\n"]},"sourceType":"script","hash":"121c6282a70b6ee07d9c66abc530f7ed5369554b"}
