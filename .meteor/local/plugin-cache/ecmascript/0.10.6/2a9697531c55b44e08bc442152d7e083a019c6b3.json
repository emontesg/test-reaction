{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"lib/api/account-validation.js","filename":"lib/api/account-validation.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"lib/api/account-validation.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"lib/api/account-validation.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"lib/api/account-validation.js"}},"code":"module.export({\n  LoginFormValidation: () => LoginFormValidation\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet check, Match;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  },\n\n  Match(v) {\n    Match = v;\n  }\n\n}, 1);\n\n/**\n * @file Methods for Account Validation\n * Methods for validating account username, email and password. Methods are exported globally in the `LoginFormValidation` object and they are also registered as Meteor methods. Call the methods using\n * `Meteor.call()` or `LoginFormValidation.method`.\n * @example LoginFormValidation.password(password, { validationLevel: \"exists\" })\n * @example Meteor.call(\"accounts/validation/email\", newEmail, false, (result, error))\n * @namespace Methods/Accounts/Validation\n */\nconst validationMethods = {\n  /**\n   * @name accounts/validation/username\n   * @method\n   * @memberof Methods/Accounts/Validation\n   * @summary Determines if a username meets the minimum requirement of 3 characters\n   * @param  {String} username Username to validate\n   * @return {Boolean|Object} true if valid, error object if invalid\n   */\n  username(username) {\n    check(username, Match.OptionalOrNull(String)); // Valid\n\n    if (username.length >= 3) {\n      return true;\n    } // Invalid\n\n\n    return {\n      error: \"INVALID_USERNAME\",\n      reason: \"Username must be at least 3 characters long\",\n      i18nKeyReason: \"accountsUI.error.usernameMinLength\"\n    };\n  },\n\n  /**\n   * @name accounts/validation/email\n   * @method\n   * @memberof Methods/Accounts/Validation\n   * @summary Validates both required and optional email addresses.\n   * @example LoginFormValidation.email(emailAddress)\n   * @example Meteor.call(\"accounts/validation/email\", newEmail, false, callbackFunction())\n   * @param  {String} email Email address to validate\n   * @param  {Boolean} optional If set to true, validation will pass if email is blank\n   * @return {Boolean|Object} Returns true if valid; Returns an error object if invalid\n   */\n  email(email, optional) {\n    check(email, Match.OptionalOrNull(String));\n    check(optional, Match.OptionalOrNull(Boolean));\n    const processedEmail = email.trim(); // Valid\n\n    if (optional === true && processedEmail.length === 0) {\n      return true;\n    } else if (processedEmail.indexOf(\"@\") !== -1) {\n      return true;\n    } // Invalid\n\n\n    return {\n      error: \"INVALID_EMAIL\",\n      reason: \"Email address is invalid\",\n      i18nKeyReason: \"accountsUI.error.invalidEmail\"\n    };\n  },\n\n  /**\n   * @name accounts/validation/password\n   * @method\n   * @memberof Methods/Accounts/Validation\n   * @summary Passwords may be validated 2 ways.\n   * 1. \"exists\" `(options.validationLevel = \"exists\")` - Password must not be blank.\n   * Thats is the only rule. Used to validate a sign in.\n   * 2. undefined `(options.validationLevel = undefined)` - Password must meet the lenght and other criteria to validate.\n   * Used for validating a new sign up.\n   * @example LoginFormValidation.password(pword, { validationLevel: \"exists\" })\n   * @param  {String} password Password to validate\n   * @param  {Object} options Options to apply to the password validator\n   * @param  {String} options.validationLevel \"exists\" | undefined (default)\n   * @return {Boolean|Object} true if valid | Error object otherwise: {error: String, reason: String}\n   */\n  password(password, options) {\n    check(password, Match.OptionalOrNull(String));\n    check(options, Match.OptionalOrNull(Object));\n    const passwordOptions = options || {};\n    const errors = []; // Only check if a password has been entered at all.\n    // This is usefull for the login forms\n\n    if (passwordOptions.validationLevel === \"exists\") {\n      if (password && password.length > 0) {\n        return true;\n      }\n\n      errors.push({\n        error: \"INVALID_PASSWORD\",\n        reason: \"Password is required\",\n        i18nKeyReason: \"accountsUI.error.passwordRequired\"\n      });\n    } else if (password.length < 6) {\n      // Validate the password on some rules\n      // This is useful for cases where a password needs to be created or updated.\n      errors.push({\n        error: \"INVALID_PASSWORD\",\n        reason: \"Password must be at least 6 characters long.\",\n        i18nKeyReason: \"accountsUI.error.passwordMustBeAtLeast6CharactersLong\"\n      });\n    }\n\n    if (errors.length) {\n      return errors;\n    } // Otherwise the password is valid\n\n\n    return true;\n  }\n\n}; // Export object globally\n\nconst LoginFormValidation = validationMethods;\n// Register validation methods as meteor methods\nMeteor.methods({\n  \"accounts/validation/username\": validationMethods.username,\n  \"accounts/validation/email\": validationMethods.email,\n  \"accounts/validation/password\": validationMethods.password\n});","map":{"version":3,"sources":["lib/api/account-validation.js"],"names":["module","export","LoginFormValidation","Meteor","watch","require","v","check","Match","validationMethods","username","OptionalOrNull","String","length","error","reason","i18nKeyReason","email","optional","Boolean","processedEmail","trim","indexOf","password","options","Object","passwordOptions","errors","validationLevel","push","methods"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,uBAAoB,MAAIA;AAAzB,CAAd;AAA6D,IAAIC,MAAJ;AAAWH,OAAOI,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACF,SAAOG,CAAP,EAAS;AAACH,aAAOG,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIC,KAAJ,EAAUC,KAAV;AAAgBR,OAAOI,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACE,QAAMD,CAAN,EAAQ;AAACC,YAAMD,CAAN;AAAQ,GAAlB;;AAAmBE,QAAMF,CAAN,EAAQ;AAACE,YAAMF,CAAN;AAAQ;;AAApC,CAArC,EAA2E,CAA3E;;AAGvJ;;;;;;;;AASA,MAAMG,oBAAoB;AACxB;;;;;;;;AAQAC,WAASA,QAAT,EAAmB;AACjBH,UAAMG,QAAN,EAAgBF,MAAMG,cAAN,CAAqBC,MAArB,CAAhB,EADiB,CAGjB;;AACA,QAAIF,SAASG,MAAT,IAAmB,CAAvB,EAA0B;AACxB,aAAO,IAAP;AACD,KANgB,CAQjB;;;AACA,WAAO;AACLC,aAAO,kBADF;AAELC,cAAQ,6CAFH;AAGLC,qBAAe;AAHV,KAAP;AAKD,GAvBuB;;AAyBxB;;;;;;;;;;;AAWAC,QAAMA,KAAN,EAAaC,QAAb,EAAuB;AACrBX,UAAMU,KAAN,EAAaT,MAAMG,cAAN,CAAqBC,MAArB,CAAb;AACAL,UAAMW,QAAN,EAAgBV,MAAMG,cAAN,CAAqBQ,OAArB,CAAhB;AAEA,UAAMC,iBAAiBH,MAAMI,IAAN,EAAvB,CAJqB,CAMrB;;AACA,QAAIH,aAAa,IAAb,IAAqBE,eAAeP,MAAf,KAA0B,CAAnD,EAAsD;AACpD,aAAO,IAAP;AACD,KAFD,MAEO,IAAIO,eAAeE,OAAf,CAAuB,GAAvB,MAAgC,CAAC,CAArC,EAAwC;AAC7C,aAAO,IAAP;AACD,KAXoB,CAarB;;;AACA,WAAO;AACLR,aAAO,eADF;AAELC,cAAQ,0BAFH;AAGLC,qBAAe;AAHV,KAAP;AAKD,GAvDuB;;AAyDxB;;;;;;;;;;;;;;;AAeAO,WAASA,QAAT,EAAmBC,OAAnB,EAA4B;AAC1BjB,UAAMgB,QAAN,EAAgBf,MAAMG,cAAN,CAAqBC,MAArB,CAAhB;AACAL,UAAMiB,OAAN,EAAehB,MAAMG,cAAN,CAAqBc,MAArB,CAAf;AAEA,UAAMC,kBAAkBF,WAAW,EAAnC;AACA,UAAMG,SAAS,EAAf,CAL0B,CAO1B;AACA;;AACA,QAAID,gBAAgBE,eAAhB,KAAoC,QAAxC,EAAkD;AAChD,UAAIL,YAAYA,SAASV,MAAT,GAAkB,CAAlC,EAAqC;AACnC,eAAO,IAAP;AACD;;AAEDc,aAAOE,IAAP,CAAY;AACVf,eAAO,kBADG;AAEVC,gBAAQ,sBAFE;AAGVC,uBAAe;AAHL,OAAZ;AAKD,KAVD,MAUO,IAAIO,SAASV,MAAT,GAAkB,CAAtB,EAAyB;AAC9B;AACA;AACAc,aAAOE,IAAP,CAAY;AACVf,eAAO,kBADG;AAEVC,gBAAQ,8CAFE;AAGVC,uBAAe;AAHL,OAAZ;AAKD;;AAED,QAAIW,OAAOd,MAAX,EAAmB;AACjB,aAAOc,MAAP;AACD,KA/ByB,CAiC1B;;;AACA,WAAO,IAAP;AACD;;AA3GuB,CAA1B,C,CA8GA;;AACO,MAAMzB,sBAAsBO,iBAA5B;AAEP;AACAN,OAAO2B,OAAP,CAAe;AACb,kCAAgCrB,kBAAkBC,QADrC;AAEb,+BAA6BD,kBAAkBQ,KAFlC;AAGb,kCAAgCR,kBAAkBc;AAHrC,CAAf","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { check, Match } from \"meteor/check\";\n\n/**\n * @file Methods for Account Validation\n * Methods for validating account username, email and password. Methods are exported globally in the `LoginFormValidation` object and they are also registered as Meteor methods. Call the methods using\n * `Meteor.call()` or `LoginFormValidation.method`.\n * @example LoginFormValidation.password(password, { validationLevel: \"exists\" })\n * @example Meteor.call(\"accounts/validation/email\", newEmail, false, (result, error))\n * @namespace Methods/Accounts/Validation\n */\n\nconst validationMethods = {\n  /**\n   * @name accounts/validation/username\n   * @method\n   * @memberof Methods/Accounts/Validation\n   * @summary Determines if a username meets the minimum requirement of 3 characters\n   * @param  {String} username Username to validate\n   * @return {Boolean|Object} true if valid, error object if invalid\n   */\n  username(username) {\n    check(username, Match.OptionalOrNull(String));\n\n    // Valid\n    if (username.length >= 3) {\n      return true;\n    }\n\n    // Invalid\n    return {\n      error: \"INVALID_USERNAME\",\n      reason: \"Username must be at least 3 characters long\",\n      i18nKeyReason: \"accountsUI.error.usernameMinLength\"\n    };\n  },\n\n  /**\n   * @name accounts/validation/email\n   * @method\n   * @memberof Methods/Accounts/Validation\n   * @summary Validates both required and optional email addresses.\n   * @example LoginFormValidation.email(emailAddress)\n   * @example Meteor.call(\"accounts/validation/email\", newEmail, false, callbackFunction())\n   * @param  {String} email Email address to validate\n   * @param  {Boolean} optional If set to true, validation will pass if email is blank\n   * @return {Boolean|Object} Returns true if valid; Returns an error object if invalid\n   */\n  email(email, optional) {\n    check(email, Match.OptionalOrNull(String));\n    check(optional, Match.OptionalOrNull(Boolean));\n\n    const processedEmail = email.trim();\n\n    // Valid\n    if (optional === true && processedEmail.length === 0) {\n      return true;\n    } else if (processedEmail.indexOf(\"@\") !== -1) {\n      return true;\n    }\n\n    // Invalid\n    return {\n      error: \"INVALID_EMAIL\",\n      reason: \"Email address is invalid\",\n      i18nKeyReason: \"accountsUI.error.invalidEmail\"\n    };\n  },\n\n  /**\n   * @name accounts/validation/password\n   * @method\n   * @memberof Methods/Accounts/Validation\n   * @summary Passwords may be validated 2 ways.\n   * 1. \"exists\" `(options.validationLevel = \"exists\")` - Password must not be blank.\n   * Thats is the only rule. Used to validate a sign in.\n   * 2. undefined `(options.validationLevel = undefined)` - Password must meet the lenght and other criteria to validate.\n   * Used for validating a new sign up.\n   * @example LoginFormValidation.password(pword, { validationLevel: \"exists\" })\n   * @param  {String} password Password to validate\n   * @param  {Object} options Options to apply to the password validator\n   * @param  {String} options.validationLevel \"exists\" | undefined (default)\n   * @return {Boolean|Object} true if valid | Error object otherwise: {error: String, reason: String}\n   */\n  password(password, options) {\n    check(password, Match.OptionalOrNull(String));\n    check(options, Match.OptionalOrNull(Object));\n\n    const passwordOptions = options || {};\n    const errors = [];\n\n    // Only check if a password has been entered at all.\n    // This is usefull for the login forms\n    if (passwordOptions.validationLevel === \"exists\") {\n      if (password && password.length > 0) {\n        return true;\n      }\n\n      errors.push({\n        error: \"INVALID_PASSWORD\",\n        reason: \"Password is required\",\n        i18nKeyReason: \"accountsUI.error.passwordRequired\"\n      });\n    } else if (password.length < 6) {\n      // Validate the password on some rules\n      // This is useful for cases where a password needs to be created or updated.\n      errors.push({\n        error: \"INVALID_PASSWORD\",\n        reason: \"Password must be at least 6 characters long.\",\n        i18nKeyReason: \"accountsUI.error.passwordMustBeAtLeast6CharactersLong\"\n      });\n    }\n\n    if (errors.length) {\n      return errors;\n    }\n\n    // Otherwise the password is valid\n    return true;\n  }\n};\n\n// Export object globally\nexport const LoginFormValidation = validationMethods;\n\n// Register validation methods as meteor methods\nMeteor.methods({\n  \"accounts/validation/username\": validationMethods.username,\n  \"accounts/validation/email\": validationMethods.email,\n  \"accounts/validation/password\": validationMethods.password\n});\n"]},"sourceType":"script","hash":"2a9697531c55b44e08bc442152d7e083a019c6b3"}
