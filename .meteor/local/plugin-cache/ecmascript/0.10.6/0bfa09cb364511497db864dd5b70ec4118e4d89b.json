{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"lib/collections/schemas/address.js","filename":"lib/collections/schemas/address.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"lib/collections/schemas/address.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"lib/collections/schemas/address.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"lib/collections/schemas/address.js"}},"code":"module.export({\n  Address: () => Address\n});\nlet SimpleSchema;\nmodule.watch(require(\"simpl-schema\"), {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet Random;\nmodule.watch(require(\"meteor/random\"), {\n  Random(v) {\n    Random = v;\n  }\n\n}, 2);\nlet Tracker;\nmodule.watch(require(\"meteor/tracker\"), {\n  Tracker(v) {\n    Tracker = v;\n  }\n\n}, 3);\nlet registerSchema;\nmodule.watch(require(\"@reactioncommerce/schemas\"), {\n  registerSchema(v) {\n    registerSchema = v;\n  }\n\n}, 4);\nlet Metafield;\nmodule.watch(require(\"./metafield\"), {\n  Metafield(v) {\n    Metafield = v;\n  }\n\n}, 5);\nconst withoutCodeCountries = [\"AO\", \"AG\", \"AW\", \"BS\", \"BZ\", \"BJ\", \"BW\", \"BF\", \"BI\", \"CM\", \"CF\", \"KM\", \"CG\", \"CD\", \"CK\", \"CI\", \"DJ\", \"DM\", \"GQ\", \"ER\", \"FJ\", \"TF\", \"GM\", \"GH\", \"GD\", \"GN\", \"GY\", \"HK\", \"IE\", \"JM\", \"KE\", \"KI\", \"MO\", \"MW\", \"ML\", \"MR\", \"MU\", \"MS\", \"NR\", \"AN\", \"NU\", \"KP\", \"PA\", \"QA\", \"RW\", \"KN\", \"LC\", \"ST\", \"SA\", \"SC\", \"SL\", \"SB\", \"SO\", \"SR\", \"SY\", \"TZ\", \"TL\", \"TK\", \"TO\", \"TT\", \"TV\", \"UG\", \"AE\", \"VU\", \"YE\", \"ZW\"];\n/**\n * @name Address\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} _id\n * @property {String} fullName required\n * @property {String} address1 required\n * @property {String} address2\n * @property {String} city required\n * @property {String} company\n * @property {String} phone required\n * @property {String} region required, State/Province/Region\n * @property {String} postal required\n * @property {String} country required\n * @property {Boolean} isCommercial required\n * @property {Boolean} isBillingDefault required\n * @property {Boolean} isShippingDefault required\n * @property {Boolean} failedValidation\n * @property {Metafield[]} metafields\n */\n\nconst Address = new SimpleSchema({\n  \"_id\": {\n    type: String,\n    defaultValue: Random.id(),\n    optional: true\n  },\n  \"fullName\": {\n    type: String,\n    label: \"Full name\"\n  },\n  \"address1\": {\n    label: \"Address 1\",\n    type: String\n  },\n  \"address2\": {\n    label: \"Address 2\",\n    type: String,\n    optional: true\n  },\n  \"city\": {\n    type: String,\n    label: \"City\"\n  },\n  \"company\": {\n    type: String,\n    label: \"Company\",\n    optional: true\n  },\n  \"phone\": {\n    type: String,\n    label: \"Phone\"\n  },\n  \"region\": {\n    label: \"State/Province/Region\",\n    type: String\n  },\n  \"postal\": {\n    label: \"ZIP/Postal Code\",\n    type: String,\n    optional: true,\n\n    custom() {\n      const country = this.field(\"country\");\n\n      if (country && country.value) {\n        if (!withoutCodeCountries.includes(country.value) && !this.value) {\n          return \"required\";\n        }\n      }\n\n      return true;\n    }\n\n  },\n  \"country\": {\n    type: String,\n    label: \"Country\"\n  },\n  \"isCommercial\": {\n    label: \"This is a commercial address.\",\n    type: Boolean\n  },\n  \"isBillingDefault\": {\n    label: \"Make this your default billing address?\",\n    type: Boolean\n  },\n  \"isShippingDefault\": {\n    label: \"Make this your default shipping address?\",\n    type: Boolean\n  },\n  \"failedValidation\": {\n    label: \"Failed validation\",\n    type: Boolean,\n    defaultValue: false,\n    optional: true\n  },\n  \"metafields\": {\n    type: Array,\n    optional: true\n  },\n  \"metafields.$\": {\n    type: Metafield\n  }\n}, {\n  check,\n  tracker: Tracker\n});\nregisterSchema(\"Address\", Address);","map":{"version":3,"sources":["lib/collections/schemas/address.js"],"names":["module","export","Address","SimpleSchema","watch","require","default","v","check","Random","Tracker","registerSchema","Metafield","withoutCodeCountries","type","String","defaultValue","id","optional","label","custom","country","field","value","includes","Boolean","Array","tracker"],"mappings":"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","sourcesContent":["import SimpleSchema from \"simpl-schema\";\nimport { check } from \"meteor/check\";\nimport { Random } from \"meteor/random\";\nimport { Tracker } from \"meteor/tracker\";\nimport { registerSchema } from \"@reactioncommerce/schemas\";\nimport { Metafield } from \"./metafield\";\n\nconst withoutCodeCountries = [\"AO\", \"AG\", \"AW\", \"BS\", \"BZ\", \"BJ\", \"BW\",\n  \"BF\", \"BI\", \"CM\", \"CF\", \"KM\", \"CG\", \"CD\", \"CK\", \"CI\", \"DJ\",\n  \"DM\", \"GQ\", \"ER\", \"FJ\", \"TF\", \"GM\", \"GH\", \"GD\", \"GN\", \"GY\",\n  \"HK\", \"IE\", \"JM\", \"KE\", \"KI\", \"MO\", \"MW\", \"ML\", \"MR\", \"MU\",\n  \"MS\", \"NR\", \"AN\", \"NU\", \"KP\", \"PA\", \"QA\", \"RW\", \"KN\", \"LC\",\n  \"ST\", \"SA\", \"SC\", \"SL\", \"SB\", \"SO\", \"SR\", \"SY\", \"TZ\", \"TL\",\n  \"TK\", \"TO\", \"TT\", \"TV\", \"UG\", \"AE\", \"VU\", \"YE\", \"ZW\"];\n\n/**\n * @name Address\n * @memberof schemas\n * @type {SimpleSchema}\n * @property {String} _id\n * @property {String} fullName required\n * @property {String} address1 required\n * @property {String} address2\n * @property {String} city required\n * @property {String} company\n * @property {String} phone required\n * @property {String} region required, State/Province/Region\n * @property {String} postal required\n * @property {String} country required\n * @property {Boolean} isCommercial required\n * @property {Boolean} isBillingDefault required\n * @property {Boolean} isShippingDefault required\n * @property {Boolean} failedValidation\n * @property {Metafield[]} metafields\n */\nexport const Address = new SimpleSchema({\n  \"_id\": {\n    type: String,\n    defaultValue: Random.id(),\n    optional: true\n  },\n  \"fullName\": {\n    type: String,\n    label: \"Full name\"\n  },\n  \"address1\": {\n    label: \"Address 1\",\n    type: String\n  },\n  \"address2\": {\n    label: \"Address 2\",\n    type: String,\n    optional: true\n  },\n  \"city\": {\n    type: String,\n    label: \"City\"\n  },\n  \"company\": {\n    type: String,\n    label: \"Company\",\n    optional: true\n  },\n  \"phone\": {\n    type: String,\n    label: \"Phone\"\n  },\n  \"region\": {\n    label: \"State/Province/Region\",\n    type: String\n  },\n  \"postal\": {\n    label: \"ZIP/Postal Code\",\n    type: String,\n    optional: true,\n    custom() {\n      const country = this.field(\"country\");\n      if (country && country.value) {\n        if (!withoutCodeCountries.includes(country.value) && !this.value) {\n          return \"required\";\n        }\n      }\n      return true;\n    }\n  },\n  \"country\": {\n    type: String,\n    label: \"Country\"\n  },\n  \"isCommercial\": {\n    label: \"This is a commercial address.\",\n    type: Boolean\n  },\n  \"isBillingDefault\": {\n    label: \"Make this your default billing address?\",\n    type: Boolean\n  },\n  \"isShippingDefault\": {\n    label: \"Make this your default shipping address?\",\n    type: Boolean\n  },\n  \"failedValidation\": {\n    label: \"Failed validation\",\n    type: Boolean,\n    defaultValue: false,\n    optional: true\n  },\n  \"metafields\": {\n    type: Array,\n    optional: true\n  },\n  \"metafields.$\": {\n    type: Metafield\n  }\n}, { check, tracker: Tracker });\n\nregisterSchema(\"Address\", Address);\n"]},"sourceType":"script","hash":"0bfa09cb364511497db864dd5b70ec4118e4d89b"}
