{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/core/ui/client/components/forms/form.js","filename":"imports/plugins/core/ui/client/components/forms/form.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/core/ui/client/components/forms/form.js","plugins":["dynamicImport","classProperties","jsx","jsx","flow","asyncGenerators","objectRestSpread","objectRestSpread","flow","asyncGenerators"]},"generatorOpts":{"filename":"imports/plugins/core/ui/client/components/forms/form.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/core/ui/client/components/forms/form.js"}},"code":"var _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar _update;\n\nmodule.watch(require(\"lodash/update\"), {\n  \"default\": function (v) {\n    _update = v;\n  }\n}, 0);\n\nvar _set;\n\nmodule.watch(require(\"lodash/set\"), {\n  \"default\": function (v) {\n    _set = v;\n  }\n}, 1);\n\nvar _isEqual;\n\nmodule.watch(require(\"lodash/isEqual\"), {\n  \"default\": function (v) {\n    _isEqual = v;\n  }\n}, 2);\n\nvar _get;\n\nmodule.watch(require(\"lodash/get\"), {\n  \"default\": function (v) {\n    _get = v;\n  }\n}, 3);\n\nvar _at;\n\nmodule.watch(require(\"lodash/at\"), {\n  \"default\": function (v) {\n    _at = v;\n  }\n}, 4);\nvar React, Component;\nmodule.watch(require(\"react\"), {\n  \"default\": function (v) {\n    React = v;\n  },\n  Component: function (v) {\n    Component = v;\n  }\n}, 5);\nvar PropTypes;\nmodule.watch(require(\"prop-types\"), {\n  \"default\": function (v) {\n    PropTypes = v;\n  }\n}, 6);\nvar classnames;\nmodule.watch(require(\"classnames\"), {\n  \"default\": function (v) {\n    classnames = v;\n  }\n}, 7);\nvar Components, registerComponent;\nmodule.watch(require(\"../../../../components/lib\"), {\n  Components: function (v) {\n    Components = v;\n  },\n  registerComponent: function (v) {\n    registerComponent = v;\n  }\n}, 8);\n\nvar Form =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inheritsLoose2.default)(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n\n    _this.handleChange = function (event, value, name) {\n      var newdoc = _update(_this.state.doc, name, function () {\n        return value;\n      }); // Calling user defined field specific handleChange function\n\n\n      if (_this.props.fieldsProp[name] && typeof _this.props.fieldsProp[name].handleChange === \"function\") {\n        _this.props.fieldsProp[name].handleChange(event, value, name);\n      }\n\n      _this.setState({\n        doc: newdoc\n      }, function () {\n        if (_this.props.autoSave === true) {\n          _this.handleSubmit(event);\n        } else {\n          _this.validate();\n        }\n      });\n    };\n\n    _this.handleSelectChange = function (value, name) {\n      _this.handleChange(new Event(\"onSelect\"), value, name);\n    };\n\n    _this.handleMultiSelectChange = function (value, name) {\n      _this.handleChange(new Event(\"onMultiSelect\"), value.map(function (v) {\n        return v.value;\n      }), name);\n    };\n\n    _this.handleSubmit = function () {\n      function _callee(event) {\n        var isValid;\n        return _regenerator.default.async(function () {\n          function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  event.preventDefault(); // Need to wait for this before using this.state.isValid\n                  // as validate() changes state.\n\n                  isValid = _this.validate();\n\n                  if (_this.props.onSubmit) {\n                    _this.props.onSubmit(event, {\n                      doc: _this.state.doc,\n                      isValid: isValid\n                    }, _this.props.name);\n                  }\n\n                case 3:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }\n\n          return _callee$;\n        }(), null, this);\n      }\n\n      return _callee;\n    }();\n\n    _this.state = {\n      doc: props.doc,\n      schema: _this.validationSchema(),\n      isValid: undefined\n    };\n    return _this;\n  }\n\n  var _proto = Form.prototype;\n\n  _proto.componentWillReceiveProps = function () {\n    function componentWillReceiveProps(nextProps) {\n      if (_isEqual(nextProps.doc, this.props.doc) === false) {\n        this.setState({\n          doc: nextProps.doc,\n          schema: this.validationSchema()\n        });\n      }\n    }\n\n    return componentWillReceiveProps;\n  }();\n\n  _proto.validationSchema = function () {\n    function validationSchema() {\n      var docPath = this.props.docPath;\n\n      if (docPath) {\n        var objectKeys = this.objectKeys[docPath + \".\"];\n\n        if (Array.isArray(objectKeys)) {\n          // Use the objectKeys from parent fieldset to generate\n          // actual form fields\n          var fieldNames = objectKeys.map(function (fieldName) {\n            return docPath + \".\" + fieldName;\n          });\n          return this.props.schema.pick(fieldNames).newContext();\n        }\n      }\n\n      return this.props.schema.namedContext();\n    }\n\n    return validationSchema;\n  }();\n\n  _proto.valueForField = function () {\n    function valueForField(fieldName) {\n      var picked = _at(this.state.doc, fieldName);\n\n      if (Array.isArray(picked) && picked.length) {\n        return picked[0];\n      }\n\n      return undefined;\n    }\n\n    return valueForField;\n  }();\n\n  _proto.validate = function () {\n    function validate() {\n      var docPath = this.props.docPath; // Create a smaller document in order to validate without extra fields\n\n      var docToValidate = _set({}, docPath, _at(this.state.doc, this.props.docPath)[0]); // Clean any fields not in schame to avoid needless validation errors\n\n\n      var cleanedObject = this.state.schema._simpleSchema.clean(docToValidate);\n\n      var isValid = this.state.schema.validate(cleanedObject); // Finally validate the document\n\n      this.setState({\n        isValid: isValid\n      });\n      return {\n        isValid: isValid\n      };\n    }\n\n    return validate;\n  }();\n\n  _proto.isFieldHidden = function () {\n    function isFieldHidden(fieldName) {\n      if (Array.isArray(this.props.hideFields) && this.props.hideFields.indexOf(fieldName) >= 0) {\n        return true;\n      }\n\n      return false;\n    }\n\n    return isFieldHidden;\n  }();\n\n  _proto.renderFormField = function () {\n    function renderFormField(field) {\n      var _this2 = this;\n\n      var sharedProps = {\n        i18nKeyLabel: \"admin.\" + field.name,\n        key: field.name,\n        label: field.label,\n        name: field.name\n      };\n      var fieldElement;\n      var helpText; // Checking for user defined render style else using what is best according to the type.\n\n      switch (field.renderComponent || field.type) {\n        case \"boolean\":\n          fieldElement = React.createElement(Components.Switch, (0, _extends2.default)({}, sharedProps, {\n            onChange: this.handleChange,\n            checked: this.valueForField(field.name)\n          }));\n          break;\n\n        case \"string\":\n          fieldElement = React.createElement(Components.TextField, (0, _extends2.default)({}, sharedProps, {\n            onChange: this.handleChange,\n            value: this.valueForField(field.name),\n            multiline: field.multiline,\n            maxRows: field.maxRows,\n            disabled: field.disabled,\n            type: field.inputType\n          }));\n          break;\n\n        case \"select\":\n          fieldElement = React.createElement(Components.Select, (0, _extends2.default)({}, sharedProps, {\n            onChange: this.handleSelectChange,\n            options: field.options,\n            value: this.valueForField(field.name)\n          }));\n          break;\n\n        case \"multiselect\":\n          fieldElement = React.createElement(Components.MultiSelect, (0, _extends2.default)({}, sharedProps, {\n            multi: true,\n            onChange: this.handleMultiSelectChange,\n            options: field.options,\n            value: this.valueForField(field.name),\n            simpleValue: false\n          }));\n          break;\n\n        default:\n          return null;\n      }\n\n      var fieldHasError = false;\n\n      if (this.state.isValid === false) {\n        this.state.schema.validationErrors().filter(function (v) {\n          return v.name === field.name;\n        }).forEach(function (validationError) {\n          var message = _this2.state.schema.keyErrorMessage(validationError.name);\n\n          fieldHasError = true;\n          helpText = React.createElement(\"div\", {\n            className: \"help-block\"\n          }, message);\n        });\n      }\n\n      var formGroupClassName = classnames({\n        \"rui\": true,\n        \"form-group\": true,\n        \"has-error\": fieldHasError\n      });\n      return React.createElement(\"div\", {\n        key: sharedProps.key + \"-group\",\n        className: formGroupClassName\n      }, fieldElement, helpText);\n    }\n\n    return renderFormField;\n  }();\n\n  _proto.renderField = function () {\n    function renderField(field, additionalFieldProps) {\n      var schema = this.props.schema;\n      var fieldName = field.fieldName;\n\n      if (this.isFieldHidden(fieldName) === false) {\n        var fieldSchema = schema.getDefinition(fieldName); // Get the type from the schema, as a typeof string\n\n        var fieldType = fieldSchema.type[0].type;\n        var fieldTypeString;\n\n        if (fieldType === \"SimpleSchema.Integer\") {\n          fieldTypeString = \"number\";\n        } else {\n          // This assumes that oneOf is not used for any schema types\n          fieldTypeString = (0, _typeof2.default)(fieldType());\n        }\n\n        var fieldProps = (0, _objectSpread2.default)({}, fieldSchema, {\n          name: fieldName,\n          type: fieldTypeString\n        }, additionalFieldProps);\n        return this.renderFormField(fieldProps);\n      }\n\n      return null;\n    }\n\n    return renderField;\n  }();\n\n  _proto.renderWithSchema = function () {\n    function renderWithSchema() {\n      var _this3 = this;\n\n      var _props = this.props,\n          docPath = _props.docPath,\n          fieldsProp = _props.fieldsProp,\n          renderFromFields = _props.renderFromFields;\n\n      if (!this.props.schema) {\n        return null;\n      } // Render form with a specific docPath\n\n\n      if (!renderFromFields && docPath) {\n        return Object.keys(this.schema).map(function (key) {\n          if (!key.endsWith(docPath)) {\n            return;\n          }\n\n          var objectKeys = _this3.objectKeys[docPath + \".\"];\n\n          if (Array.isArray(objectKeys)) {\n            // Use the objectKeys from parent fieldset to generate\n            // actual form fields\n            return objectKeys.map(function (fieldName) {\n              var fullFieldName = docPath ? docPath + \".\" + fieldName : fieldName;\n              return _this3.renderField({\n                fieldName: fullFieldName\n              });\n            });\n          }\n\n          return _this3.renderField({\n            fieldName: key\n          });\n        });\n      } // Render form by only using desired fields from schema\n\n\n      if (this.props.fields) {\n        return Object.keys(this.props.fields).map(function (key) {\n          var fieldData = _this3.props.fields[key];\n          var fieldSchema = _this3.schema[key];\n          var tempObj = Object.assign({}, fieldData);\n\n          if (!fieldSchema) {\n            return;\n          } // Remove inherited type() as type is supposed to be string.\n\n\n          if (typeof tempObj.type === \"function\") {\n            delete tempObj.type;\n          }\n\n          var fieldProp = _get(fieldsProp, key, {});\n\n          return _this3.renderField({\n            fieldName: key\n          }, Object.assign(tempObj, fieldProp));\n        });\n      } // Render all fields if none of the options are set above\n\n\n      return Object.keys(this.schema).map(function (key) {\n        return (// eslint-disable-line consistent-return\n          _this3.renderField({\n            fieldName: key\n          })\n        );\n      });\n    }\n\n    return renderWithSchema;\n  }();\n\n  _proto.renderFormActions = function () {\n    function renderFormActions() {\n      if (this.props.autoSave === false) {\n        return React.createElement(Components.FormActions, null, React.createElement(Components.Button, {\n          label: \"Save Changes\",\n          i18nKeyLabel: \"app.saveChanges\",\n          bezelStyle: \"solid\",\n          primary: true,\n          type: \"submit\"\n        }));\n      }\n    }\n\n    return renderFormActions;\n  }();\n\n  _proto.render = function () {\n    function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.handleSubmit\n      }, this.renderWithSchema(), this.renderFormActions());\n    }\n\n    return render;\n  }();\n\n  (0, _createClass2.default)(Form, [{\n    key: \"objectKeys\",\n    get: function () {\n      return this.props.schema._objectKeys;\n    }\n  }, {\n    key: \"schema\",\n    get: function () {\n      return this.props.schema.mergedSchema();\n    }\n  }]);\n  return Form;\n}(Component);\n\nForm.defaultProps = {\n  autoSave: false,\n  renderFromFields: false,\n  fieldsProp: {}\n  /**\n  * @name Form propTypes\n  * @type {propTypes}\n  * @param {Object} props - React PropTypes\n  * @property {Boolean} autoSave - controls autoSave and rendering of Submit button.\n  * @property {Object} doc - the object that will have the form state.\n  * @property {String} docPath - the path in the schema which will be used for validation or to render fields.\n  * @property {Array} fields - fields to render.\n  * @property {Object} fieldsProps - map of field specific properties passed to underlying components.\n  * @property {Array} hideFields - fields to hide.\n  * @property {String} name\n  * @property {Func} onSubmit\n  * @property {Boolean} renderFromFields - this controls whether form is rendered from schema or from fields.\n  * @property {Object} schema - the schema used for validation and rendering.\n  * @return {Array} React propTypes\n  */\n\n};\nForm.propTypes = {\n  autoSave: PropTypes.bool,\n  doc: PropTypes.object,\n  docPath: PropTypes.string,\n  fields: PropTypes.object,\n  fieldsProp: PropTypes.object,\n  hideFields: PropTypes.arrayOf(PropTypes.string),\n  name: PropTypes.string,\n  onSubmit: PropTypes.func,\n  renderFromFields: PropTypes.bool,\n  schema: PropTypes.object\n};\nregisterComponent(\"Form\", Form);\nmodule.exportDefault(Form);","map":{"version":3,"sources":["imports/plugins/core/ui/client/components/forms/form.js"],"names":["_update","module","watch","require","v","_set","_isEqual","_get","_at","React","Component","PropTypes","classnames","Components","registerComponent","Form","props","handleChange","event","value","name","newdoc","state","doc","fieldsProp","setState","autoSave","handleSubmit","validate","handleSelectChange","Event","handleMultiSelectChange","map","preventDefault","isValid","onSubmit","schema","validationSchema","undefined","componentWillReceiveProps","nextProps","docPath","objectKeys","Array","isArray","fieldNames","fieldName","pick","newContext","namedContext","valueForField","picked","length","docToValidate","cleanedObject","_simpleSchema","clean","isFieldHidden","hideFields","indexOf","renderFormField","field","sharedProps","i18nKeyLabel","key","label","fieldElement","helpText","renderComponent","type","multiline","maxRows","disabled","inputType","options","fieldHasError","validationErrors","filter","forEach","validationError","message","keyErrorMessage","formGroupClassName","renderField","additionalFieldProps","fieldSchema","getDefinition","fieldType","fieldTypeString","fieldProps","renderWithSchema","renderFromFields","Object","keys","endsWith","fullFieldName","fields","fieldData","tempObj","assign","fieldProp","renderFormActions","render","_objectKeys","mergedSchema","defaultProps","propTypes","bool","object","string","arrayOf","func","exportDefault"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { at, get, isEqual, set, update } from \"lodash\";\nimport classnames from \"classnames\";\nimport { Components, registerComponent } from \"@reactioncommerce/reaction-components\";\n\nclass Form extends Component {\n  static defaultProps = {\n    autoSave: false,\n    renderFromFields: false,\n    fieldsProp: {}\n  }\n\n  /**\n  * @name Form propTypes\n  * @type {propTypes}\n  * @param {Object} props - React PropTypes\n  * @property {Boolean} autoSave - controls autoSave and rendering of Submit button.\n  * @property {Object} doc - the object that will have the form state.\n  * @property {String} docPath - the path in the schema which will be used for validation or to render fields.\n  * @property {Array} fields - fields to render.\n  * @property {Object} fieldsProps - map of field specific properties passed to underlying components.\n  * @property {Array} hideFields - fields to hide.\n  * @property {String} name\n  * @property {Func} onSubmit\n  * @property {Boolean} renderFromFields - this controls whether form is rendered from schema or from fields.\n  * @property {Object} schema - the schema used for validation and rendering.\n  * @return {Array} React propTypes\n  */\n  static propTypes = {\n    autoSave: PropTypes.bool,\n    doc: PropTypes.object,\n    docPath: PropTypes.string,\n    fields: PropTypes.object,\n    fieldsProp: PropTypes.object,\n    hideFields: PropTypes.arrayOf(PropTypes.string),\n    name: PropTypes.string,\n    onSubmit: PropTypes.func,\n    renderFromFields: PropTypes.bool,\n    schema: PropTypes.object\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      doc: props.doc,\n      schema: this.validationSchema(),\n      isValid: undefined\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (isEqual(nextProps.doc, this.props.doc) === false) {\n      this.setState({\n        doc: nextProps.doc,\n        schema: this.validationSchema()\n      });\n    }\n  }\n\n\n  validationSchema() {\n    const { docPath } = this.props;\n\n    if (docPath) {\n      const objectKeys = this.objectKeys[`${docPath}.`];\n      if (Array.isArray(objectKeys)) {\n        // Use the objectKeys from parent fieldset to generate\n        // actual form fields\n        const fieldNames = objectKeys.map((fieldName) => `${docPath}.${fieldName}`);\n\n        return this.props.schema.pick(fieldNames).newContext();\n      }\n    }\n\n    return this.props.schema.namedContext();\n  }\n\n  get objectKeys() {\n    return this.props.schema._objectKeys;\n  }\n\n  get schema() {\n    return this.props.schema.mergedSchema();\n  }\n\n  valueForField(fieldName) {\n    const picked = at(this.state.doc, fieldName);\n\n    if (Array.isArray(picked) && picked.length) {\n      return picked[0];\n    }\n\n    return undefined;\n  }\n\n  validate() {\n    const { docPath } = this.props;\n\n    // Create a smaller document in order to validate without extra fields\n    const docToValidate = set(\n      {},\n      docPath,\n      at(this.state.doc, this.props.docPath)[0]\n    );\n\n    // Clean any fields not in schame to avoid needless validation errors\n    const cleanedObject = this.state.schema._simpleSchema.clean(docToValidate);\n    const isValid = this.state.schema.validate(cleanedObject);\n    // Finally validate the document\n    this.setState({ isValid });\n\n    return { isValid };\n  }\n\n  isFieldHidden(fieldName) {\n    if (Array.isArray(this.props.hideFields) && this.props.hideFields.indexOf(fieldName) >= 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  handleChange = (event, value, name) => {\n    const newdoc = update(this.state.doc, name, () => value);\n    // Calling user defined field specific handleChange function\n    if (this.props.fieldsProp[name] && typeof this.props.fieldsProp[name].handleChange === \"function\") {\n      this.props.fieldsProp[name].handleChange(event, value, name);\n    }\n\n    this.setState({\n      doc: newdoc\n    }, () => {\n      if (this.props.autoSave === true) {\n        this.handleSubmit(event);\n      } else {\n        this.validate();\n      }\n    });\n  }\n\n  handleSelectChange = (value, name) => {\n    this.handleChange(new Event(\"onSelect\"), value, name);\n  }\n\n  handleMultiSelectChange = (value, name) => {\n    this.handleChange(new Event(\"onMultiSelect\"), value.map((v) => v.value), name);\n  }\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n\n    // Need to wait for this before using this.state.isValid\n    // as validate() changes state.\n    const isValid = this.validate();\n\n    if (this.props.onSubmit) {\n      this.props.onSubmit(event, {\n        doc: this.state.doc,\n        isValid\n      }, this.props.name);\n    }\n  }\n\n  renderFormField(field) {\n    const sharedProps = {\n      i18nKeyLabel: `admin.${field.name}`,\n      key: field.name,\n      label: field.label,\n      name: field.name\n    };\n\n    let fieldElement;\n    let helpText;\n    // Checking for user defined render style else using what is best according to the type.\n    switch (field.renderComponent || field.type) {\n      case \"boolean\":\n        fieldElement = (\n          <Components.Switch\n            {...sharedProps}\n            onChange={this.handleChange}\n            checked={this.valueForField(field.name)}\n          />\n        );\n        break;\n      case \"string\":\n        fieldElement = (\n          <Components.TextField\n            {...sharedProps}\n            onChange={this.handleChange}\n            value={this.valueForField(field.name)}\n            multiline={field.multiline}\n            maxRows={field.maxRows}\n            disabled={field.disabled}\n            type={field.inputType}\n          />\n        );\n        break;\n      case \"select\":\n        fieldElement = (\n          <Components.Select\n            {...sharedProps}\n            onChange={this.handleSelectChange}\n            options={field.options}\n            value={this.valueForField(field.name)}\n          />\n        );\n        break;\n      case \"multiselect\":\n        fieldElement = (\n          <Components.MultiSelect\n            {...sharedProps}\n            multi={true}\n            onChange={this.handleMultiSelectChange}\n            options={field.options}\n            value={this.valueForField(field.name)}\n            simpleValue={false}\n          />\n        );\n        break;\n      default:\n        return null;\n    }\n\n    let fieldHasError = false;\n\n    if (this.state.isValid === false) {\n      this.state.schema.validationErrors()\n        .filter((v) => v.name === field.name)\n        .forEach((validationError) => {\n          const message = this.state.schema.keyErrorMessage(validationError.name);\n          fieldHasError = true;\n\n          helpText = (\n            <div className=\"help-block\">\n              {message}\n            </div>\n          );\n        });\n    }\n\n    const formGroupClassName = classnames({\n      \"rui\": true,\n      \"form-group\": true,\n      \"has-error\": fieldHasError\n    });\n\n    return (\n      <div key={`${sharedProps.key}-group`} className={formGroupClassName}>\n        {fieldElement}\n        {helpText}\n      </div>\n    );\n  }\n\n  renderField(field, additionalFieldProps) {\n    const { schema } = this.props;\n    const { fieldName } = field;\n\n    if (this.isFieldHidden(fieldName) === false) {\n      const fieldSchema = schema.getDefinition(fieldName);\n\n      // Get the type from the schema, as a typeof string\n      const fieldType = fieldSchema.type[0].type;\n      let fieldTypeString;\n      if (fieldType === \"SimpleSchema.Integer\") {\n        fieldTypeString = \"number\";\n      } else {\n        // This assumes that oneOf is not used for any schema types\n        fieldTypeString = typeof fieldType();\n      }\n\n      const fieldProps = {\n        ...fieldSchema,\n        name: fieldName,\n        type: fieldTypeString,\n        ...additionalFieldProps\n      };\n\n      return this.renderFormField(fieldProps);\n    }\n\n    return null;\n  }\n\n  renderWithSchema() {\n    const { docPath, fieldsProp, renderFromFields } = this.props;\n\n    if (!this.props.schema) {\n      return null;\n    }\n    // Render form with a specific docPath\n    if (!renderFromFields && docPath) {\n      return Object.keys(this.schema).map((key) => {\n        if (!key.endsWith(docPath)) {\n          return;\n        }\n        const objectKeys = this.objectKeys[`${docPath}.`];\n        if (Array.isArray(objectKeys)) {\n          // Use the objectKeys from parent fieldset to generate\n          // actual form fields\n          return objectKeys.map((fieldName) => {\n            const fullFieldName = docPath ? `${docPath}.${fieldName}` : fieldName;\n            return this.renderField({ fieldName: fullFieldName });\n          });\n        }\n        return this.renderField({ fieldName: key });\n      });\n    }\n\n    // Render form by only using desired fields from schema\n    if (this.props.fields) {\n      return Object.keys(this.props.fields).map((key) => {\n        const fieldData = this.props.fields[key];\n        const fieldSchema = this.schema[key];\n        const tempObj = Object.assign({}, fieldData);\n        if (!fieldSchema) {\n          return;\n        }\n        // Remove inherited type() as type is supposed to be string.\n        if (typeof tempObj.type === \"function\") {\n          delete tempObj.type;\n        }\n        const fieldProp = get(fieldsProp, key, {});\n        return this.renderField({ fieldName: key }, Object.assign(tempObj, fieldProp));\n      });\n    }\n\n    // Render all fields if none of the options are set above\n    return Object.keys(this.schema).map((key) => // eslint-disable-line consistent-return\n      this.renderField({ fieldName: key }));\n  }\n\n  renderFormActions() {\n    if (this.props.autoSave === false) {\n      return (\n        <Components.FormActions>\n          <Components.Button\n            label={\"Save Changes\"}\n            i18nKeyLabel={\"app.saveChanges\"}\n            bezelStyle={\"solid\"}\n            primary={true}\n            type=\"submit\"\n          />\n        </Components.FormActions>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        {this.renderWithSchema()}\n        {this.renderFormActions()}\n      </form>\n    );\n  }\n}\n\nregisterComponent(\"Form\", Form);\n\nexport default Form;\n"]},"sourceType":"script","hash":"49acc58d5a9f9946507ebd7b60c605dd8d476c50"}
