{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/included/taxes-avalara/server/hooks/hooks.js","filename":"imports/plugins/included/taxes-avalara/server/hooks/hooks.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/included/taxes-avalara/server/hooks/hooks.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/included/taxes-avalara/server/hooks/hooks.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/included/taxes-avalara/server/hooks/hooks.js"}},"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Logger, MethodHooks;\nmodule.watch(require(\"../../../../../../server/api\"), {\n  Logger(v) {\n    Logger = v;\n  },\n\n  MethodHooks(v) {\n    MethodHooks = v;\n  }\n\n}, 1);\nlet Cart, Orders;\nmodule.watch(require(\"../../../../../../lib/collections\"), {\n  Cart(v) {\n    Cart = v;\n  },\n\n  Orders(v) {\n    Orders = v;\n  }\n\n}, 2);\nlet taxCalc;\nmodule.watch(require(\"../methods/taxCalc\"), {\n  default(v) {\n    taxCalc = v;\n  }\n\n}, 3);\n\nfunction linesToTaxes(lines) {\n  const taxes = lines.map(line => ({\n    lineNumber: line.lineNumber,\n    discountAmount: line.discountAmount,\n    taxable: line.isItemTaxable,\n    tax: line.tax,\n    taxableAmount: line.taxableAmount,\n    taxCode: line.taxCode,\n    details: line.details\n  }));\n  return taxes;\n}\n/**\n * @method markCartTax\n * @summary Calls the method accounts/markTaxCalculationFailed\n * through meteor.\n * @param {Boolean} value - the value to be set\n */\n\n\nfunction markCartTax(value = true) {\n  Meteor.call(\"accounts/markTaxCalculationFailed\", value, error => {\n    if (error) {\n      return Logger.error(error, \"Unable to mark the cart\");\n    }\n  });\n}\n\nMethodHooks.after(\"taxes/calculate\", options => {\n  const cartId = options.arguments[0];\n  const cartToCalc = Cart.findOne(cartId);\n\n  if (cartToCalc.bypassAddressValidation) {\n    // User bypassed address validation so we can't calc taxes so don't even try\n    return options.result;\n  }\n\n  const pkg = taxCalc.getPackageData();\n  Logger.debug(\"Avalara triggered on taxes/calculate for cartId:\", cartId);\n\n  if (pkg && pkg.settings.avalara.enabled && pkg.settings.avalara.performTaxCalculation) {\n    taxCalc.estimateCart(cartToCalc, result => {\n      // we don't use totalTax, that just tells us we have a valid tax calculation\n      if (result && !result.error && typeof result.totalTax === \"number\" && result.lines) {\n        const taxes = linesToTaxes(result.lines);\n        const taxAmount = taxes.reduce((totalTaxes, tax) => totalTaxes + tax.tax, 0);\n        const taxRate = taxAmount / taxCalc.calcTaxable(cartToCalc);\n        Meteor.call(\"taxes/setRate\", cartId, taxRate, taxes);\n        markCartTax(false); // for bad auth, timeout, or misconfiguration there's nothing we can do so keep moving\n      } else if ([503, 400, 401].includes(result.error.errorCode)) {\n        Logger.error(\"Timeout, Authentification, or Misconfiguration error: Not trying to estimate cart\");\n        markCartTax(true);\n      } else if (result.error.errorCode === 300) {\n        Logger.error(\"Cannot validate address so we cannot calculate tax, skipping\");\n        markCartTax(true);\n      } else {\n        Logger.error(\"Unknown error\", result.error.errorCode);\n        markCartTax(true);\n      }\n    });\n  }\n\n  return options;\n});\nMethodHooks.after(\"cart/copyCartToOrder\", options => {\n  const pkg = taxCalc.getPackageData();\n\n  if (pkg && pkg.settings.avalara.enabled && pkg.settings.avalara.performTaxCalculation) {\n    const cartId = options.arguments[0];\n    const order = Orders.findOne({\n      cartId\n    });\n    taxCalc.recordOrder(order, result => {\n      if (result) {\n        Logger.info(`Order ${order._id} recorded with Avalara`);\n      }\n    });\n  }\n\n  return options.result;\n});\nMethodHooks.after(\"orders/refunds/create\", options => {\n  const pkg = taxCalc.getPackageData();\n\n  if (pkg && pkg.settings.avalara.enabled && pkg.settings.avalara.performTaxCalculation) {\n    const orderId = options.arguments[0];\n    const order = Orders.findOne(orderId);\n    const refundAmount = options.arguments[2];\n    taxCalc.reportRefund(order, refundAmount, result => {\n      if (result) {\n        Logger.info(`Refund for order ${order._id} recorded with Avalara`);\n      }\n    });\n  }\n\n  return options;\n});","map":{"version":3,"sources":["imports/plugins/included/taxes-avalara/server/hooks/hooks.js"],"names":["Meteor","module","watch","require","v","Logger","MethodHooks","Cart","Orders","taxCalc","default","linesToTaxes","lines","taxes","map","line","lineNumber","discountAmount","taxable","isItemTaxable","tax","taxableAmount","taxCode","details","markCartTax","value","call","error","after","options","cartId","arguments","cartToCalc","findOne","bypassAddressValidation","result","pkg","getPackageData","debug","settings","avalara","enabled","performTaxCalculation","estimateCart","totalTax","taxAmount","reduce","totalTaxes","taxRate","calcTaxable","includes","errorCode","order","recordOrder","info","_id","orderId","refundAmount","reportRefund"],"mappings":"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","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Logger, MethodHooks } from \"/server/api\";\nimport { Cart, Orders } from \"/lib/collections\";\nimport taxCalc from \"../methods/taxCalc\";\n\nfunction linesToTaxes(lines) {\n  const taxes = lines.map((line) => ({\n    lineNumber: line.lineNumber,\n    discountAmount: line.discountAmount,\n    taxable: line.isItemTaxable,\n    tax: line.tax,\n    taxableAmount: line.taxableAmount,\n    taxCode: line.taxCode,\n    details: line.details\n  }));\n  return taxes;\n}\n/**\n * @method markCartTax\n * @summary Calls the method accounts/markTaxCalculationFailed\n * through meteor.\n * @param {Boolean} value - the value to be set\n */\nfunction markCartTax(value = true) {\n  Meteor.call(\"accounts/markTaxCalculationFailed\", value, (error) => {\n    if (error) {\n      return Logger.error(error, \"Unable to mark the cart\");\n    }\n  });\n}\n\n\nMethodHooks.after(\"taxes/calculate\", (options) => {\n  const cartId = options.arguments[0];\n  const cartToCalc = Cart.findOne(cartId);\n  if (cartToCalc.bypassAddressValidation) {\n    // User bypassed address validation so we can't calc taxes so don't even try\n    return options.result;\n  }\n  const pkg = taxCalc.getPackageData();\n\n  Logger.debug(\"Avalara triggered on taxes/calculate for cartId:\", cartId);\n\n  if (pkg && pkg.settings.avalara.enabled && pkg.settings.avalara.performTaxCalculation) {\n    taxCalc.estimateCart(cartToCalc, (result) => {\n      // we don't use totalTax, that just tells us we have a valid tax calculation\n      if (result && !result.error && typeof result.totalTax === \"number\" && result.lines) {\n        const taxes = linesToTaxes(result.lines);\n        const taxAmount = taxes.reduce((totalTaxes, tax) => totalTaxes + tax.tax, 0);\n        const taxRate = taxAmount / taxCalc.calcTaxable(cartToCalc);\n        Meteor.call(\"taxes/setRate\", cartId, taxRate, taxes);\n        markCartTax(false);\n        // for bad auth, timeout, or misconfiguration there's nothing we can do so keep moving\n      } else if ([503, 400, 401].includes(result.error.errorCode)) {\n        Logger.error(\"Timeout, Authentification, or Misconfiguration error: Not trying to estimate cart\");\n        markCartTax(true);\n      } else if (result.error.errorCode === 300) {\n        Logger.error(\"Cannot validate address so we cannot calculate tax, skipping\");\n        markCartTax(true);\n      } else {\n        Logger.error(\"Unknown error\", result.error.errorCode);\n        markCartTax(true);\n      }\n    });\n  }\n  return options;\n});\n\nMethodHooks.after(\"cart/copyCartToOrder\", (options) => {\n  const pkg = taxCalc.getPackageData();\n  if (pkg && pkg.settings.avalara.enabled && pkg.settings.avalara.performTaxCalculation) {\n    const cartId = options.arguments[0];\n    const order = Orders.findOne({ cartId });\n    taxCalc.recordOrder(order, (result) => {\n      if (result) {\n        Logger.info(`Order ${order._id} recorded with Avalara`);\n      }\n    });\n  }\n  return options.result;\n});\n\nMethodHooks.after(\"orders/refunds/create\", (options) => {\n  const pkg = taxCalc.getPackageData();\n  if (pkg && pkg.settings.avalara.enabled && pkg.settings.avalara.performTaxCalculation) {\n    const orderId = options.arguments[0];\n    const order = Orders.findOne(orderId);\n    const refundAmount = options.arguments[2];\n    taxCalc.reportRefund(order, refundAmount, (result) => {\n      if (result) {\n        Logger.info(`Refund for order ${order._id} recorded with Avalara`);\n      }\n    });\n  }\n  return options;\n});\n"]},"sourceType":"script","hash":"a56b517a7ed25b36b2ff1954aa92dca9cde3f8e8"}
