{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/core/ui-tagnav/client/containers/tagNavContainer.js","filename":"imports/plugins/core/ui-tagnav/client/containers/tagNavContainer.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/core/ui-tagnav/client/containers/tagNavContainer.js","plugins":["dynamicImport","classProperties","jsx","jsx","flow","asyncGenerators","objectRestSpread","objectRestSpread","flow","asyncGenerators"]},"generatorOpts":{"filename":"imports/plugins/core/ui-tagnav/client/containers/tagNavContainer.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/core/ui-tagnav/client/containers/tagNavContainer.js"}},"code":"var _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar _compose;\n\nmodule.watch(require(\"recompose/compose\"), {\n  \"default\": function (v) {\n    _compose = v;\n  }\n}, 0);\n\nvar _sortBy;\n\nmodule.watch(require(\"lodash/sortBy\"), {\n  \"default\": function (v) {\n    _sortBy = v;\n  }\n}, 1);\n\nvar _isEqual;\n\nmodule.watch(require(\"lodash/isEqual\"), {\n  \"default\": function (v) {\n    _isEqual = v;\n  }\n}, 2);\n\nvar _debounce;\n\nmodule.watch(require(\"lodash/debounce\"), {\n  \"default\": function (v) {\n    _debounce = v;\n  }\n}, 3);\n\nvar _find;\n\nmodule.watch(require(\"lodash/find\"), {\n  \"default\": function (v) {\n    _find = v;\n  }\n}, 4);\nvar update;\nmodule.watch(require(\"immutability-helper\"), {\n  \"default\": function (v) {\n    update = v;\n  }\n}, 5);\nvar React, Component;\nmodule.watch(require(\"react\"), {\n  \"default\": function (v) {\n    React = v;\n  },\n  Component: function (v) {\n    Component = v;\n  }\n}, 6);\nvar PropTypes;\nmodule.watch(require(\"prop-types\"), {\n  \"default\": function (v) {\n    PropTypes = v;\n  }\n}, 7);\nvar Components, registerComponent, composeWithTracker;\nmodule.watch(require(\"../../../components/lib\"), {\n  Components: function (v) {\n    Components = v;\n  },\n  registerComponent: function (v) {\n    registerComponent = v;\n  },\n  composeWithTracker: function (v) {\n    composeWithTracker = v;\n  }\n}, 8);\nvar Reaction, Router;\nmodule.watch(require(\"../../../../../../client/api\"), {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  Router: function (v) {\n    Router = v;\n  }\n}, 9);\nvar getTagIds;\nmodule.watch(require(\"../../../../../../lib/selectors/tags\"), {\n  getTagIds: function (v) {\n    getTagIds = v;\n  }\n}, 10);\nvar TagHelpers;\nmodule.watch(require(\"../helpers\"), {\n  TagHelpers: function (v) {\n    TagHelpers = v;\n  }\n}, 11);\nvar Tags;\nmodule.watch(require(\"../../../../../../lib/collections\"), {\n  Tags: function (v) {\n    Tags = v;\n  }\n}, 12);\nvar TagNav;\nmodule.watch(require(\"../components/tagNav\"), {\n  \"default\": function (v) {\n    TagNav = v;\n  }\n}, 13);\nvar navButtonStyles = {\n  editContainerItem: {\n    display: \"flex\",\n    marginLeft: 5\n  }\n};\nvar NavbarStates = {\n  Orientation: \"stateNavbarOrientation\",\n  Position: \"stateNavbarPosition\",\n  Anchor: \"stateNavbarAnchor\",\n  Visible: \"stateNavbarVisible\"\n};\nvar NavbarOrientation = {\n  Vertical: \"vertical\",\n  Horizontal: \"horizontal\"\n};\nvar NavbarPosition = {\n  Static: \"static\",\n  Fixed: \"fixed\"\n};\nvar NavbarAnchor = {\n  Top: \"top\",\n  Right: \"right\",\n  Bottom: \"bottom\",\n  Left: \"left\",\n  None: \"inline\"\n};\nvar TagNavHelpers = {\n  onTagCreate: function (tagName, parentTag) {\n    TagHelpers.createTag(tagName, undefined, parentTag);\n  },\n  onTagRemove: function (tag, parentTag) {\n    TagHelpers.removeTag(tag, parentTag);\n  },\n  onTagSort: function (tagIds, parentTag) {\n    TagHelpers.sortTags(tagIds, parentTag);\n  },\n  onTagDragAdd: function (movedTagId, toListId, toIndex, ofList) {\n    TagHelpers.moveTagToNewParent(movedTagId, toListId, toIndex, ofList);\n  },\n  onUpdateTag: function (tagId, tagName, parentTagId) {\n    TagHelpers.updateTag(tagId, tagName, parentTagId);\n  },\n  isMobile: function () {\n    return window.matchMedia(\"(max-width: 991px)\").matches;\n  },\n  tagById: function (tagId, tags) {\n    return _find(tags, function (tag) {\n      return tag._id === tagId;\n    });\n  },\n  updateSuggestions: function (suggestion, excludeTagsObj) {\n    return TagHelpers.updateSuggestions(suggestion, excludeTagsObj);\n  },\n  hasSubTags: function (tagId, tags) {\n    var foundTag = this.tagById(tagId, tags);\n\n    if (foundTag) {\n      if (Array.isArray(foundTag.relatedTagIds) && foundTag.relatedTagIds.length) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n};\n\nvar wrapComponent = function (Comp) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_Component) {\n    (0, _inheritsLoose2.default)(TagNavContainer, _Component);\n\n    function TagNavContainer(props) {\n      var _this$state;\n\n      var _this;\n\n      _this = _Component.call(this, props) || this;\n\n      _this.onWindowResize = function () {\n        var matchQuery = window.matchMedia(\"(max-width: 991px)\");\n\n        if (matchQuery.matches) {\n          var _this$setState;\n\n          _this.setState((_this$setState = {}, _this$setState[NavbarStates.Orientation] = NavbarOrientation.Vertical, _this$setState[NavbarStates.Position] = NavbarPosition.Fixed, _this$setState[NavbarStates.Anchor] = NavbarAnchor.Left, _this$setState));\n        } else {\n          var _this$setState2;\n\n          _this.setState((_this$setState2 = {}, _this$setState2[NavbarStates.Orientation] = NavbarOrientation.Horizontal, _this$setState2[NavbarStates.Position] = NavbarPosition.Static, _this$setState2[NavbarStates.Anchor] = NavbarAnchor.None, _this$setState2[NavbarStates.Visible] = false, _this$setState2));\n        }\n      };\n\n      _this.handleNewTagSave = function (tag, parentTag) {\n        if (_this.canSaveTag(tag)) {\n          TagNavHelpers.onTagCreate(tag.name, parentTag);\n\n          _this.setState({\n            newTag: {\n              name: \"\"\n            }\n          });\n        }\n      };\n\n      _this.handleNewTagUpdate = function (tag) {\n        // updates the current tag state being edited\n        _this.setState({\n          newTag: tag\n        });\n      };\n\n      _this.handleTagRemove = function (tag, parentTag) {\n        TagNavHelpers.onTagRemove(tag, parentTag);\n      };\n\n      _this.handleTagUpdate = function (tag) {\n        var _tagsByKey;\n\n        var newState = update(_this.state, {\n          tagsByKey: (_tagsByKey = {}, _tagsByKey[tag._id] = {\n            $set: tag\n          }, _tagsByKey)\n        });\n\n        _this.setState(newState);\n      };\n\n      _this.handleTagSave = function (tag) {\n        TagNavHelpers.onUpdateTag(tag._id, tag.name);\n      };\n\n      _this.handleMoveTag = function (dragIndex, hoverIndex) {\n        var tag = _this.state.tagIds[dragIndex]; // Apply new sort order to variant list\n\n        var newState = update(_this.state, {\n          tagIds: {\n            $splice: [[dragIndex, 1], [hoverIndex, 0, tag]]\n          }\n        }); // Set local state so the component does't have to wait for a round-trip\n        // to the server to get the updated list of variants\n\n        _this.setState(newState, function () {\n          _debounce(function () {\n            return TagNavHelpers.onTagSort(_this.state.tagIds);\n          }, 500)(); // Save the updated positions\n\n        });\n      };\n\n      _this.handleGetSuggestions = function (suggestionUpdateRequest) {\n        var suggestions = TagNavHelpers.updateSuggestions(suggestionUpdateRequest.value, {\n          excludeTags: _this.state.tagIds\n        });\n\n        _this.setState({\n          suggestions: suggestions\n        });\n      };\n\n      _this.handleClearSuggestions = function () {\n        _this.setState({\n          suggestions: []\n        });\n      };\n\n      _this.attachBodyListener = function () {\n        document.body.addEventListener(\"mouseover\", _this.closeDropdown);\n\n        _this.setState({\n          attachedBodyListener: true\n        });\n      };\n\n      _this.detachhBodyListener = function () {\n        document.body.removeEventListener(\"mouseover\", _this.closeDropdown);\n\n        _this.setState({\n          attachedBodyListener: false\n        });\n      };\n\n      _this.closeDropdown = function (event) {\n        var closestNavItem = event.target.closest(\".navbar-item\"); // on mouseover an element outside of tags, close dropdown\n\n        if (_this._isMounted && !closestNavItem) {\n          _this.closeDropdownTimeout = setTimeout(function () {\n            _this.setState({\n              selectedTag: null\n            });\n\n            _this.detachhBodyListener();\n          }, 500);\n        } else if (_this.closeDropdownTimeout) {\n          clearTimeout(_this.closeDropdownTimeout);\n        }\n      };\n\n      _this.onTagSelect = function (currentSelectedTag) {\n        if (_isEqual(currentSelectedTag, _this.state.selectedTag)) {\n          _this.setState({\n            selectedTag: null\n          });\n        } else {\n          _this.setState({\n            selectedTag: currentSelectedTag\n          });\n        }\n      };\n\n      _this.handleTagMouseOver = function (event, tag) {\n        var tagId = tag._id;\n        var tags = _this.props.tagsAsArray;\n\n        if (TagNavHelpers.isMobile()) {\n          return;\n        } // While in edit mode, don't trigger the hover hide/show menu\n\n\n        if (_this.state.editable === false) {\n          // User mode\n          // Don't show dropdown if there are no subtags\n          if (TagNavHelpers.hasSubTags(tagId, tags) === false) {\n            _this.setState({\n              selectedTag: null\n            });\n\n            return;\n          } // Otherwise, show the menu\n          // And Attach an event listener to the document body\n          // This will check to see if the dropdown should be closed if the user\n          // leaves the tag nav bar\n\n\n          _this.attachBodyListener();\n\n          _this.setState({\n            selectedTag: TagNavHelpers.tagById(tagId, tags)\n          });\n        }\n      };\n\n      _this.handleTagClick = function (event, tag) {\n        if (TagNavHelpers.isMobile()) {\n          var tagId = tag._id;\n          var tags = _this.props.tagsAsArray;\n          var selectedTag = _this.state.selectedTag;\n          var hasSubTags = TagNavHelpers.hasSubTags(tagId, tags);\n\n          if (hasSubTags === false) {\n            // click close button to make navbar left disappear\n            _this.props.closeNavbar();\n\n            Router.go(\"tag\", {\n              slug: tag.slug\n            });\n          } else {\n            event.preventDefault();\n          }\n\n          if (selectedTag && selectedTag._id === tagId) {\n            _this.setState({\n              selectedTag: null\n            });\n          } else if (hasSubTags) {\n            _this.setState({\n              selectedTag: TagNavHelpers.tagById(tagId, tags)\n            });\n          }\n        } else {\n          Router.go(\"tag\", {\n            slug: tag.slug\n          });\n        }\n      };\n\n      _this.handleEditButtonClick = function () {\n        _this.setState({\n          editable: !_this.state.editable\n        });\n      };\n\n      _this.navbarSelectedClassName = function (tag) {\n        var currentSelectedTag = _this.state.selectedTag;\n\n        if (currentSelectedTag) {\n          if (currentSelectedTag._id === tag._id) {\n            return \"selected\";\n          }\n        }\n\n        return \"\";\n      };\n\n      _this._isMounted = false;\n      _this.state = (_this$state = {\n        attachedBodyListener: false,\n        editable: false,\n        tagIds: props.tagIds || [],\n        tagsByKey: props.tagsByKey || {},\n        selectedTag: null,\n        suggestions: []\n      }, _this$state[NavbarStates.Visible] = props.isVisible, _this$state.newTag = {\n        name: \"\"\n      }, _this$state);\n      _this.onWindowResize = _this.onWindowResize.bind((0, _assertThisInitialized2.default)(_this));\n      return _this;\n    }\n\n    var _proto = TagNavContainer.prototype;\n\n    _proto.componentDidMount = function () {\n      function componentDidMount() {\n        window.addEventListener(\"resize\", this.onWindowResize);\n        this.onWindowResize();\n        this._isMounted = true;\n      }\n\n      return componentDidMount;\n    }();\n\n    _proto.componentWillReceiveProps = function () {\n      function componentWillReceiveProps(nextProps) {\n        var _this2 = this,\n            _setState;\n\n        var selectedTag = {};\n        var previousEdit = this.state.editable;\n        nextProps.tagsAsArray.forEach(function (tag) {\n          if (_this2.isSelected(tag)) {\n            selectedTag = tag;\n          }\n        });\n        var tagIds = nextProps.tagIds,\n            tagsByKey = nextProps.tagsByKey,\n            isVisible = nextProps.isVisible;\n        this.setState((_setState = {}, _setState[NavbarStates.Visible] = isVisible, _setState.editable = previousEdit && this.canEdit, _setState.tagIds = tagIds, _setState.tagsByKey = tagsByKey, _setState.selectedTag = selectedTag, _setState));\n      }\n\n      return componentWillReceiveProps;\n    }();\n\n    _proto.componentWillUnmount = function () {\n      function componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.onWindowResize);\n        this._isMounted = false;\n      }\n\n      return componentWillUnmount;\n    }();\n\n    _proto.canSaveTag = function () {\n      function canSaveTag(tag) {\n        // Blank tags cannot be saved\n        if (typeof tag.name === \"string\" && tag.name.trim().length === 0) {\n          return false;\n        } // If the tag does not have an id, then allow the save\n\n\n        if (!tag._id) {\n          return true;\n        } // Get the original tag from the props\n        // Tags from props are not mutated, and come from an outside source\n\n\n        var originalTag = this.props.tagsByKey[tag._id];\n\n        if (originalTag && originalTag.name !== tag.name) {\n          return true;\n        }\n\n        return false;\n      }\n\n      return canSaveTag;\n    }();\n\n    _proto.isSelected = function () {\n      function isSelected(tag) {\n        var isSelected = false;\n\n        if (this.state.selectedTag && tag) {\n          isSelected = this.state.selectedTag._id === tag._id;\n        }\n\n        return isSelected;\n      }\n\n      return isSelected;\n    }();\n\n    _proto.hasDropdownClassName = function () {\n      function hasDropdownClassName(tag) {\n        if (Array.isArray(tag.relatedTagIds)) {\n          return \"has-dropdown\";\n        }\n\n        return \"\";\n      }\n\n      return hasDropdownClassName;\n    }();\n\n    _proto.render = function () {\n      function render() {\n        return React.createElement(\"div\", null, React.createElement(Comp, (0, _extends2.default)({}, this.props, TagNavHelpers, {\n          navbarOrientation: this.navbarOrientation,\n          navbarPosition: this.navbarPosition,\n          navbarAnchor: this.navbarAnchor,\n          navbarVisibility: this.navbarVisibility,\n          tags: this.tags,\n          canEdit: this.canEdit,\n          newTag: this.state.newTag,\n          selectedTag: this.state.selectedTag,\n          navButtonStyles: navButtonStyles,\n          editable: this.state.editable,\n          hasDropdownClassName: this.hasDropdownClassName,\n          navbarSelectedClassName: this.navbarSelectedClassName,\n          suggestions: this.state.suggestions,\n          onClearSuggestions: this.handleClearSuggestions,\n          onGetSuggestions: this.handleGetSuggestions,\n          onEditButtonClick: this.handleEditButtonClick,\n          onMoveTag: this.handleMoveTag,\n          onNewTagSave: this.handleNewTagSave,\n          onNewTagUpdate: this.handleNewTagUpdate,\n          onTagClick: this.handleTagClick,\n          onTagMouseOver: this.handleTagMouseOver,\n          onTagRemove: this.handleTagRemove,\n          onTagSave: this.handleTagSave,\n          onTagUpdate: this.handleTagUpdate,\n          onTagSelect: this.onTagSelect\n        })), React.createElement(Components.Overlay, {\n          isVisible: this.state[NavbarStates.Visible],\n          onClick: this.props.closeNavbar\n        }));\n      }\n\n      return render;\n    }();\n\n    (0, _createClass2.default)(TagNavContainer, [{\n      key: \"canEdit\",\n      get: function () {\n        return this.props.hasEditRights && Reaction.isPreview() === false;\n      }\n    }, {\n      key: \"navbarOrientation\",\n      get: function () {\n        return this.state[NavbarStates.Orientation];\n      }\n    }, {\n      key: \"navbarPosition\",\n      get: function () {\n        return this.state[NavbarStates.Position];\n      }\n    }, {\n      key: \"navbarAnchor\",\n      get: function () {\n        return this.state[NavbarStates.Anchor];\n      }\n    }, {\n      key: \"navbarVisibility\",\n      get: function () {\n        var isVisible = this.state[NavbarStates.Visible] === true;\n\n        if (isVisible) {\n          return \"open\";\n        }\n\n        return \"closed\";\n      }\n    }, {\n      key: \"tags\",\n      get: function () {\n        var _this3 = this;\n\n        if (this.state.editable) {\n          return this.state.tagIds.map(function (tagId) {\n            return _this3.state.tagsByKey[tagId];\n          });\n        }\n\n        return this.props.tagsAsArray;\n      }\n    }]);\n    return TagNavContainer;\n  }(Component), _class.propTypes = {\n    closeNavbar: PropTypes.func,\n    editButton: PropTypes.node,\n    editable: PropTypes.bool,\n    hasEditRights: PropTypes.bool,\n    isVisible: PropTypes.bool,\n    tagIds: PropTypes.arrayOf(PropTypes.string),\n    tagsAsArray: PropTypes.arrayOf(PropTypes.object),\n    tagsByKey: PropTypes.object\n  }, _temp;\n};\n\nvar composer = function (props, onData) {\n  var tags = Tags.find({\n    isTopLevel: true\n  }, {\n    sort: {\n      position: 1\n    }\n  }).fetch();\n  tags = _sortBy(tags, \"position\"); // puts tags without position at end of array\n\n  var tagsByKey = {};\n\n  if (Array.isArray(tags)) {\n    for (var _iterator = tags, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var _tag = _ref;\n      tagsByKey[_tag._id] = _tag;\n    }\n  }\n\n  onData(null, {\n    name: \"coreHeaderNavigation\",\n    hasEditRights: Reaction.hasAdminAccess(),\n    tagsAsArray: tags,\n    isVisible: props.isVisible,\n    tagIds: getTagIds({\n      tags: tags\n    }),\n    tagsByKey: tagsByKey\n  });\n};\n\nregisterComponent(\"TagNav\", TagNav, [composeWithTracker(composer), wrapComponent]);\nmodule.exportDefault(_compose(composeWithTracker(composer), wrapComponent)(TagNav));","map":{"version":3,"sources":["imports/plugins/core/ui-tagnav/client/containers/tagNavContainer.js"],"names":["_compose","module","watch","require","v","_sortBy","_isEqual","_debounce","_find","update","React","Component","PropTypes","Components","registerComponent","composeWithTracker","Reaction","Router","getTagIds","TagHelpers","Tags","TagNav","navButtonStyles","editContainerItem","display","marginLeft","NavbarStates","Orientation","Position","Anchor","Visible","NavbarOrientation","Vertical","Horizontal","NavbarPosition","Static","Fixed","NavbarAnchor","Top","Right","Bottom","Left","None","TagNavHelpers","onTagCreate","tagName","parentTag","createTag","undefined","onTagRemove","tag","removeTag","onTagSort","tagIds","sortTags","onTagDragAdd","movedTagId","toListId","toIndex","ofList","moveTagToNewParent","onUpdateTag","tagId","parentTagId","updateTag","isMobile","window","matchMedia","matches","tagById","tags","_id","updateSuggestions","suggestion","excludeTagsObj","hasSubTags","foundTag","Array","isArray","relatedTagIds","length","wrapComponent","Comp","props","onWindowResize","matchQuery","setState","handleNewTagSave","canSaveTag","name","newTag","handleNewTagUpdate","handleTagRemove","handleTagUpdate","newState","state","tagsByKey","$set","handleTagSave","handleMoveTag","dragIndex","hoverIndex","$splice","handleGetSuggestions","suggestionUpdateRequest","suggestions","value","excludeTags","handleClearSuggestions","attachBodyListener","document","body","addEventListener","closeDropdown","attachedBodyListener","detachhBodyListener","removeEventListener","event","closestNavItem","target","closest","_isMounted","closeDropdownTimeout","setTimeout","selectedTag","clearTimeout","onTagSelect","currentSelectedTag","handleTagMouseOver","tagsAsArray","editable","handleTagClick","closeNavbar","go","slug","preventDefault","handleEditButtonClick","navbarSelectedClassName","isVisible","bind","componentDidMount","componentWillReceiveProps","nextProps","previousEdit","forEach","isSelected","canEdit","componentWillUnmount","trim","originalTag","hasDropdownClassName","render","navbarOrientation","navbarPosition","navbarAnchor","navbarVisibility","hasEditRights","isPreview","map","propTypes","func","editButton","node","bool","arrayOf","string","object","composer","onData","find","isTopLevel","sort","position","fetch","hasAdminAccess","exportDefault"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport update from \"immutability-helper\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { compose } from \"recompose\";\nimport { Components, registerComponent, composeWithTracker } from \"@reactioncommerce/reaction-components\";\nimport { Reaction, Router } from \"/client/api\";\nimport { getTagIds } from \"/lib/selectors/tags\";\nimport { TagHelpers } from \"/imports/plugins/core/ui-tagnav/client/helpers\";\nimport { Tags } from \"/lib/collections\";\nimport TagNav from \"../components/tagNav\";\n\nconst navButtonStyles = {\n  editContainerItem: {\n    display: \"flex\",\n    marginLeft: 5\n  }\n};\n\nconst NavbarStates = {\n  Orientation: \"stateNavbarOrientation\",\n  Position: \"stateNavbarPosition\",\n  Anchor: \"stateNavbarAnchor\",\n  Visible: \"stateNavbarVisible\"\n};\n\nconst NavbarOrientation = {\n  Vertical: \"vertical\",\n  Horizontal: \"horizontal\"\n};\n\nconst NavbarPosition = {\n  Static: \"static\",\n  Fixed: \"fixed\"\n};\n\nconst NavbarAnchor = {\n  Top: \"top\",\n  Right: \"right\",\n  Bottom: \"bottom\",\n  Left: \"left\",\n  None: \"inline\"\n};\n\nconst TagNavHelpers = {\n  onTagCreate(tagName, parentTag) {\n    TagHelpers.createTag(tagName, undefined, parentTag);\n  },\n  onTagRemove(tag, parentTag) {\n    TagHelpers.removeTag(tag, parentTag);\n  },\n  onTagSort(tagIds, parentTag) {\n    TagHelpers.sortTags(tagIds, parentTag);\n  },\n  onTagDragAdd(movedTagId, toListId, toIndex, ofList) {\n    TagHelpers.moveTagToNewParent(movedTagId, toListId, toIndex, ofList);\n  },\n  onUpdateTag(tagId, tagName, parentTagId) {\n    TagHelpers.updateTag(tagId, tagName, parentTagId);\n  },\n  isMobile() {\n    return window.matchMedia(\"(max-width: 991px)\").matches;\n  },\n  tagById(tagId, tags) {\n    return _.find(tags, (tag) => tag._id === tagId);\n  },\n  updateSuggestions(suggestion, excludeTagsObj) {\n    return TagHelpers.updateSuggestions(suggestion, excludeTagsObj);\n  },\n  hasSubTags(tagId, tags) {\n    const foundTag = this.tagById(tagId, tags);\n\n    if (foundTag) {\n      if (Array.isArray(foundTag.relatedTagIds) && foundTag.relatedTagIds.length) {\n        return true;\n      }\n    }\n    return false;\n  }\n};\n\nconst wrapComponent = (Comp) => (\n  class TagNavContainer extends Component {\n    static propTypes = {\n      closeNavbar: PropTypes.func,\n      editButton: PropTypes.node,\n      editable: PropTypes.bool,\n      hasEditRights: PropTypes.bool,\n      isVisible: PropTypes.bool,\n      tagIds: PropTypes.arrayOf(PropTypes.string),\n      tagsAsArray: PropTypes.arrayOf(PropTypes.object),\n      tagsByKey: PropTypes.object\n    }\n\n    constructor(props) {\n      super(props);\n\n      this._isMounted = false;\n\n      this.state = {\n        attachedBodyListener: false,\n        editable: false,\n        tagIds: props.tagIds || [],\n        tagsByKey: props.tagsByKey || {},\n        selectedTag: null,\n        suggestions: [],\n        [NavbarStates.Visible]: props.isVisible,\n        newTag: {\n          name: \"\"\n        }\n      };\n\n      this.onWindowResize = this.onWindowResize.bind(this);\n    }\n\n    componentDidMount() {\n      window.addEventListener(\"resize\", this.onWindowResize);\n      this.onWindowResize();\n      this._isMounted = true;\n    }\n\n    componentWillReceiveProps(nextProps) {\n      let selectedTag = {};\n      const previousEdit = this.state.editable;\n      nextProps.tagsAsArray.forEach((tag) => {\n        if (this.isSelected(tag)) {\n          selectedTag = tag;\n        }\n      });\n\n      const { tagIds, tagsByKey, isVisible } = nextProps;\n      this.setState({\n        [NavbarStates.Visible]: isVisible,\n        editable: previousEdit && this.canEdit,\n        tagIds,\n        tagsByKey,\n        selectedTag\n      });\n    }\n\n    componentWillUnmount() {\n      window.removeEventListener(\"resize\", this.onWindowResize);\n      this._isMounted = false;\n    }\n\n    onWindowResize = () => {\n      const matchQuery = window.matchMedia(\"(max-width: 991px)\");\n      if (matchQuery.matches) {\n        this.setState({\n          [NavbarStates.Orientation]: NavbarOrientation.Vertical,\n          [NavbarStates.Position]: NavbarPosition.Fixed,\n          [NavbarStates.Anchor]: NavbarAnchor.Left\n        });\n      } else {\n        this.setState({\n          [NavbarStates.Orientation]: NavbarOrientation.Horizontal,\n          [NavbarStates.Position]: NavbarPosition.Static,\n          [NavbarStates.Anchor]: NavbarAnchor.None,\n          [NavbarStates.Visible]: false\n        });\n      }\n    }\n\n    canSaveTag(tag) {\n      // Blank tags cannot be saved\n      if (typeof tag.name === \"string\" && tag.name.trim().length === 0) {\n        return false;\n      }\n\n      // If the tag does not have an id, then allow the save\n      if (!tag._id) {\n        return true;\n      }\n\n      // Get the original tag from the props\n      // Tags from props are not mutated, and come from an outside source\n      const originalTag = this.props.tagsByKey[tag._id];\n\n      if (originalTag && originalTag.name !== tag.name) {\n        return true;\n      }\n\n      return false;\n    }\n\n    handleNewTagSave = (tag, parentTag) => {\n      if (this.canSaveTag(tag)) {\n        TagNavHelpers.onTagCreate(tag.name, parentTag);\n        this.setState({ newTag: { name: \"\" } });\n      }\n    }\n\n    handleNewTagUpdate = (tag) => { // updates the current tag state being edited\n      this.setState({\n        newTag: tag\n      });\n    }\n\n    handleTagRemove = (tag, parentTag) => {\n      TagNavHelpers.onTagRemove(tag, parentTag);\n    }\n\n    handleTagUpdate = (tag) => {\n      const newState = update(this.state, {\n        tagsByKey: {\n          [tag._id]: {\n            $set: tag\n          }\n        }\n      });\n\n      this.setState(newState);\n    }\n\n    handleTagSave = (tag) => {\n      TagNavHelpers.onUpdateTag(tag._id, tag.name);\n    }\n\n    handleMoveTag = (dragIndex, hoverIndex) => {\n      const tag = this.state.tagIds[dragIndex];\n\n      // Apply new sort order to variant list\n      const newState = update(this.state, {\n        tagIds: {\n          $splice: [\n            [dragIndex, 1],\n            [hoverIndex, 0, tag]\n          ]\n        }\n      });\n\n      // Set local state so the component does't have to wait for a round-trip\n      // to the server to get the updated list of variants\n      this.setState(newState, () => {\n        _.debounce(() => TagNavHelpers.onTagSort(this.state.tagIds), 500)(); // Save the updated positions\n      });\n    }\n\n    handleGetSuggestions = (suggestionUpdateRequest) => {\n      const suggestions = TagNavHelpers.updateSuggestions(\n        suggestionUpdateRequest.value,\n        { excludeTags: this.state.tagIds }\n      );\n\n      this.setState({ suggestions });\n    }\n\n    handleClearSuggestions = () => {\n      this.setState({ suggestions: [] });\n    }\n\n    get canEdit() {\n      return this.props.hasEditRights && Reaction.isPreview() === false;\n    }\n\n    attachBodyListener = () => {\n      document.body.addEventListener(\"mouseover\", this.closeDropdown);\n      this.setState({ attachedBodyListener: true });\n    }\n\n    detachhBodyListener = () => {\n      document.body.removeEventListener(\"mouseover\", this.closeDropdown);\n      this.setState({ attachedBodyListener: false });\n    }\n\n    closeDropdown = (event) => {\n      const closestNavItem = event.target.closest(\".navbar-item\");\n\n      // on mouseover an element outside of tags, close dropdown\n      if (this._isMounted && !closestNavItem) {\n        this.closeDropdownTimeout = setTimeout(() => {\n          this.setState({ selectedTag: null });\n          this.detachhBodyListener();\n        }, 500);\n      } else if (this.closeDropdownTimeout) {\n        clearTimeout(this.closeDropdownTimeout);\n      }\n    }\n\n    get navbarOrientation() {\n      return this.state[NavbarStates.Orientation];\n    }\n\n    get navbarPosition() {\n      return this.state[NavbarStates.Position];\n    }\n\n    get navbarAnchor() {\n      return this.state[NavbarStates.Anchor];\n    }\n\n    get navbarVisibility() {\n      const isVisible = this.state[NavbarStates.Visible] === true;\n\n      if (isVisible) {\n        return \"open\";\n      }\n      return \"closed\";\n    }\n\n    onTagSelect = (currentSelectedTag) => {\n      if (_.isEqual(currentSelectedTag, this.state.selectedTag)) {\n        this.setState({ selectedTag: null });\n      } else {\n        this.setState({ selectedTag: currentSelectedTag });\n      }\n    }\n\n    isSelected(tag) {\n      let isSelected = false;\n      if (this.state.selectedTag && tag) {\n        isSelected = this.state.selectedTag._id === tag._id;\n      }\n      return isSelected;\n    }\n\n    handleTagMouseOver = (event, tag) => {\n      const tagId = tag._id;\n      const tags = this.props.tagsAsArray;\n\n      if (TagNavHelpers.isMobile()) {\n        return;\n      }\n      // While in edit mode, don't trigger the hover hide/show menu\n      if (this.state.editable === false) {\n        // User mode\n        // Don't show dropdown if there are no subtags\n        if (TagNavHelpers.hasSubTags(tagId, tags) === false) {\n          this.setState({ selectedTag: null });\n          return;\n        }\n\n        // Otherwise, show the menu\n        // And Attach an event listener to the document body\n        // This will check to see if the dropdown should be closed if the user\n        // leaves the tag nav bar\n        this.attachBodyListener();\n        this.setState({ selectedTag: TagNavHelpers.tagById(tagId, tags) });\n      }\n    }\n\n    handleTagClick = (event, tag) => {\n      if (TagNavHelpers.isMobile()) {\n        const tagId = tag._id;\n        const tags = this.props.tagsAsArray;\n        const { selectedTag } = this.state;\n        const hasSubTags = TagNavHelpers.hasSubTags(tagId, tags);\n\n        if (hasSubTags === false) {\n          // click close button to make navbar left disappear\n          this.props.closeNavbar();\n          Router.go(\"tag\", { slug: tag.slug });\n        } else {\n          event.preventDefault();\n        }\n\n        if (selectedTag && selectedTag._id === tagId) {\n          this.setState({ selectedTag: null });\n        } else if (hasSubTags) {\n          this.setState({ selectedTag: TagNavHelpers.tagById(tagId, tags) });\n        }\n      } else {\n        Router.go(\"tag\", { slug: tag.slug });\n      }\n    }\n\n    handleEditButtonClick = () => {\n      this.setState({ editable: !this.state.editable });\n    }\n\n    hasDropdownClassName(tag) {\n      if (Array.isArray(tag.relatedTagIds)) {\n        return \"has-dropdown\";\n      }\n      return \"\";\n    }\n\n    navbarSelectedClassName = (tag) => {\n      const currentSelectedTag = this.state.selectedTag;\n\n      if (currentSelectedTag) {\n        if (currentSelectedTag._id === tag._id) {\n          return \"selected\";\n        }\n      }\n      return \"\";\n    }\n\n    get tags() {\n      if (this.state.editable) {\n        return this.state.tagIds.map((tagId) => this.state.tagsByKey[tagId]);\n      }\n\n      return this.props.tagsAsArray;\n    }\n\n    render() {\n      return (\n        <div>\n          <Comp\n            {...this.props}\n            {...TagNavHelpers}\n            navbarOrientation={this.navbarOrientation}\n            navbarPosition={this.navbarPosition}\n            navbarAnchor={this.navbarAnchor}\n            navbarVisibility={this.navbarVisibility}\n            tags={this.tags}\n            canEdit={this.canEdit}\n            newTag={this.state.newTag}\n            selectedTag={this.state.selectedTag}\n            navButtonStyles={navButtonStyles}\n            editable={this.state.editable}\n            hasDropdownClassName={this.hasDropdownClassName}\n            navbarSelectedClassName={this.navbarSelectedClassName}\n            suggestions={this.state.suggestions}\n            onClearSuggestions={this.handleClearSuggestions}\n            onGetSuggestions={this.handleGetSuggestions}\n            onEditButtonClick={this.handleEditButtonClick}\n            onMoveTag={this.handleMoveTag}\n            onNewTagSave={this.handleNewTagSave}\n            onNewTagUpdate={this.handleNewTagUpdate}\n            onTagClick={this.handleTagClick}\n            onTagMouseOver={this.handleTagMouseOver}\n            onTagRemove={this.handleTagRemove}\n            onTagSave={this.handleTagSave}\n            onTagUpdate={this.handleTagUpdate}\n            onTagSelect={this.onTagSelect}\n          />\n          <Components.Overlay\n            isVisible={this.state[NavbarStates.Visible]}\n            onClick={this.props.closeNavbar}\n          />\n        </div>\n      );\n    }\n  }\n);\n\nconst composer = (props, onData) => {\n  let tags = Tags.find({ isTopLevel: true }, { sort: { position: 1 } }).fetch();\n  tags = _.sortBy(tags, \"position\"); // puts tags without position at end of array\n\n  const tagsByKey = {};\n\n  if (Array.isArray(tags)) {\n    for (const tag of tags) {\n      tagsByKey[tag._id] = tag;\n    }\n  }\n\n  onData(null, {\n    name: \"coreHeaderNavigation\",\n    hasEditRights: Reaction.hasAdminAccess(),\n    tagsAsArray: tags,\n    isVisible: props.isVisible,\n    tagIds: getTagIds({ tags }),\n    tagsByKey\n  });\n};\n\nregisterComponent(\"TagNav\", TagNav, [\n  composeWithTracker(composer),\n  wrapComponent\n]);\n\nexport default compose(\n  composeWithTracker(composer),\n  wrapComponent\n)(TagNav);\n"]},"sourceType":"script","hash":"dd616d5b7f82092ea4fab2f3087530fd436065c9"}
