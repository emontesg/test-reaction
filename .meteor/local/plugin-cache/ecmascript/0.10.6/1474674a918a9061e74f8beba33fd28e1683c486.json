{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"packages/dburles:factory/factory_tests.js","filename":"packages/dburles:factory/factory_tests.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/dburles:factory/factory_tests.js","plugins":["dynamicImport","classProperties","jsx","jsx","flow","asyncGenerators","objectRestSpread","objectRestSpread","flow","asyncGenerators"]},"generatorOpts":{"filename":"packages/dburles:factory/factory_tests.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/dburles:factory/factory_tests.js"}},"code":"/* global Factory */\n\n/* global Authors:true, Books:true */\nAuthors = new Meteor.Collection('authors');\nBooks = new Meteor.Collection('books');\nTinytest.add(\"Factory - Build - Basic build works\", function (test) {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  test.equal(Factory.build('author').name, \"John Smith\");\n});\nTinytest.add(\"Factory - Define - After hook\", function (test) {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  }).after(function (doc) {\n    var author = Factory.create('author');\n    test.equal(author.name, \"John Smith\");\n    test.equal(doc.name, \"John Smith\");\n  });\n});\nTinytest.add(\"Factory - Build - Functions - Basic\", function (test) {\n  Factory.define('author', Authors, {\n    name: function () {\n      return \"John Smith\";\n    }\n  });\n  test.equal(Factory.build('author').name, \"John Smith\");\n});\nTinytest.add(\"Factory - Build - Functions - Context\", function (test) {\n  Factory.define('author', Authors, {\n    test: \"John Smith\",\n    name: function () {\n      return this.test;\n    }\n  });\n  test.equal(Factory.build('author').name, \"John Smith\");\n});\nTinytest.add(\"Factory - Build - Dotted properties - Basic\", function (test) {\n  Factory.define('author', Authors, {\n    \"profile.name\": \"John Smith\"\n  });\n  test.equal(Factory.build('author').profile.name, \"John Smith\");\n});\nTinytest.add(\"Factory - Build - Dotted properties - Context\", function (test) {\n  Factory.define('author', Authors, {\n    name: \"John Smith\",\n    'profile.name': function () {\n      return this.name;\n    }\n  });\n  test.equal(Factory.build('author').profile.name, \"John Smith\");\n});\nTinytest.add(\"Factory - Build - Deep objects\", function (test) {\n  Factory.define('author', Authors, {\n    profile: {\n      name: \"John Smith\"\n    }\n  });\n  test.equal(Factory.build('author').profile.name, \"John Smith\");\n});\nTinytest.add(\"Factory - Build - Functions - Deep object - Basic\", function (test) {\n  Factory.define('author', Authors, {\n    profile: {\n      name: function () {\n        return \"John Smith\";\n      }\n    }\n  });\n  test.equal(Factory.build('author').profile.name, \"John Smith\");\n});\nTinytest.add(\"Factory - Build - Functions - Deep object - Context\", function (test) {\n  Factory.define('author', Authors, {\n    name: \"John Smith\",\n    profile: {\n      name: function () {\n        return this.name;\n      }\n    }\n  });\n  test.equal(Factory.build('author').profile.name, \"John Smith\");\n});\nTinytest.add(\"Factory - Build - Extend - Basic\", function (test) {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  Factory.define('authorOne', Authors, Factory.extend('author'));\n  test.equal(Factory.build('authorOne').name, \"John Smith\");\n});\nTinytest.add(\"Factory - Build - Extend - With attributes\", function (test) {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  Factory.define('authorOne', Authors, Factory.extend('author', {\n    test: \"testing!\"\n  }));\n  test.equal(Factory.build('authorOne').name, \"John Smith\");\n  test.equal(Factory.build('authorOne').test, \"testing!\");\n});\nTinytest.add(\"Factory - Build - Extend - With attributes (check that we don't modify the parent)\", function (test) {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  Factory.define('authorOne', Books, Factory.extend('author', {\n    test: \"testing!\"\n  }));\n  var authorOne = Factory.build('authorOne');\n  var author = Factory.build('author');\n  test.equal(authorOne.name, \"John Smith\");\n  test.equal(authorOne.test, \"testing!\");\n  test.equal(_.isUndefined(author.test), true);\n});\nTinytest.add(\"Factory - Build - Extend - Parent with relationship\", function (test) {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  Factory.define('book', Books, {\n    authorId: Factory.get('author'),\n    name: \"A book\",\n    year: 2014\n  });\n  Factory.define('bookOne', Books, Factory.extend('book'));\n  var bookOne = Factory.create('bookOne');\n  test.equal(bookOne.name, \"A book\");\n});\nTinytest.add(\"Factory - Build - Extend - Parent with relationship - Extra attributes\", function (test) {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  Factory.define('book', Books, {\n    authorId: Factory.get('author'),\n    name: \"A book\",\n    year: 2014\n  });\n  Factory.define('bookOne', Books, Factory.extend('book', {\n    name: \"A better book\"\n  }));\n  var bookOne = Factory.create('bookOne');\n  test.equal(bookOne.name, \"A better book\"); // same year as parent\n\n  test.equal(bookOne.year, 2014);\n});\nTinytest.add(\"Factory - Create - Basic\", function (test) {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  var author = Factory.create('author');\n  test.equal(author.name, \"John Smith\");\n});\nTinytest.add(\"Factory - Create - Relationship\", function (test) {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  Factory.define('book', Books, {\n    authorId: Factory.get('author'),\n    name: \"A book\",\n    year: 2014\n  });\n  var book = Factory.create('book');\n  test.equal(Authors.findOne(book.authorId).name, \"John Smith\");\n});\nTinytest.add(\"Factory - Create - Relationship - return a Factory from function\", function (test) {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  Factory.define('book', Books, {\n    authorId: function () {\n      return Factory.get('author');\n    },\n    name: \"A book\",\n    year: 2014\n  });\n  var book = Factory.create('book');\n  test.equal(Authors.findOne(book.authorId).name, \"John Smith\");\n});\nTinytest.add(\"Factory - Create - Relationship - return a Factory from deep function (dotted)\", function (test) {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  Factory.define('book', Books, {\n    'good.authorId': function () {\n      return Factory.get('author');\n    },\n    name: \"A book\",\n    year: 2014\n  });\n  var book = Factory.create('book');\n  test.equal(Authors.findOne(book.good.authorId).name, \"John Smith\");\n});\nTinytest.add(\"Factory - Create - Relationship - return a Factory from deep function\", function (test) {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  Factory.define('book', Books, {\n    good: {\n      authorId: function () {\n        return Factory.get('author');\n      }\n    },\n    name: \"A book\",\n    year: 2014\n  });\n  var book = Factory.create('book');\n  test.equal(Authors.findOne(book.good.authorId).name, \"John Smith\");\n});\nTinytest.add(\"Factory - Build - Sequence\", function (test) {\n  Factory.define('author', Authors, {\n    name: \"John Smith\",\n    email: function (factory) {\n      return factory.sequence(function (n) {\n        return 'person' + n + '@example.com';\n      });\n    }\n  });\n  var author = Factory.build('author');\n  test.equal(author.email, \"person1@example.com\");\n  var author2 = Factory.build('author');\n  test.equal(author2.email, \"person2@example.com\");\n});\nTinytest.add(\"Factory - Create - Sequence\", function (test) {\n  Authors.remove({});\n  Factory.define('author', Authors, {\n    name: \"John Smith\",\n    email: function (factory) {\n      return factory.sequence(function (n) {\n        return 'person' + n + '@example.com';\n      });\n    }\n  });\n  var author = Factory.create('author');\n  test.equal(author.email, \"person1@example.com\");\n  var foundAuthor = Authors.find({\n    email: \"person1@example.com\"\n  }).count();\n  test.equal(foundAuthor, 1);\n  var author2 = Factory.create('author');\n  test.equal(author2.email, \"person2@example.com\");\n  var foundAuthor2 = Authors.find({\n    email: \"person2@example.com\"\n  }).count();\n  test.equal(foundAuthor2, 1);\n});\nTinytest.add(\"Factory - Build - Array with Factory\", function (test) {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  Factory.define('book', Books, {\n    authorIds: [Factory.get('author'), 'PXm6dye7A8vgoB7uY']\n  });\n  var book = Factory.build('book');\n  test.length(book.authorIds, 2);\n  test.length(book.authorIds[0], 17);\n});\nTinytest.add(\"Factory - Build - Array with function returning a Factory\", function (test) {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  Factory.define('book', Books, {\n    authorIds: [function () {\n      return Factory.get('author');\n    }, 'PXm6dye7A8vgoB7uY']\n  });\n  var book = Factory.build('book');\n  test.length(book.authorIds, 2);\n  test.length(book.authorIds[0], 17);\n});\nTinytest.add(\"Factory - Build - Array with an object\", function (test) {\n  Factory.define('book', Books, {\n    array: [{\n      objectInArray: true\n    }]\n  });\n  var book = Factory.build('book');\n  test.isTrue(book.array[0].objectInArray);\n}); // Could possibly make this a feature:\n// Tinytest.add(\"Factory - Build - Array with an object containing a function\", test => {\n//   Factory.define('book', Books, {\n//     array: [{objectInArrayWithFn: () => true}]\n//   });\n//   const book = Factory.build('book');\n//   test.equal(book.array[0].objectInArrayWithFn, true);\n// });\n\nTinytest.add(\"Factory - Tree - Basic\", function (test) {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  Factory.define('book', Books, {\n    name: \"A book\",\n    author: Factory.get('author')\n  });\n  var book = Factory.tree('book');\n  test.equal(book.author.name, \"John Smith\");\n});\nTinytest.add(\"Factory - Build - With options\", function (test) {\n  Factory.define('author', Authors, {\n    name: \"John Smith\",\n    books: function (factory) {\n      var _this = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        bookCount: 2\n      };\n      return _(options.bookCount).times(function (n) {\n        return n + 1 + \" book by \" + _this.name;\n      });\n    }\n  });\n  var author = Factory.build('author', {}, {\n    bookCount: 3\n  });\n  test.length(author.books, 3);\n  test.equal(author.books, ['1 book by John Smith', '2 book by John Smith', '3 book by John Smith']);\n});\nTinytest.add(\"Factory - Create - With options\", function (test) {\n  Factory.define('book', Books, {\n    name: \"A book\",\n    pages: function (factory) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        pageCount: 2\n      };\n      return _(options.pageCount).times(function (n) {\n        return \"Page \" + (n + 1);\n      });\n    }\n  });\n  var book = Factory.create('book', {}, {\n    pageCount: 2\n  });\n  test.length(book.pages, 2);\n  test.equal(book.pages, ['Page 1', 'Page 2']);\n});","map":{"version":3,"sources":["packages/dburles:factory/factory_tests.js"],"names":["Authors","Meteor","Collection","Books","Tinytest","add","Factory","define","name","test","equal","build","after","author","create","doc","profile","extend","authorOne","_","isUndefined","authorId","get","year","bookOne","book","findOne","good","email","factory","sequence","n","author2","remove","foundAuthor","find","count","foundAuthor2","authorIds","length","array","objectInArray","isTrue","tree","books","options","bookCount","times","pages","pageCount"],"mappings":"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","sourcesContent":["/* global Factory */\n/* global Authors:true, Books:true */\n\nAuthors = new Meteor.Collection('authors');\nBooks = new Meteor.Collection('books');\n\nTinytest.add(\"Factory - Build - Basic build works\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  test.equal(Factory.build('author').name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Define - After hook\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  }).after(doc => {\n    var author = Factory.create('author');\n    test.equal(author.name, \"John Smith\");\n    test.equal(doc.name, \"John Smith\");\n  });\n});\n\nTinytest.add(\"Factory - Build - Functions - Basic\", test => {\n  Factory.define('author', Authors, {\n    name() {\n      return \"John Smith\";\n    }\n  });\n\n  test.equal(Factory.build('author').name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Build - Functions - Context\", test => {\n  Factory.define('author', Authors, {\n    test: \"John Smith\",\n    name() {\n      return this.test;\n    }\n  });\n\n  test.equal(Factory.build('author').name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Build - Dotted properties - Basic\", test => {\n  Factory.define('author', Authors, {\n    \"profile.name\": \"John Smith\"\n  });\n\n  test.equal(Factory.build('author').profile.name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Build - Dotted properties - Context\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\",\n    'profile.name'() {\n      return this.name;\n    }\n  });\n\n  test.equal(Factory.build('author').profile.name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Build - Deep objects\", test => {\n  Factory.define('author', Authors, {\n    profile: {\n      name: \"John Smith\"\n    }\n  });\n\n  test.equal(Factory.build('author').profile.name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Build - Functions - Deep object - Basic\", test => {\n  Factory.define('author', Authors, {\n    profile: {\n      name() {\n        return \"John Smith\";\n      }\n    }\n  });\n\n  test.equal(Factory.build('author').profile.name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Build - Functions - Deep object - Context\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\",\n    profile: {\n      name() {\n        return this.name;\n      }\n    }\n  });\n\n  test.equal(Factory.build('author').profile.name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Build - Extend - Basic\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  Factory.define('authorOne', Authors, Factory.extend('author'));\n\n  test.equal(Factory.build('authorOne').name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Build - Extend - With attributes\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  Factory.define('authorOne', Authors, Factory.extend('author', {\n    test: \"testing!\"\n  }));\n\n  test.equal(Factory.build('authorOne').name, \"John Smith\");\n  test.equal(Factory.build('authorOne').test, \"testing!\");\n});\n\nTinytest.add(\"Factory - Build - Extend - With attributes (check that we don't modify the parent)\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  Factory.define('authorOne', Books, Factory.extend('author', {\n    test: \"testing!\"\n  }));\n\n  var authorOne = Factory.build('authorOne');\n  var author = Factory.build('author');\n\n  test.equal(authorOne.name, \"John Smith\");\n  test.equal(authorOne.test, \"testing!\");\n  test.equal(_.isUndefined(author.test), true);\n});\n\nTinytest.add(\"Factory - Build - Extend - Parent with relationship\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  Factory.define('book', Books, {\n    authorId: Factory.get('author'),\n    name: \"A book\",\n    year: 2014\n  });\n\n  Factory.define('bookOne', Books, Factory.extend('book'));\n\n  var bookOne = Factory.create('bookOne');\n\n  test.equal(bookOne.name, \"A book\");\n});\n\nTinytest.add(\"Factory - Build - Extend - Parent with relationship - Extra attributes\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  Factory.define('book', Books, {\n    authorId: Factory.get('author'),\n    name: \"A book\",\n    year: 2014\n  });\n\n  Factory.define('bookOne', Books, Factory.extend('book', {\n    name: \"A better book\"\n  }));\n\n  var bookOne = Factory.create('bookOne');\n\n  test.equal(bookOne.name, \"A better book\");\n  // same year as parent\n  test.equal(bookOne.year, 2014);\n});\n\nTinytest.add(\"Factory - Create - Basic\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  var author = Factory.create('author');\n\n  test.equal(author.name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Create - Relationship\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  Factory.define('book', Books, {\n    authorId: Factory.get('author'),\n    name: \"A book\",\n    year: 2014\n  });\n\n  var book = Factory.create('book');\n\n  test.equal(Authors.findOne(book.authorId).name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Create - Relationship - return a Factory from function\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  Factory.define('book', Books, {\n    authorId() {\n      return Factory.get('author');\n    },\n    name: \"A book\",\n    year: 2014\n  });\n\n  var book = Factory.create('book');\n\n  test.equal(Authors.findOne(book.authorId).name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Create - Relationship - return a Factory from deep function (dotted)\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  Factory.define('book', Books, {\n    'good.authorId'() {\n      return Factory.get('author');\n    },\n    name: \"A book\",\n    year: 2014\n  });\n\n  var book = Factory.create('book');\n\n  test.equal(Authors.findOne(book.good.authorId).name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Create - Relationship - return a Factory from deep function\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  Factory.define('book', Books, {\n    good: {\n      authorId() {\n        return Factory.get('author');\n      }\n    },\n    name: \"A book\",\n    year: 2014\n  });\n\n  var book = Factory.create('book');\n\n  test.equal(Authors.findOne(book.good.authorId).name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Build - Sequence\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\",\n    email(factory) {\n      return factory.sequence(n => 'person' + n + '@example.com');\n    }\n  });\n\n  var author = Factory.build('author');\n  test.equal(author.email, \"person1@example.com\");\n  var author2 = Factory.build('author');\n  test.equal(author2.email, \"person2@example.com\");\n});\n\nTinytest.add(\"Factory - Create - Sequence\", test => {\n  Authors.remove({});\n\n  Factory.define('author', Authors, {\n    name: \"John Smith\",\n    email(factory) {\n      return factory.sequence(n => 'person' + n + '@example.com');\n    }\n  });\n\n  var author = Factory.create('author');\n  test.equal(author.email, \"person1@example.com\");\n  var foundAuthor = Authors.find({email: \"person1@example.com\"}).count();\n  test.equal(foundAuthor, 1);\n\n  var author2 = Factory.create('author');\n  test.equal(author2.email, \"person2@example.com\");\n  var foundAuthor2 = Authors.find({email: \"person2@example.com\"}).count();\n  test.equal(foundAuthor2, 1);\n});\n\nTinytest.add(\"Factory - Build - Array with Factory\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  Factory.define('book', Books, {\n    authorIds: [Factory.get('author'), 'PXm6dye7A8vgoB7uY']\n  });\n\n  const book = Factory.build('book');\n\n  test.length(book.authorIds, 2);\n  test.length(book.authorIds[0], 17);\n});\n\nTinytest.add(\"Factory - Build - Array with function returning a Factory\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  Factory.define('book', Books, {\n    authorIds: [() => Factory.get('author'), 'PXm6dye7A8vgoB7uY']\n  });\n\n  const book = Factory.build('book');\n\n  test.length(book.authorIds, 2);\n  test.length(book.authorIds[0], 17);\n});\n\nTinytest.add(\"Factory - Build - Array with an object\", test => {\n  Factory.define('book', Books, {\n    array: [{objectInArray: true}]\n  });\n\n  const book = Factory.build('book');\n\n  test.isTrue(book.array[0].objectInArray);\n});\n\n// Could possibly make this a feature:\n// Tinytest.add(\"Factory - Build - Array with an object containing a function\", test => {\n//   Factory.define('book', Books, {\n//     array: [{objectInArrayWithFn: () => true}]\n//   });\n\n//   const book = Factory.build('book');\n\n//   test.equal(book.array[0].objectInArrayWithFn, true);\n// });\n\nTinytest.add(\"Factory - Tree - Basic\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  Factory.define('book', Books, {\n    name: \"A book\",\n    author: Factory.get('author')\n  });\n\n  const book = Factory.tree('book');\n\n  test.equal(book.author.name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Build - With options\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\",\n    books(factory, options = { bookCount: 2 }) {\n      return _(options.bookCount).times((n) => `${n + 1} book by ${this.name}`)\n    }\n  });\n\n  const author = Factory.build('author', {}, { bookCount: 3 });\n\n  test.length(author.books, 3);\n  test.equal(author.books, [\n    '1 book by John Smith',\n    '2 book by John Smith',\n    '3 book by John Smith',\n  ]);\n});\n\nTinytest.add(\"Factory - Create - With options\", test => {\n  Factory.define('book', Books, {\n    name: \"A book\",\n    pages(factory, options = { pageCount: 2 }) {\n      return _(options.pageCount).times((n) => `Page ${n + 1}`)\n    }\n  });\n\n  const book = Factory.create('book', {}, { pageCount: 2 });\n\n  test.length(book.pages, 2);\n  test.equal(book.pages, [\n    'Page 1',\n    'Page 2',\n  ]);\n});\n"]},"sourceType":"script","hash":"1474674a918a9061e74f8beba33fd28e1683c486"}
