{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/plugins/included/shipping-shippo/server/hooks/rates.js","filename":"imports/plugins/included/shipping-shippo/server/hooks/rates.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"imports/plugins/included/shipping-shippo/server/hooks/rates.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"imports/plugins/included/shipping-shippo/server/hooks/rates.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/plugins/included/shipping-shippo/server/hooks/rates.js"}},"code":"let _get;\n\nmodule.watch(require(\"lodash/get\"), {\n  default(v) {\n    _get = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Shipping, Packages;\nmodule.watch(require(\"../../../../../../lib/collections\"), {\n  Shipping(v) {\n    Shipping = v;\n  },\n\n  Packages(v) {\n    Packages = v;\n  }\n\n}, 2);\nlet Logger, Reaction, Hooks;\nmodule.watch(require(\"../../../../../../server/api\"), {\n  Logger(v) {\n    Logger = v;\n  },\n\n  Reaction(v) {\n    Reaction = v;\n  },\n\n  Hooks(v) {\n    Hooks = v;\n  }\n\n}, 3);\n\n// callback ran on getShippingRates hook\nfunction getShippingRates(previousQueryResults, cart) {\n  const marketplaceSettings = Reaction.getMarketplaceSettings();\n\n  const merchantShippingRates = _get(marketplaceSettings, \"public.merchantShippingRates\", false);\n\n  if (merchantShippingRates) {\n    Logger.fatal(\"Multiple shipping providers is currently not implemented\");\n    throw new Meteor.Error(\"not-implemented\", \"Multiple shipping providers is currently not implemented\");\n  }\n\n  const pkgData = Packages.findOne({\n    name: \"reaction-shippo\",\n    shopId: Reaction.getPrimaryShopId()\n  });\n  const [rates, retrialTargets] = previousQueryResults;\n  const products = cart.items; // must have cart items and package enabled to calculate shipping\n\n  if (!pkgData || !products || pkgData.settings.shippo.enabled !== true) {\n    return [rates, retrialTargets];\n  } // if we don't have merchant shipping rates enabled, only grab rates from primary shop\n\n\n  const shops = [];\n\n  if (!merchantShippingRates) {\n    shops.push(Reaction.getPrimaryShopId());\n  } else {\n    // create an array of shops, allowing\n    // the cart to have products from multiple shops\n    for (const product of products) {\n      if (product.shopId) {\n        shops.push(product.shopId);\n      }\n    }\n  }\n\n  const shippoDocs = {};\n  Shipping.find({\n    \"shopId\": {\n      $in: shops\n    },\n    \"provider.enabled\": true\n  }).forEach(doc => {\n    // If provider is from Shippo, put it in an object to get rates dynamically(shippoApi) for all of them after.\n    if (doc.provider.shippoProvider) {\n      shippoDocs[doc.provider.shippoProvider.carrierAccountId] = doc;\n    }\n  }); // Get shippingRates from Shippo\n\n  if (Object.keys(shippoDocs).length > 0) {\n    const targets = retrialTargets.slice();\n    const shippingRatesInfo = Meteor.call(\"shippo/getShippingRatesForCart\", cart._id, shippoDocs, targets);\n    const [shippoRates, singleRetrialTarget] = shippingRatesInfo;\n    rates.push(...shippoRates);\n    retrialTargets.push(...singleRetrialTarget);\n  }\n\n  Logger.debug(\"Shippo onGetShippingRates\", [rates, retrialTargets]);\n  return [rates, retrialTargets];\n} // run getShippingRates when the onGetShippingRates event runs\n\n\nHooks.Events.add(\"onGetShippingRates\", getShippingRates);","map":{"version":3,"sources":["imports/plugins/included/shipping-shippo/server/hooks/rates.js"],"names":["_get","module","watch","require","default","v","Meteor","Shipping","Packages","Logger","Reaction","Hooks","getShippingRates","previousQueryResults","cart","marketplaceSettings","getMarketplaceSettings","merchantShippingRates","fatal","Error","pkgData","findOne","name","shopId","getPrimaryShopId","rates","retrialTargets","products","items","settings","shippo","enabled","shops","push","product","shippoDocs","find","$in","forEach","doc","provider","shippoProvider","carrierAccountId","Object","keys","length","targets","slice","shippingRatesInfo","call","_id","shippoRates","singleRetrialTarget","debug","Events","add"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Shipping, Packages } from \"/lib/collections\";\nimport { Logger, Reaction, Hooks } from \"/server/api\";\n\n// callback ran on getShippingRates hook\nfunction getShippingRates(previousQueryResults, cart) {\n  const marketplaceSettings = Reaction.getMarketplaceSettings();\n  const merchantShippingRates = _.get(marketplaceSettings, \"public.merchantShippingRates\", false);\n\n  if (merchantShippingRates) {\n    Logger.fatal(\"Multiple shipping providers is currently not implemented\");\n    throw new Meteor.Error(\"not-implemented\", \"Multiple shipping providers is currently not implemented\");\n  }\n\n  const pkgData = Packages.findOne({\n    name: \"reaction-shippo\",\n    shopId: Reaction.getPrimaryShopId()\n  });\n\n  const [rates, retrialTargets] = previousQueryResults;\n  const products = cart.items;\n\n  // must have cart items and package enabled to calculate shipping\n  if (!pkgData || !products || pkgData.settings.shippo.enabled !== true) {\n    return [rates, retrialTargets];\n  }\n\n  // if we don't have merchant shipping rates enabled, only grab rates from primary shop\n  const shops = [];\n  if (!merchantShippingRates) {\n    shops.push(Reaction.getPrimaryShopId());\n  } else {\n    // create an array of shops, allowing\n    // the cart to have products from multiple shops\n    for (const product of products) {\n      if (product.shopId) {\n        shops.push(product.shopId);\n      }\n    }\n  }\n\n  const shippoDocs = {};\n  Shipping.find({\n    \"shopId\": { $in: shops },\n    \"provider.enabled\": true\n  }).forEach((doc) => {\n    // If provider is from Shippo, put it in an object to get rates dynamically(shippoApi) for all of them after.\n    if (doc.provider.shippoProvider) {\n      shippoDocs[doc.provider.shippoProvider.carrierAccountId] = doc;\n    }\n  });\n\n  // Get shippingRates from Shippo\n  if (Object.keys(shippoDocs).length > 0) {\n    const targets = retrialTargets.slice();\n    const shippingRatesInfo =\n      Meteor.call(\"shippo/getShippingRatesForCart\", cart._id, shippoDocs, targets);\n    const [shippoRates, singleRetrialTarget] = shippingRatesInfo;\n    rates.push(...shippoRates);\n    retrialTargets.push(...singleRetrialTarget);\n  }\n\n  Logger.debug(\"Shippo onGetShippingRates\", [rates, retrialTargets]);\n  return [rates, retrialTargets];\n}\n\n// run getShippingRates when the onGetShippingRates event runs\nHooks.Events.add(\"onGetShippingRates\", getShippingRates);\n"]},"sourceType":"script","hash":"f34680cba320ec0ca8d956698fe743aca4fd6b32"}
