{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"packages/aldeed:schema-index/server.js","filename":"packages/aldeed:schema-index/server.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"presets":[],"parserOpts":{"sourceType":"module","sourceFileName":"packages/aldeed:schema-index/server.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"packages/aldeed:schema-index/server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/aldeed:schema-index/server.js"}},"code":"let Collection2;\nmodule.watch(require(\"meteor/aldeed:collection2\"), {\n  default(v) {\n    Collection2 = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nmodule.watch(require(\"./common\"));\nCollection2.on('schema.attached', (collection, ss) => {\n  function ensureIndex(index, name, unique, sparse) {\n    Meteor.startup(() => {\n      collection._collection._ensureIndex(index, {\n        background: true,\n        name,\n        unique,\n        sparse\n      });\n    });\n  }\n\n  function dropIndex(indexName) {\n    Meteor.startup(() => {\n      try {\n        collection._collection._dropIndex(indexName);\n      } catch (err) {// no index with that name, which is what we want\n      }\n    });\n  }\n\n  const propName = ss.version === 2 ? 'mergedSchema' : 'schema'; // Loop over fields definitions and ensure collection indexes (server side only)\n\n  const schema = ss[propName]();\n  Object.keys(schema).forEach(fieldName => {\n    const definition = schema[fieldName];\n\n    if ('index' in definition || definition.unique === true) {\n      const index = {}; // If they specified `unique: true` but not `index`,\n      // we assume `index: 1` to set up the unique index in mongo\n\n      let indexValue;\n\n      if ('index' in definition) {\n        indexValue = definition.index;\n        if (indexValue === true) indexValue = 1;\n      } else {\n        indexValue = 1;\n      }\n\n      const indexName = `c2_${fieldName}`; // In the index object, we want object array keys without the \".$\" piece\n\n      const idxFieldName = fieldName.replace(/\\.\\$\\./g, '.');\n      index[idxFieldName] = indexValue;\n      const unique = !!definition.unique && (indexValue === 1 || indexValue === -1);\n      let sparse = definition.sparse || false; // If unique and optional, force sparse to prevent errors\n\n      if (!sparse && unique && definition.optional) sparse = true;\n\n      if (indexValue === false) {\n        dropIndex(indexName);\n      } else {\n        ensureIndex(index, indexName, unique, sparse);\n      }\n    }\n  });\n});","map":{"version":3,"sources":["packages/aldeed:schema-index/server.js"],"names":["Collection2","module","watch","require","default","v","Meteor","on","collection","ss","ensureIndex","index","name","unique","sparse","startup","_collection","_ensureIndex","background","dropIndex","indexName","_dropIndex","err","propName","version","schema","Object","keys","forEach","fieldName","definition","indexValue","idxFieldName","replace","optional"],"mappings":"AAAA,IAAIA,WAAJ;AAAgBC,OAAOC,KAAP,CAAaC,QAAQ,2BAAR,CAAb,EAAkD;AAACC,UAAQC,CAAR,EAAU;AAACL,kBAAYK,CAAZ;AAAc;;AAA1B,CAAlD,EAA8E,CAA9E;AAAiF,IAAIC,MAAJ;AAAWL,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACG,SAAOD,CAAP,EAAS;AAACC,aAAOD,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+DJ,OAAOC,KAAP,CAAaC,QAAQ,UAAR,CAAb;AAK3KH,YAAYO,EAAZ,CAAe,iBAAf,EAAkC,CAACC,UAAD,EAAaC,EAAb,KAAoB;AACpD,WAASC,WAAT,CAAqBC,KAArB,EAA4BC,IAA5B,EAAkCC,MAAlC,EAA0CC,MAA1C,EAAkD;AAChDR,WAAOS,OAAP,CAAe,MAAM;AACnBP,iBAAWQ,WAAX,CAAuBC,YAAvB,CAAoCN,KAApC,EAA2C;AACzCO,oBAAY,IAD6B;AAEzCN,YAFyC;AAGzCC,cAHyC;AAIzCC;AAJyC,OAA3C;AAMD,KAPD;AAQD;;AAED,WAASK,SAAT,CAAmBC,SAAnB,EAA8B;AAC5Bd,WAAOS,OAAP,CAAe,MAAM;AACnB,UAAI;AACFP,mBAAWQ,WAAX,CAAuBK,UAAvB,CAAkCD,SAAlC;AACD,OAFD,CAEE,OAAOE,GAAP,EAAY,CACZ;AACD;AACF,KAND;AAOD;;AAED,QAAMC,WAAWd,GAAGe,OAAH,KAAe,CAAf,GAAmB,cAAnB,GAAoC,QAArD,CAtBoD,CAwBpD;;AACA,QAAMC,SAAShB,GAAGc,QAAH,GAAf;AACAG,SAAOC,IAAP,CAAYF,MAAZ,EAAoBG,OAApB,CAA6BC,SAAD,IAAe;AACzC,UAAMC,aAAaL,OAAOI,SAAP,CAAnB;;AACA,QAAI,WAAWC,UAAX,IAAyBA,WAAWjB,MAAX,KAAsB,IAAnD,EAAyD;AACvD,YAAMF,QAAQ,EAAd,CADuD,CAEvD;AACA;;AACA,UAAIoB,UAAJ;;AACA,UAAI,WAAWD,UAAf,EAA2B;AACzBC,qBAAaD,WAAWnB,KAAxB;AACA,YAAIoB,eAAe,IAAnB,EAAyBA,aAAa,CAAb;AAC1B,OAHD,MAGO;AACLA,qBAAa,CAAb;AACD;;AAED,YAAMX,YAAa,MAAKS,SAAU,EAAlC,CAZuD,CAavD;;AACA,YAAMG,eAAeH,UAAUI,OAAV,CAAkB,SAAlB,EAA6B,GAA7B,CAArB;AACAtB,YAAMqB,YAAN,IAAsBD,UAAtB;AACA,YAAMlB,SAAS,CAAC,CAACiB,WAAWjB,MAAb,KAAwBkB,eAAe,CAAf,IAAoBA,eAAe,CAAC,CAA5D,CAAf;AACA,UAAIjB,SAASgB,WAAWhB,MAAX,IAAqB,KAAlC,CAjBuD,CAmBvD;;AACA,UAAI,CAACA,MAAD,IAAWD,MAAX,IAAqBiB,WAAWI,QAApC,EAA8CpB,SAAS,IAAT;;AAE9C,UAAIiB,eAAe,KAAnB,EAA0B;AACxBZ,kBAAUC,SAAV;AACD,OAFD,MAEO;AACLV,oBAAYC,KAAZ,EAAmBS,SAAnB,EAA8BP,MAA9B,EAAsCC,MAAtC;AACD;AACF;AACF,GA9BD;AA+BD,CAzDD","sourcesContent":["import Collection2 from 'meteor/aldeed:collection2';\nimport { Meteor } from 'meteor/meteor';\n\nimport './common';\n\nCollection2.on('schema.attached', (collection, ss) => {\n  function ensureIndex(index, name, unique, sparse) {\n    Meteor.startup(() => {\n      collection._collection._ensureIndex(index, {\n        background: true,\n        name,\n        unique,\n        sparse,\n      });\n    });\n  }\n\n  function dropIndex(indexName) {\n    Meteor.startup(() => {\n      try {\n        collection._collection._dropIndex(indexName);\n      } catch (err) {\n        // no index with that name, which is what we want\n      }\n    });\n  }\n\n  const propName = ss.version === 2 ? 'mergedSchema' : 'schema';\n\n  // Loop over fields definitions and ensure collection indexes (server side only)\n  const schema = ss[propName]();\n  Object.keys(schema).forEach((fieldName) => {\n    const definition = schema[fieldName];\n    if ('index' in definition || definition.unique === true) {\n      const index = {};\n      // If they specified `unique: true` but not `index`,\n      // we assume `index: 1` to set up the unique index in mongo\n      let indexValue;\n      if ('index' in definition) {\n        indexValue = definition.index;\n        if (indexValue === true) indexValue = 1;\n      } else {\n        indexValue = 1;\n      }\n\n      const indexName = `c2_${fieldName}`;\n      // In the index object, we want object array keys without the \".$\" piece\n      const idxFieldName = fieldName.replace(/\\.\\$\\./g, '.');\n      index[idxFieldName] = indexValue;\n      const unique = !!definition.unique && (indexValue === 1 || indexValue === -1);\n      let sparse = definition.sparse || false;\n\n      // If unique and optional, force sparse to prevent errors\n      if (!sparse && unique && definition.optional) sparse = true;\n\n      if (indexValue === false) {\n        dropIndex(indexName);\n      } else {\n        ensureIndex(index, indexName, unique, sparse);\n      }\n    }\n  });\n});\n"]},"sourceType":"script","hash":"8ff258c244a4dcbfdeccaaca4f44d7ff6c024d5d"}
