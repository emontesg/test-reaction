{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"packages/aldeed:template-extension/lib/template-instance-parent.js","filename":"packages/aldeed:template-extension/lib/template-instance-parent.js","sourceMaps":true,"envName":"development","cwd":"/Users/estebandev/test-knowledge","passPerPreset":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/aldeed:template-extension/lib/template-instance-parent.js","plugins":["dynamicImport","classProperties","jsx","jsx","flow","asyncGenerators","objectRestSpread","objectRestSpread","flow","asyncGenerators"]},"generatorOpts":{"filename":"packages/aldeed:template-extension/lib/template-instance-parent.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/aldeed:template-extension/lib/template-instance-parent.js"}},"code":"/**\n * @param selector Can be a height or a function.\n *        Height. The number of levels beyond the current template instance to look.\n *        Defaults to 0.\n *\n *        Function that is given a template as we traverse up the template true. It is passed the template\n *        currently being traversed. If it returns true, then that template is returned, otherwise next is used. This\n *        is done till we hit a template with no parent, in which case null is returned.\n * @param includeBlockHelpers True to include block helpers.\n * @returns {*}\n */\nBlaze.TemplateInstance.prototype.parent = function () {\n  function parent(selector, includeBlockHelpers) {\n    var template = null;\n\n    if (isFinite(selector) || !selector) {\n      // If height is null, undefined, or 0, we default to 1, the first parent.\n      var height = !selector ? 1 : selector;\n      template = parentByHeight.call(this, height, includeBlockHelpers);\n    } else if (typeof selector === 'function') {\n      template = parentByHeight.call(this, Number.MAX_VALUE, includeBlockHelpers, selector);\n    } else {\n      throw 'template:children Template.parent() is given an invalid selector type.';\n    }\n\n    return template;\n  }\n\n  return parent;\n}(); // Access parent template instance. \"height\" is the number of levels beyond the\n// current template instance to look. By default block helper template instances\n// are skipped, but if \"includeBlockHelpers\" is set to true, they are not.\n// See https://github.com/meteor/meteor/issues/3071\n\n\nfunction parentByHeight(height, includeBlockHelpers, selector) {\n  var i = 0;\n  var template = this;\n\n  while (i < height && template) {\n    var view = parentView(template.view, includeBlockHelpers); // We skip contentBlock views which are injected by Meteor when using\n    // block helpers (in addition to block helper view). This matches more\n    // the visual structure of templates and not the internal implementation.\n\n    while (view && (!view.template || view.name === '(contentBlock)' || view.name === '(elseBlock)')) {\n      view = parentView(view, includeBlockHelpers);\n    }\n\n    if (!view) return null; // Body view has template field, but not templateInstance,\n    // which more or less signals that we reached the top.\n\n    template = typeof view.templateInstance === 'function' ? view.templateInstance() : null;\n\n    if (!!selector && !!selector(template)) {\n      return template;\n    }\n\n    i++;\n  }\n\n  return template;\n}\n\nfunction parentView(view, includeBlockHelpers) {\n  if (includeBlockHelpers) return view.originalParentView || view.parentView;\n  return view.parentView;\n}","map":{"version":3,"sources":["packages/aldeed:template-extension/lib/template-instance-parent.js"],"names":["Blaze","TemplateInstance","prototype","parent","selector","includeBlockHelpers","template","isFinite","height","parentByHeight","call","Number","MAX_VALUE","i","view","parentView","name","templateInstance","originalParentView"],"mappings":"AAAA;;;;;;;;;;;AAWAA,MAAMC,gBAAN,CAAuBC,SAAvB,CAAiCC,MAAjC;AAA0C,WAASA,MAAT,CAAgBC,QAAhB,EAA0BC,mBAA1B,EAA+C;AACvF,QAAIC,WAAW,IAAf;;AACA,QAAIC,SAASH,QAAT,KAAsB,CAACA,QAA3B,EAAqC;AACnC;AACA,UAAMI,SAAS,CAACJ,QAAD,GAAY,CAAZ,GAAgBA,QAA/B;AACAE,iBAAWG,eAAeC,IAAf,CAAoB,IAApB,EAA0BF,MAA1B,EAAkCH,mBAAlC,CAAX;AACD,KAJD,MAIO,IAAI,OAAOD,QAAP,KAAoB,UAAxB,EAAoC;AACzCE,iBAAWG,eAAeC,IAAf,CAAoB,IAApB,EAA0BC,OAAOC,SAAjC,EAA4CP,mBAA5C,EAAiED,QAAjE,CAAX;AACD,KAFM,MAEA;AACL,YAAM,wEAAN;AACD;;AAED,WAAOE,QAAP;AACD;;AAbD,SAAmDH,MAAnD;AAAA,I,CAeA;AACA;AACA;AACA;;;AACA,SAASM,cAAT,CAAwBD,MAAxB,EAAgCH,mBAAhC,EAAqDD,QAArD,EAA+D;AAC7D,MAAIS,IAAI,CAAR;AACA,MAAIP,WAAW,IAAf;;AACA,SAAOO,IAAIL,MAAJ,IAAcF,QAArB,EAA+B;AAC7B,QAAIQ,OAAOC,WAAWT,SAASQ,IAApB,EAA0BT,mBAA1B,CAAX,CAD6B,CAE7B;AACA;AACA;;AACA,WAAOS,SAAS,CAACA,KAAKR,QAAN,IAAkBQ,KAAKE,IAAL,KAAc,gBAAhC,IAAoDF,KAAKE,IAAL,KAAc,aAA3E,CAAP,EAAkG;AAChGF,aAAOC,WAAWD,IAAX,EAAiBT,mBAAjB,CAAP;AACD;;AACD,QAAI,CAACS,IAAL,EAAW,OAAO,IAAP,CARkB,CAU7B;AACA;;AACAR,eAAW,OAAOQ,KAAKG,gBAAZ,KAAiC,UAAjC,GAA8CH,KAAKG,gBAAL,EAA9C,GAAwE,IAAnF;;AAEA,QAAI,CAAC,CAACb,QAAF,IAAc,CAAC,CAACA,SAASE,QAAT,CAApB,EAAwC;AAAE,aAAOA,QAAP;AAAkB;;AAE5DO;AACD;;AACD,SAAOP,QAAP;AACD;;AAED,SAASS,UAAT,CAAoBD,IAApB,EAA0BT,mBAA1B,EAA+C;AAC7C,MAAIA,mBAAJ,EAAyB,OAAOS,KAAKI,kBAAL,IAA2BJ,KAAKC,UAAvC;AACzB,SAAOD,KAAKC,UAAZ;AACD","sourcesContent":["/**\n * @param selector Can be a height or a function.\n *        Height. The number of levels beyond the current template instance to look.\n *        Defaults to 0.\n *\n *        Function that is given a template as we traverse up the template true. It is passed the template\n *        currently being traversed. If it returns true, then that template is returned, otherwise next is used. This\n *        is done till we hit a template with no parent, in which case null is returned.\n * @param includeBlockHelpers True to include block helpers.\n * @returns {*}\n */\nBlaze.TemplateInstance.prototype.parent = function parent(selector, includeBlockHelpers) {\n  let template = null;\n  if (isFinite(selector) || !selector) {\n    // If height is null, undefined, or 0, we default to 1, the first parent.\n    const height = !selector ? 1 : selector;\n    template = parentByHeight.call(this, height, includeBlockHelpers);\n  } else if (typeof selector === 'function') {\n    template = parentByHeight.call(this, Number.MAX_VALUE, includeBlockHelpers, selector);\n  } else {\n    throw 'template:children Template.parent() is given an invalid selector type.';\n  }\n\n  return template;\n};\n\n// Access parent template instance. \"height\" is the number of levels beyond the\n// current template instance to look. By default block helper template instances\n// are skipped, but if \"includeBlockHelpers\" is set to true, they are not.\n// See https://github.com/meteor/meteor/issues/3071\nfunction parentByHeight(height, includeBlockHelpers, selector) {\n  var i = 0;\n  var template = this;\n  while (i < height && template) {\n    var view = parentView(template.view, includeBlockHelpers);\n    // We skip contentBlock views which are injected by Meteor when using\n    // block helpers (in addition to block helper view). This matches more\n    // the visual structure of templates and not the internal implementation.\n    while (view && (!view.template || view.name === '(contentBlock)' || view.name === '(elseBlock)')) {\n      view = parentView(view, includeBlockHelpers);\n    }\n    if (!view) return null;\n\n    // Body view has template field, but not templateInstance,\n    // which more or less signals that we reached the top.\n    template = typeof view.templateInstance === 'function' ? view.templateInstance() : null;\n\n    if (!!selector && !!selector(template)) { return template; }\n\n    i++;\n  }\n  return template;\n}\n\nfunction parentView(view, includeBlockHelpers) {\n  if (includeBlockHelpers) return view.originalParentView || view.parentView;\n  return view.parentView;\n}\n\n"]},"sourceType":"script","hash":"6c06611f2f106f816ae5812f01f7132090842a80"}
